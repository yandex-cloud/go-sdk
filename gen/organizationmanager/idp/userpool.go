// Code generated by sdkgen. DO NOT EDIT.

// nolint
package idp

import (
	"context"

	"google.golang.org/grpc"

	"github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
)

//revive:disable

// UserpoolServiceClient is a idp.UserpoolServiceClient with
// lazy GRPC connection initialization.
type UserpoolServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

// AddDomain implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) AddDomain(ctx context.Context, in *idp.AddUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).AddDomain(ctx, in, opts...)
}

// Create implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) Create(ctx context.Context, in *idp.CreateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) Delete(ctx context.Context, in *idp.DeleteUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).Delete(ctx, in, opts...)
}

// DeleteDomain implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) DeleteDomain(ctx context.Context, in *idp.DeleteUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).DeleteDomain(ctx, in, opts...)
}

// Get implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) Get(ctx context.Context, in *idp.GetUserpoolRequest, opts ...grpc.CallOption) (*idp.Userpool, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).Get(ctx, in, opts...)
}

// GetDomain implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) GetDomain(ctx context.Context, in *idp.GetUserpoolDomainRequest, opts ...grpc.CallOption) (*idp.Domain, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).GetDomain(ctx, in, opts...)
}

// List implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) List(ctx context.Context, in *idp.ListUserpoolsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).List(ctx, in, opts...)
}

type UserpoolIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *UserpoolServiceClient
	request *idp.ListUserpoolsRequest

	items []*idp.Userpool
}

func (c *UserpoolServiceClient) UserpoolIterator(ctx context.Context, req *idp.ListUserpoolsRequest, opts ...grpc.CallOption) *UserpoolIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &UserpoolIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *UserpoolIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.List(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Userpools
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *UserpoolIterator) Take(size int64) ([]*idp.Userpool, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*idp.Userpool

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *UserpoolIterator) TakeAll() ([]*idp.Userpool, error) {
	return it.Take(0)
}

func (it *UserpoolIterator) Value() *idp.Userpool {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *UserpoolIterator) Error() error {
	return it.err
}

// ListAccessBindings implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).ListAccessBindings(ctx, in, opts...)
}

type UserpoolAccessBindingsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *UserpoolServiceClient
	request *access.ListAccessBindingsRequest

	items []*access.AccessBinding
}

func (c *UserpoolServiceClient) UserpoolAccessBindingsIterator(ctx context.Context, req *access.ListAccessBindingsRequest, opts ...grpc.CallOption) *UserpoolAccessBindingsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &UserpoolAccessBindingsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *UserpoolAccessBindingsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListAccessBindings(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.AccessBindings
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *UserpoolAccessBindingsIterator) Take(size int64) ([]*access.AccessBinding, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*access.AccessBinding

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *UserpoolAccessBindingsIterator) TakeAll() ([]*access.AccessBinding, error) {
	return it.Take(0)
}

func (it *UserpoolAccessBindingsIterator) Value() *access.AccessBinding {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *UserpoolAccessBindingsIterator) Error() error {
	return it.err
}

// ListDomains implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) ListDomains(ctx context.Context, in *idp.ListUserpoolDomainsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolDomainsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).ListDomains(ctx, in, opts...)
}

type UserpoolDomainsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *UserpoolServiceClient
	request *idp.ListUserpoolDomainsRequest

	items []*idp.Domain
}

func (c *UserpoolServiceClient) UserpoolDomainsIterator(ctx context.Context, req *idp.ListUserpoolDomainsRequest, opts ...grpc.CallOption) *UserpoolDomainsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &UserpoolDomainsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *UserpoolDomainsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListDomains(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Domains
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *UserpoolDomainsIterator) Take(size int64) ([]*idp.Domain, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*idp.Domain

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *UserpoolDomainsIterator) TakeAll() ([]*idp.Domain, error) {
	return it.Take(0)
}

func (it *UserpoolDomainsIterator) Value() *idp.Domain {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *UserpoolDomainsIterator) Error() error {
	return it.err
}

// ListOperations implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) ListOperations(ctx context.Context, in *idp.ListUserpoolOperationsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolOperationsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).ListOperations(ctx, in, opts...)
}

type UserpoolOperationsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *UserpoolServiceClient
	request *idp.ListUserpoolOperationsRequest

	items []*operation.Operation
}

func (c *UserpoolServiceClient) UserpoolOperationsIterator(ctx context.Context, req *idp.ListUserpoolOperationsRequest, opts ...grpc.CallOption) *UserpoolOperationsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &UserpoolOperationsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *UserpoolOperationsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListOperations(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Operations
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *UserpoolOperationsIterator) Take(size int64) ([]*operation.Operation, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*operation.Operation

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *UserpoolOperationsIterator) TakeAll() ([]*operation.Operation, error) {
	return it.Take(0)
}

func (it *UserpoolOperationsIterator) Value() *operation.Operation {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *UserpoolOperationsIterator) Error() error {
	return it.err
}

// SetAccessBindings implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).SetAccessBindings(ctx, in, opts...)
}

// Update implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) Update(ctx context.Context, in *idp.UpdateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).Update(ctx, in, opts...)
}

// UpdateAccessBindings implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).UpdateAccessBindings(ctx, in, opts...)
}

// ValidateDomain implements idp.UserpoolServiceClient
func (c *UserpoolServiceClient) ValidateDomain(ctx context.Context, in *idp.ValidateUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(conn).ValidateDomain(ctx, in, opts...)
}
