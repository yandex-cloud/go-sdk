// Code generated by sdkgen. DO NOT EDIT.

// nolint
package oauth

import (
	"context"

	"google.golang.org/grpc"

	"github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	oauth "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp/application/oauth"
)

//revive:disable

// ApplicationServiceClient is a oauth.ApplicationServiceClient with
// lazy GRPC connection initialization.
type ApplicationServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

// Create implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Create(ctx context.Context, in *oauth.CreateApplicationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Delete(ctx context.Context, in *oauth.DeleteApplicationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Delete(ctx, in, opts...)
}

// Get implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Get(ctx context.Context, in *oauth.GetApplicationRequest, opts ...grpc.CallOption) (*oauth.Application, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Get(ctx, in, opts...)
}

// List implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) List(ctx context.Context, in *oauth.ListApplicationsRequest, opts ...grpc.CallOption) (*oauth.ListApplicationsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).List(ctx, in, opts...)
}

type ApplicationIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *ApplicationServiceClient
	request *oauth.ListApplicationsRequest

	items []*oauth.Application
}

func (c *ApplicationServiceClient) ApplicationIterator(ctx context.Context, req *oauth.ListApplicationsRequest, opts ...grpc.CallOption) *ApplicationIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &ApplicationIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *ApplicationIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.List(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Applications
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *ApplicationIterator) Take(size int64) ([]*oauth.Application, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*oauth.Application

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *ApplicationIterator) TakeAll() ([]*oauth.Application, error) {
	return it.Take(0)
}

func (it *ApplicationIterator) Value() *oauth.Application {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *ApplicationIterator) Error() error {
	return it.err
}

// ListAccessBindings implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).ListAccessBindings(ctx, in, opts...)
}

type ApplicationAccessBindingsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *ApplicationServiceClient
	request *access.ListAccessBindingsRequest

	items []*access.AccessBinding
}

func (c *ApplicationServiceClient) ApplicationAccessBindingsIterator(ctx context.Context, req *access.ListAccessBindingsRequest, opts ...grpc.CallOption) *ApplicationAccessBindingsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &ApplicationAccessBindingsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *ApplicationAccessBindingsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListAccessBindings(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.AccessBindings
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *ApplicationAccessBindingsIterator) Take(size int64) ([]*access.AccessBinding, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*access.AccessBinding

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *ApplicationAccessBindingsIterator) TakeAll() ([]*access.AccessBinding, error) {
	return it.Take(0)
}

func (it *ApplicationAccessBindingsIterator) Value() *access.AccessBinding {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *ApplicationAccessBindingsIterator) Error() error {
	return it.err
}

// ListAssignments implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) ListAssignments(ctx context.Context, in *oauth.ListAssignmentsRequest, opts ...grpc.CallOption) (*oauth.ListAssignmentsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).ListAssignments(ctx, in, opts...)
}

type ApplicationAssignmentsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *ApplicationServiceClient
	request *oauth.ListAssignmentsRequest

	items []*oauth.Assignment
}

func (c *ApplicationServiceClient) ApplicationAssignmentsIterator(ctx context.Context, req *oauth.ListAssignmentsRequest, opts ...grpc.CallOption) *ApplicationAssignmentsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &ApplicationAssignmentsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *ApplicationAssignmentsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListAssignments(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Assignments
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *ApplicationAssignmentsIterator) Take(size int64) ([]*oauth.Assignment, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*oauth.Assignment

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *ApplicationAssignmentsIterator) TakeAll() ([]*oauth.Assignment, error) {
	return it.Take(0)
}

func (it *ApplicationAssignmentsIterator) Value() *oauth.Assignment {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *ApplicationAssignmentsIterator) Error() error {
	return it.err
}

// ListOperations implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) ListOperations(ctx context.Context, in *oauth.ListApplicationOperationsRequest, opts ...grpc.CallOption) (*oauth.ListApplicationOperationsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).ListOperations(ctx, in, opts...)
}

type ApplicationOperationsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *ApplicationServiceClient
	request *oauth.ListApplicationOperationsRequest

	items []*operation.Operation
}

func (c *ApplicationServiceClient) ApplicationOperationsIterator(ctx context.Context, req *oauth.ListApplicationOperationsRequest, opts ...grpc.CallOption) *ApplicationOperationsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &ApplicationOperationsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *ApplicationOperationsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListOperations(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Operations
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *ApplicationOperationsIterator) Take(size int64) ([]*operation.Operation, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*operation.Operation

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *ApplicationOperationsIterator) TakeAll() ([]*operation.Operation, error) {
	return it.Take(0)
}

func (it *ApplicationOperationsIterator) Value() *operation.Operation {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *ApplicationOperationsIterator) Error() error {
	return it.err
}

// Reactivate implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Reactivate(ctx context.Context, in *oauth.ReactivateApplicationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Reactivate(ctx, in, opts...)
}

// SetAccessBindings implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).SetAccessBindings(ctx, in, opts...)
}

// Suspend implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Suspend(ctx context.Context, in *oauth.SuspendApplicationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Suspend(ctx, in, opts...)
}

// Update implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) Update(ctx context.Context, in *oauth.UpdateApplicationRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).Update(ctx, in, opts...)
}

// UpdateAccessBindings implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).UpdateAccessBindings(ctx, in, opts...)
}

// UpdateAssignments implements oauth.ApplicationServiceClient
func (c *ApplicationServiceClient) UpdateAssignments(ctx context.Context, in *oauth.UpdateAssignmentsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return oauth.NewApplicationServiceClient(conn).UpdateAssignments(ctx, in, opts...)
}
