// Code generated by sdkgen. DO NOT EDIT.

// nolint
package licensemanager

import (
	"context"

	"google.golang.org/grpc"

	licensemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/licensemanager/v1"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
)

//revive:disable

// LockServiceClient is a licensemanager.LockServiceClient with
// lazy GRPC connection initialization.
type LockServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

// Create implements licensemanager.LockServiceClient
func (c *LockServiceClient) Create(ctx context.Context, in *licensemanager.CreateLockRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements licensemanager.LockServiceClient
func (c *LockServiceClient) Delete(ctx context.Context, in *licensemanager.DeleteLockRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(conn).Delete(ctx, in, opts...)
}

// Ensure implements licensemanager.LockServiceClient
func (c *LockServiceClient) Ensure(ctx context.Context, in *licensemanager.EnsureLockRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(conn).Ensure(ctx, in, opts...)
}

// Get implements licensemanager.LockServiceClient
func (c *LockServiceClient) Get(ctx context.Context, in *licensemanager.GetLockRequest, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(conn).Get(ctx, in, opts...)
}

// GetByInstanceAndResource implements licensemanager.LockServiceClient
func (c *LockServiceClient) GetByInstanceAndResource(ctx context.Context, in *licensemanager.GetLockByInstanceAndResourceRequest, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(conn).GetByInstanceAndResource(ctx, in, opts...)
}
