// Code generated by sdkgen. DO NOT EDIT.

// nolint
package cloudregistry

import (
	"context"

	"google.golang.org/grpc"

	"github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
)

//revive:disable

// RegistryServiceClient is a cloudregistry.RegistryServiceClient with
// lazy GRPC connection initialization.
type RegistryServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

// Create implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) Create(ctx context.Context, in *cloudregistry.CreateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) Delete(ctx context.Context, in *cloudregistry.DeleteRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).Delete(ctx, in, opts...)
}

// Get implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) Get(ctx context.Context, in *cloudregistry.GetRegistryRequest, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).Get(ctx, in, opts...)
}

// List implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) List(ctx context.Context, in *cloudregistry.ListRegistriesRequest, opts ...grpc.CallOption) (*cloudregistry.ListRegistriesResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).List(ctx, in, opts...)
}

type RegistryIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *RegistryServiceClient
	request *cloudregistry.ListRegistriesRequest

	items []*cloudregistry.Registry
}

func (c *RegistryServiceClient) RegistryIterator(ctx context.Context, req *cloudregistry.ListRegistriesRequest, opts ...grpc.CallOption) *RegistryIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &RegistryIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *RegistryIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.List(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Registries
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *RegistryIterator) Take(size int64) ([]*cloudregistry.Registry, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*cloudregistry.Registry

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *RegistryIterator) TakeAll() ([]*cloudregistry.Registry, error) {
	return it.Take(0)
}

func (it *RegistryIterator) Value() *cloudregistry.Registry {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *RegistryIterator) Error() error {
	return it.err
}

// ListAccessBindings implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).ListAccessBindings(ctx, in, opts...)
}

type RegistryAccessBindingsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *RegistryServiceClient
	request *access.ListAccessBindingsRequest

	items []*access.AccessBinding
}

func (c *RegistryServiceClient) RegistryAccessBindingsIterator(ctx context.Context, req *access.ListAccessBindingsRequest, opts ...grpc.CallOption) *RegistryAccessBindingsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &RegistryAccessBindingsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *RegistryAccessBindingsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListAccessBindings(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.AccessBindings
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *RegistryAccessBindingsIterator) Take(size int64) ([]*access.AccessBinding, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*access.AccessBinding

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *RegistryAccessBindingsIterator) TakeAll() ([]*access.AccessBinding, error) {
	return it.Take(0)
}

func (it *RegistryAccessBindingsIterator) Value() *access.AccessBinding {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *RegistryAccessBindingsIterator) Error() error {
	return it.err
}

// ListArtifacts implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) ListArtifacts(ctx context.Context, in *cloudregistry.ListArtifactsRequest, opts ...grpc.CallOption) (*cloudregistry.ListArtifactsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).ListArtifacts(ctx, in, opts...)
}

type RegistryArtifactsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *RegistryServiceClient
	request *cloudregistry.ListArtifactsRequest

	items []*cloudregistry.Artifact
}

func (c *RegistryServiceClient) RegistryArtifactsIterator(ctx context.Context, req *cloudregistry.ListArtifactsRequest, opts ...grpc.CallOption) *RegistryArtifactsIterator {
	var pageSize int64
	const defaultPageSize = 1000
	pageSize = req.PageSize
	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &RegistryArtifactsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *RegistryArtifactsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started && it.request.PageToken == "" {
		return false
	}
	it.started = true

	if it.requestedSize == 0 || it.requestedSize > it.pageSize {
		it.request.PageSize = it.pageSize
	} else {
		it.request.PageSize = it.requestedSize
	}

	response, err := it.client.ListArtifacts(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Artifacts
	it.request.PageToken = response.NextPageToken
	return len(it.items) > 0
}

func (it *RegistryArtifactsIterator) Take(size int64) ([]*cloudregistry.Artifact, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*cloudregistry.Artifact

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *RegistryArtifactsIterator) TakeAll() ([]*cloudregistry.Artifact, error) {
	return it.Take(0)
}

func (it *RegistryArtifactsIterator) Value() *cloudregistry.Artifact {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *RegistryArtifactsIterator) Error() error {
	return it.err
}

// ListIpPermissions implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) ListIpPermissions(ctx context.Context, in *cloudregistry.ListIpPermissionsRequest, opts ...grpc.CallOption) (*cloudregistry.ListIpPermissionsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).ListIpPermissions(ctx, in, opts...)
}

type RegistryIpPermissionsIterator struct {
	ctx  context.Context
	opts []grpc.CallOption

	err           error
	started       bool
	requestedSize int64
	pageSize      int64

	client  *RegistryServiceClient
	request *cloudregistry.ListIpPermissionsRequest

	items []*cloudregistry.IpPermission
}

func (c *RegistryServiceClient) RegistryIpPermissionsIterator(ctx context.Context, req *cloudregistry.ListIpPermissionsRequest, opts ...grpc.CallOption) *RegistryIpPermissionsIterator {
	var pageSize int64
	const defaultPageSize = 1000

	if pageSize == 0 {
		pageSize = defaultPageSize
	}
	return &RegistryIpPermissionsIterator{
		ctx:      ctx,
		opts:     opts,
		client:   c,
		request:  req,
		pageSize: pageSize,
	}
}

func (it *RegistryIpPermissionsIterator) Next() bool {
	if it.err != nil {
		return false
	}
	if len(it.items) > 1 {
		it.items[0] = nil
		it.items = it.items[1:]
		return true
	}
	it.items = nil // consume last item, if any

	if it.started {
		return false
	}
	it.started = true

	response, err := it.client.ListIpPermissions(it.ctx, it.request, it.opts...)
	it.err = err
	if err != nil {
		return false
	}

	it.items = response.Permissions
	return len(it.items) > 0
}

func (it *RegistryIpPermissionsIterator) Take(size int64) ([]*cloudregistry.IpPermission, error) {
	if it.err != nil {
		return nil, it.err
	}

	if size == 0 {
		size = 1 << 32 // something insanely large
	}
	it.requestedSize = size
	defer func() {
		// reset iterator for future calls.
		it.requestedSize = 0
	}()

	var result []*cloudregistry.IpPermission

	for it.requestedSize > 0 && it.Next() {
		it.requestedSize--
		result = append(result, it.Value())
	}

	if it.err != nil {
		return nil, it.err
	}

	return result, nil
}

func (it *RegistryIpPermissionsIterator) TakeAll() ([]*cloudregistry.IpPermission, error) {
	return it.Take(0)
}

func (it *RegistryIpPermissionsIterator) Value() *cloudregistry.IpPermission {
	if len(it.items) == 0 {
		panic("calling Value on empty iterator")
	}
	return it.items[0]
}

func (it *RegistryIpPermissionsIterator) Error() error {
	return it.err
}

// SetAccessBindings implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).SetAccessBindings(ctx, in, opts...)
}

// SetIpPermissions implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) SetIpPermissions(ctx context.Context, in *cloudregistry.SetIpPermissionsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).SetIpPermissions(ctx, in, opts...)
}

// Update implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) Update(ctx context.Context, in *cloudregistry.UpdateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).Update(ctx, in, opts...)
}

// UpdateAccessBindings implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).UpdateAccessBindings(ctx, in, opts...)
}

// UpdateIpPermissions implements cloudregistry.RegistryServiceClient
func (c *RegistryServiceClient) UpdateIpPermissions(ctx context.Context, in *cloudregistry.UpdateIpPermissionsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(conn).UpdateIpPermissions(ctx, in, opts...)
}
