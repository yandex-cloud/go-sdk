syntax = "proto3";

package yandex.cloud.serverless.eventrouter.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/serverless/eventrouter/v1/connector.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1;eventrouter";
option java_outer_classname = "PERCS";
option java_package = "yandex.cloud.api.serverless.eventrouter.v1";

// A set of methods for managing connectors for serverless eventrouter.
service ConnectorService {
  // Returns the specified bus.
  // To get the list of all available connectors, make a [List] request.
  rpc Get (GetConnectorRequest) returns (Connector) {
      option (google.api.http) = {get: "/eventrouter/v1/connectors/{connector_id}"};
  }

  // Retrieves the list of connectors in the specified folder.
  rpc List (ListConnectorsRequest) returns (ListConnectorsResponse) {
     option (google.api.http) = { get: "/eventrouter/v1/connectors" };
  }

  // Creates a connector in the specified folder.
  rpc Create (CreateConnectorRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/eventrouter/v1/connectors" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateConnectorMetadata"
      response: "Connector"
    };
  };

  // Updates the specified connector.
  rpc Update (UpdateConnectorRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/eventrouter/v1/connectors/{connector_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateConnectorMetadata"
      response: "Connector"
    };
  };

  // Deletes the specified connector.
  rpc Delete (DeleteConnectorRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/eventrouter/v1/connectors/{connector_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteConnectorMetadata"
      response: "google.protobuf.Empty"
    };
  };

   // Starts the specified connector.
  rpc Start (StartConnectorRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/eventrouter/v1/connectors/{connector_id}:start"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartConnectorMetadata"
      response: "google.protobuf.Empty"
    };
  };

  // Stops the specified connector.
  rpc Stop (StopConnectorRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/eventrouter/v1/connectors/{connector_id}:stop"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopConnectorMetadata"
      response: "google.protobuf.Empty"
    };
  };

  // Lists existing access bindings for the specified bus.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = {get: "/eventrouter/v1/connectors/{resource_id}:listAccessBindings"};
  }

  // Sets access bindings for the connector.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/eventrouter/v1/connectors/{resource_id}:setAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates access bindings for the specified connector.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/eventrouter/v1/connectors/{resource_id}:updateAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Lists operations for the specified connector.
  rpc ListOperations (ListConnectorOperationsRequest) returns (ListConnectorOperationsResponse) {
    option (google.api.http) = { get: "/eventrouter/v1/connectors/{connector_id}/operations" };
  }
}

message GetConnectorRequest {
  // ID of the connector to return.
  string connector_id = 1 [(required) = true];
}

message ListConnectorsRequest {
  // ID of the folder or bus to list connectors in.
  oneof container_id {
    option (exactly_one) = true;
    // ID of the bus to list connectors in.
    string bus_id = 1;
    // ID of the folder to list connectors in.
    string folder_id = 2;
  }

  // The maximum number of results per response.
  int64 page_size = 3;

  // Page token. To get the next page of results, set `page_token` to the
  // `next_page_token` returned by a previous list request.
  string page_token = 4;

  // Supported fields for filter:
  //   name
  //   created_at
  string filter = 5;
}

message ListConnectorsResponse {
  // List of connectors.
  repeated Connector connectors = 1;
  // Token for getting the next page of the list of results.
  string next_page_token = 2;
}

message CreateConnectorRequest {
  // ID of the bus to create a connector in.
  string bus_id = 1 [(required) = true];

  // Name of the connector.
  string name = 2 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  
  // Description of the connector.
  string description = 3 [(length) = "<=256"];

  // Labels for the connector.
  map<string, string> labels = 4 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  
  // Source of the connector.
  Source source = 5;

  // Flag that disallow deletion of the connector.
  bool deletion_protection = 6;
}

message CreateConnectorMetadata {
  // ID of the connector that is being created.
  string connector_id = 1;

  // ID of the bus that the connector is created in.
  string bus_id = 2;
}

message UpdateConnectorRequest {
  // ID of the connector to update.
  string connector_id = 1 [(required) = true];

  // Field mask that specifies which fields of the connector are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New name of the connector.
  string name = 3 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];

  // New description of the connector.
  string description = 4 [(length) = "<=256"];

  // New labels of the connector.
  map<string, string> labels = 5 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  
  // New flag that disallow deletion of the connector.
  bool deletion_protection = 6;
}

message UpdateConnectorMetadata {
  // ID of the connector that is being updated.
  string connector_id = 1 [(required) = true];
}

message DeleteConnectorRequest {
  // ID of the connector to delete.
  string connector_id = 1 [(required) = true];
}

message DeleteConnectorMetadata {
  // ID of the connector that is being deleted.
  string connector_id = 1 [(required) = true];
}

message ListConnectorOperationsRequest {
  // ID of the connector to list operations for.
  string connector_id = 1 [(required) = true];

  // The maximum number of results per response.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set `page_token` to the
  // `next_page_token` returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // Supported attributes for filter:
  //   description
  //   created_at
  //   modified_at
  //   created_by
  //   done
  string filter = 4 [(length) = "<=1000"];
}

message ListConnectorOperationsResponse {
  // List of operations for the specified connector.
  repeated operation.Operation operations = 1;

  // Token for getting the next page of the list of results.
  string next_page_token = 2;
}

message StartConnectorRequest {
  // ID of the connector to start.
  string connector_id = 1 [(required) = true];
}

message StartConnectorMetadata {
  // ID of the connector that is being started.
  string connector_id = 1 [(required) = true];
}

message StopConnectorRequest {
  // ID of the connector to stop.
  string connector_id = 1 [(required) = true];
}

message StopConnectorMetadata {
  // ID of the connector that is being stopped.
  string connector_id = 1 [(required) = true];
}
