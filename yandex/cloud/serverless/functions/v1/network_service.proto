syntax = "proto3";

package yandex.cloud.serverless.functions.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/functions/v1;functions";
option java_package = "yandex.cloud.api.serverless.functions.v1";

// A set of methods for managing VPC networks connected to serverless resources.
service NetworkService {
  // Returns the specified network used in serverless resources.
  rpc GetUsed (GetUsedNetworkRequest) returns (UsedNetwork) {
    option (google.api.http) = { get: "/functions/v1/networks/used/{network_id}" };
  }

  // Retrieves the list of networks in the specified scope that are used in serverless resources.
  rpc ListUsed (ListUsedNetworksRequest) returns (ListUsedNetworksResponse) {
    option (google.api.http) = { get: "/functions/v1/networks/used" };
  }

  // Retrieves the list of serverless resources connected to any network from the specified scope.
  rpc ListConnectedResources (ListConnectedResourcesRequest) returns (ListConnectedResourcesResponse) {
    option (google.api.http) = { get: "/functions/v1/networks/connections" };
  }

  // Forces obsolete used network to start cleanup process as soon as possible.
  // Invocation does not wait for start or end of the cleanup process.
  // Second invocation with the same network does nothing until network is completely cleaned-up.
  rpc TriggerUsedCleanup(TriggerUsedNetworkCleanupRequest) returns (TriggerUsedNetworkCleanupResponse) {
    option (google.api.http) = { post: "/functions/v1/networks/used/{network_id}:triggerCleanup" body: "*" };
  }
}

// A VPC network used in serverless resources.
message UsedNetwork {
  enum Status {
    STATUS_UNSPECIFIED = 0;

    // Network is connecting to its first serverless resource.
    CREATING = 1;

    // Network is already being used by some serverless resources.
    ACTIVE = 2;

    // Network is no longer used by any serverless resources.
    // It will be cleaned-up after a while.
    OBSOLETE = 3;
  }

  // ID of the VPC network.
  string network_id = 1;

  // ID of the cloud that the network belongs to.
  string cloud_id = 2;

  // ID of the folder that the network belongs to.
  string folder_id = 3;

  // Status of the network.
  Status status = 4;

  // Clean-up timestamp of the obsolete network.
  google.protobuf.Timestamp will_be_cleaned_up_at = 5;

  // Number of serverless resources connected to the network.
  int64 connections_count = 6;
}

message GetUsedNetworkRequest {
  // ID of the network to return.
  string network_id = 1 [(required) = true];
}

message ListUsedNetworksRequest {
  // The maximum number of results per page to return. If the number of available
  // results is larger than `pageSize`, the service returns a [ListUsedNetworksResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  //
  // Default value: 100.
  int64 page_size = 1 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `pageToken` to the
  // [ListUsedNetworksResponse.next_page_token] returned by a previous list request.
  string page_token = 2 [(length) = "<=100"];

  oneof scope {
    option (exactly_one) = true;

    // ID of the cloud to list used networks in.
    string cloud_id = 3;

    // ID of the folder to list used networks in.
    string folder_id = 4;
  }
}

message ListUsedNetworksResponse {
  // List of used networks in the specified scope.
  repeated UsedNetwork networks = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // the specified [ListUsedNetworksRequest.page_size], use `nextPageToken` as the value
  // for the [ListUsedNetworksRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `nextPageToken` to continue paging through the results.
  string next_page_token = 2;
}

message ListConnectedResourcesRequest {
  // The maximum number of results per page to return. If the number of available
  // results is larger than `pageSize`, the service returns a [ListConnectedResourcesResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  //
  // Default value: 100.
  int64 page_size = 1 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `pageToken` to the
  // [ListConnectedResourcesResponse.next_page_token] returned by a previous list request.
  string page_token = 2 [(length) = "<=100"];

  oneof network_scope {
    option (exactly_one) = true;

    // ID of the network to list serverless resources connected to it.
    string network_id = 3;

    // ID of the cloud to list serverless resources connected to any network from it.
    string cloud_id = 4;

    // ID of the folder to list serverless resources connected to any network from it.
    string folder_id = 5;
  }
}

message ListConnectedResourcesResponse {
  // List of serverless resources connected to any network from the specified scope.
  repeated ConnectedResource resources = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // the specified [ListConnectedResourcesRequest.page_size], use `nextPageToken` as the value
  // for the [ListConnectedResourcesRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `nextPageToken` to continue paging through the results.
  string next_page_token = 2;

  // Serverless resource connected to VPC network.
  message ConnectedResource {
    // ID of the network to which the resource is connected.
    string network_id = 1;

    // Type of the serverless resource.
    string resource_type = 2;

    // ID of the serverless resource.
    string resource_id = 3;

    // Type of the serverless subresource.
    string subresource_type = 4;

    // ID of the serverless subresource.
    string subresource_id = 5;

    // ID of the cloud that the resource belongs to.
    string resource_cloud_id = 6;

    // ID of the folder thar the resource belongs to.
    string resource_folder_id = 7;
  }
}

message TriggerUsedNetworkCleanupRequest {
  // ID of the obsolete network to start the cleanup process for.
  string network_id = 1 [(required) = true];
}

message TriggerUsedNetworkCleanupResponse {
  // Timestamp when cleanup of the specified network will be started.
  google.protobuf.Timestamp network_cleanup_time = 1;
}
