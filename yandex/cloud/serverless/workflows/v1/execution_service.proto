syntax = "proto3";

package yandex.cloud.serverless.workflows.v1;

import "google/api/annotations.proto";
import "yandex/cloud/serverless/workflows/v1/execution.proto";
import "yandex/cloud/serverless/workflows/v1/history_entry.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/workflows/v1;workflows";
option java_package = "yandex.cloud.api.serverless.workflows.v1";

// Set of methods for managing Workflows Executions.
service ExecutionService {
  // Starts new Workflow execution.
  rpc Start (StartExecutionRequest) returns (StartExecutionResponse) {
    option (google.api.http) = {post: "/workflows/v1/execution/start" body: "*"};
  };

  // Stops specified Workflow execution.
  rpc Stop (StopExecutionRequest) returns (StopExecutionResponse) {
    option (google.api.http) = {post: "/workflows/v1/execution/{execution_id}/stop"};
  };

  // Terminates specified Workflow execution.
  rpc Terminate (TerminateExecutionRequest) returns (TerminateExecutionResponse) {
    option (google.api.http) = {post: "/workflows/v1/execution/{execution_id}/terminate"};
  }

  // Retrieves specified Workflow execution.
  rpc Get (GetExecutionRequest) returns (GetExecutionResponse) {
    option (google.api.http) = {get: "/workflows/v1/execution/{execution_id}"};
  };

  // Retrieves detailed history of specified Workflow execution.
  rpc GetHistory (GetExecutionHistoryRequest) returns (GetExecutionHistoryResponse) {
    option (google.api.http) = {get: "/workflows/v1/execution/{execution_id}/history"};
  };

  // Retrieves list of Workflow executions.
  rpc List (ListExecutionsRequest) returns (ListExecutionsResponse) {
    option (google.api.http) = {get: "/workflows/v1/execution"};
  };
}

message StartExecutionRequest {
  reserved 2;
  // ID of the Workflow.
  string workflow_id = 1 [(required) = true];
  // Input for the Workflow execution
  ExecutionInput input = 3;
}

message StartExecutionResponse {
  // ID of the Workflow execution.
  string execution_id = 1;
}

message StopExecutionRequest {
  // ID of the Workflow execution.
  string execution_id = 1 [(required) = true];
}

message StopExecutionResponse {
  // ID of the Workflow execution.
  string execution_id = 1;
}

message TerminateExecutionRequest {
  // ID of the Workflow execution.
  string execution_id = 1 [(required) = true];
}

message TerminateExecutionResponse {
  // ID of the Workflow execution.
  string execution_id = 1;
}

message GetExecutionRequest {
  // ID of the Workflow execution.
  string execution_id = 1 [(required) = true];
}

message GetExecutionResponse {
  // Workflow execution details.
  Execution execution = 1;
}

message GetExecutionHistoryRequest {
  // ID of the Workflow execution.
  string execution_id = 1 [(required) = true];
}

message GetExecutionHistoryResponse {
  // Workflow execution details.
  ExecutionPreview execution = 1;
  // Workflow execution detailed history items.
  repeated HistoryEntry entries = 2 [(size) = ">0"];
}

message ListExecutionsRequest {
  // ID of the Workflow.
  string workflow_id = 1 [(required) = true];
  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `pageSize`, the service returns a [ListExecutionsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  //
  // Default value: 100.
  int64 page_size = 2 [(value) = "0-2147483647"];
  // Page token. To get the next page of results, set `pageToken` to the
  // [ListExecutionsResponse.next_page_token] returned by a previous list request.
  string page_token = 3;
  // A filter expression that filters resources listed in the response.
  //
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the following fields: status, started_at, finished_at.
  // 2. Operator: `=`, `<` or `>`.
  // 3. The value. Must be sting and match the regular expression `[+:\.-a-z0-9]`.
  // Examples of a filter: `status=ERROR`, `created_by=John.Doe`.
  string filter = 4;
}

message ListExecutionsResponse {
  // List of Workflow executions.
  repeated ExecutionPreview executions = 1;
  // Token for getting the next page of the list. If the number of results is greater than
  // the specified [ListExecutionsRequest.page_size], use `next_page_token` as the value
  // for the [ListExecutionsRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}
