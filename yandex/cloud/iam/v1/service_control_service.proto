syntax = "proto3";

package yandex.cloud.iam.v1;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/iam/v1/resource.proto";
import "yandex/cloud/iam/v1/service_control.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/iam/v1;iam";
option java_package = "yandex.cloud.api.iam.v1";

// A set of methods for managing Service resources.
service ServiceControlService {
  // Returns the Service information in the specified resource container.
  //
  // To get the list of available Services, make a [List] request.
  rpc Get (GetServiceRequest) returns (Service) {
    option (google.api.http) = { get: "/iam/v1/services/{service_id}" };
  }

  // Retrieves the list of Service in the specified resource container.
  rpc List (ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = { get: "/iam/v1/services" };
  }

  // Enable a service in the specified resource container.
  rpc Enable (EnableServiceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/iam/v1/service/{service_id}:enable" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "EnableServiceMetadata"
      response: "Service"
    };
  }

  // Disable a service in the specified resource container.
  rpc Disable (DisableServiceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/iam/v1/service/{service_id}:disable" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DisableServiceMetadata"
      response: "Service"
    };
  }

  // Resolve agent service account for the service in the specified resource container.
  rpc ResolveAgent (ResolveServiceAgentRequest) returns (ServiceAgent) {
    option (google.api.http) = { get: "/iam/v1/service/{service_id}/microservice/{microservice_id}" };
  };
}

message GetServiceRequest {
  // ID of the Service.
  string service_id = 1 [(required) = true, (length) = "<=50"];

  // Resource container to get a service information in.
  //
  // It is supported only resource-manager.cloud resource container now.
  Resource resource = 2 [(required) = true];
}

message ListServicesRequest {
  // Resource container to list a services.
  //
  // It is supported only resource-manager.cloud resource container now.
  Resource resource = 1 [(required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListServicesResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token]
  // to the [ListServicesResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=2000"];
}

message ListServicesResponse {
  // List of Services.
  repeated Service services = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListServicesRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListServicesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message EnableServiceRequest {
  // ID of the Service.
  string service_id = 1 [(required) = true, (length) = "<=50"];

  // Resource container to enable a service in.
  //
  // It is supported only resource-manager.cloud resource container now.
  Resource resource = 2 [(required) = true];
}

message EnableServiceMetadata {
  // ID of the Service.
  string service_id = 1;

  // Resource container.
  Resource resource = 2;
}

message DisableServiceRequest {
  // ID of the Service.
  string service_id = 1 [(required) = true, (length) = "<=50"];

  // Resource container to disable a service in.
  //
  // It is supported only resource-manager.cloud resource container now.
  Resource resource = 2 [(required) = true];
}

message DisableServiceMetadata {
  // ID of the Service.
  string service_id = 1;

  // Resource container.
  Resource resource = 2;
}

message ResolveServiceAgentRequest {
  // ID of the Service.
  string service_id = 1 [(required) = true, (length) = "<=50"];

  // ID of the Microservice.
  string microservice_id = 2 [(length) = "<=50"];

  // Resource container.
  Resource resource = 3 [(required) = true];
}
