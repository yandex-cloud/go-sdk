syntax = "proto3";

package yandex.cloud.vpc.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/vpc/v1/gateway.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1;vpc";
option java_package = "yandex.cloud.api.vpc.v1";

service GatewayService {
  // Returns the specified Gateway resource.
  //
  // To get the list of all available Gateway resources, make a [List] request.
  rpc Get (GetGatewayRequest) returns (Gateway) {
    option (google.api.http) = {get: "/vpc/v1/gateways/{gateway_id}"};
  }

  // Retrieves the list of Gateway resources in the specified folder.
  rpc List (ListGatewaysRequest) returns (ListGatewaysResponse) {
    option (google.api.http) = {get: "/vpc/v1/gateways"};
  }

  // Creates a gateway in the specified folder.
  rpc Create (CreateGatewayRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/vpc/v1/gateways" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "CreateGatewayMetadata"
      response: "Gateway"
    };
  };

  // Updates the specified gateway.
  rpc Update (UpdateGatewayRequest) returns (operation.Operation) {
    option (google.api.http) = {patch: "/vpc/v1/gateways/{gateway_id}" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateGatewayMetadata"
      response: "Gateway"
    };
  };

  // Deletes the specified gateway.
  rpc Delete (DeleteGatewayRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/vpc/v1/gateways/{gateway_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteGatewayMetadata"
      response: "google.protobuf.Empty"
    };
  };

  // List operations for the specified gateway.
  rpc ListOperations (ListGatewayOperationsRequest) returns (ListGatewayOperationsResponse) {
    option (google.api.http) = {get: "/vpc/v1/gateways/{gateway_id}/operations"};
  }

  // Move a gateway to another folder
  rpc Move (MoveGatewayRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/vpc/v1/gateways/{gateway_id}:move" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "MoveGatewayMetadata"
      response: "Gateway"
    };
  }
}

message GetGatewayRequest {
  // ID of the Gateway resource to return.
  //
  // To get Gateway resource ID make a [GatewayService.List] request.
  string gateway_id = 1 [(required) = true, (length) = "<=50"];
}

message ListGatewaysRequest {
  // ID of the folder to list gateways in.
  //
  // To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than `page_size`, the service returns a [ListGatewaysResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListGatewaysResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // A filter expression that filters Gateway listed in the response.
  //
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Gateway.name] field.
  // 2. An `=` operator.
  // 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
  // Example of a filter: `name=my-gateway`.
  string filter = 4 [(length) = "<=1000"];
}

message ListGatewaysResponse {
  // List of gateways.
  repeated Gateway gateways = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // the specified [ListGatewaysRequest.page_size], use `next_page_token` as the value
  // for the [ListGatewaysRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message ListGatewayOperationsRequest {
  // ID of the gateway to list operations for.
  //
  // To get a gateway ID make a [GatewayService.List] request.
  string gateway_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListGatewayOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListGatewayOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListGatewayOperationsResponse {
  // List of operations for the specified gateway.
  repeated operation.Operation operations = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // the specified [ListGatewayOperationsRequest.page_size], use `next_page_token` as the value
  // for the [ListGatewayOperationsRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message SharedEgressGatewaySpec {
}

message CreateGatewayRequest {
  // ID of the folder to create a gateway in.
  //
  // To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the gateway.
  // The name must be unique within the folder.
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the gateway.
  string description = 3 [(length) = "<=256"];

  // Gateway labels as `key:value` pairs.
  map<string, string> labels = 4 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // Gateway configuration specification
  oneof gateway {
    SharedEgressGatewaySpec shared_egress_gateway_spec = 5;
  }
}

message CreateGatewayMetadata {
  // ID of the gateway that is being created.
  string gateway_id = 1;
}

message UpdateGatewayRequest {
  // ID of the gateway to update.
  //
  // To get the gateway ID make a [GatewayService.List] request.
  string gateway_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which attributes of the Gateway should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New name for the gateway.
  // The name must be unique within the folder.
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // New description of the gateway.
  string description = 4 [(length) = "<=256"];

  // Gateway labels as `key:value` pairs.
  //
  // Existing set of labels is completely replaced by the provided set, so if you just want
  // to add or remove a label:
  // 1. Get the current set of labels with a [GatewayService.Get] request.
  // 2. Add or remove a label in this set.
  // 3. Send the new set in this field.
  map<string, string> labels = 5 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // New Gateway configuration specification
  oneof gateway {
    SharedEgressGatewaySpec shared_egress_gateway_spec = 6;
  }
}

message UpdateGatewayMetadata {
  // ID of the Gateway that is being updated.
  string gateway_id = 1;
}

message DeleteGatewayRequest {
  // ID of the gateway to delete.
  //
  // To get a gateway ID make a [GatewayService.List] request.
  string gateway_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteGatewayMetadata {
  // ID of the gateway that is being deleted.
  string gateway_id = 1;
}

message MoveGatewayRequest {
  string gateway_id = 1 [(required) = true, (length) = "<=50"];
  string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
}

message MoveGatewayMetadata {
  string gateway_id = 1;
}
