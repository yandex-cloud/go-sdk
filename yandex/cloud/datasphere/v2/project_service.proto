syntax = "proto3";

package yandex.cloud.datasphere.v2;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/datasphere/v2/project.proto";
import "yandex/cloud/datasphere/v2/resource_types.proto";
import "yandex/cloud/datasphere/v2/restrictions.proto";

import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2;datasphere";
option java_package = "yandex.cloud.api.datasphere.v2";

// A set of methods for managing Project resources.
service ProjectService {
  // Creates a project in the specified folder.
  rpc Create (CreateProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "CreateProjectMetadata"
      response: "Project"
    };
  }

  // Updates the specified project.
  rpc Update (UpdateProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {patch: "/datasphere/v2/projects/{project_id}" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateProjectMetadata"
      response: "Project"
    };
  }

  // Deletes the specified project.
  rpc Delete (DeleteProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/datasphere/v2/projects/{project_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteProjectMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Opens the specified project.
  rpc Open (OpenProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{project_id}:open" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "OpenProjectMetadata"
      response: "OpenProjectResponse"
    };
  }

  // Returns the specified project.
  rpc Get (GetProjectRequest) returns (Project) {
    option (google.api.http) = {get: "/datasphere/v2/projects/{project_id}"};
  }

  // Lists projects for the specified community.
  rpc List (ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/datasphere/v2/projects"};
  }

  // Returns the unit balance of the specified project.
  rpc GetUnitBalance (GetUnitBalanceRequest) returns (GetUnitBalanceResponse) {
    option (google.api.http) = {get: "/datasphere/v2/projects/{project_id}:unitBalance"};
  }

  // Sets the unit balance of the specified project.
  rpc SetUnitBalance (SetUnitBalanceRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{project_id}:unitBalance" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "SetUnitBalanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Executes code of the specified notebook using configuration defined in the project settings. If the default project configuration is not specified, `c1.4` is used.
  rpc Execute (ProjectExecutionRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{project_id}:execute" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "ProjectExecutionMetadata"
      response: "ProjectExecutionResponse"
    };
  }

  // Lists access bindings for the project.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = {get: "/datasphere/v2/projects/{resource_id}:accessBindings"};
  }

  // Sets access bindings for the project.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{resource_id}:setAccessBindings" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "SetProjectAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates access bindings for the project.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {patch: "/datasphere/v2/projects/{resource_id}:updateAccessBindings" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateProjectAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Adds shared resource to project
  rpc AddResource (AddResourceToProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{resource_id}:addResource" body: "*"};
    option (yandex.cloud.api.operation) = {
      response: "google.protobuf.Empty"
    };
  }

  // Removes shared resource from project
  rpc RemoveResource (RemoveResourceFromProjectRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{resource_id}:removeResource" body: "*"};
    option (yandex.cloud.api.operation) = {
      response: "google.protobuf.Empty"
    };
  }

  // Resizes project disk
  rpc ResizeDisk (ResizeProjectDiskRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "ResizeProjectDiskMetadata"
      response: "DiskInfo"
    };
  }

  // Get meta information about available restrictions.
  rpc GetRestrictionsMeta (google.protobuf.Empty) returns (GetRestrictionsMetaResponse) {
    option (google.api.http) = {get: "/datasphere/v2/projects/restrictionsMeta"};
  }

  // Get current project restrictions.
  rpc GetRestrictions (GetProjectRestrictionsRequest) returns (RestrictionsResponse) {
    option (google.api.http) = {get: "/datasphere/v2/projects/{project_id}:restrictions"};
  }

  // Set project restrictions.
  rpc SetRestrictions (SetProjectRestrictionsRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/datasphere/v2/projects/{project_id}:setRestrictions" body: "*"};
    option (yandex.cloud.api.operation) = {
      response: "RestrictionsResponse"
    };
  }
}

message CreateProjectRequest {
  // ID of the community to create a project in.
  string community_id = 1 [(length) = "<=50", (required) = true];

  // Name of the project. 0-63 characters long.
  string name = 2 [(length) = "<=63", (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the project. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  // Labels of the project.
  map<string, string> labels = 4 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Settings of the project.
  Project.Settings settings = 5;

  // Limits of the project.
  Project.Limits limits = 6;

  reserved 7;
}

message CreateProjectMetadata {
  // ID of the project that is being created.
  string project_id = 1;
}

message UpdateProjectRequest {
  // ID of the Project resource to update.
  // To get the project ID use a [ProjectService.List] request.
  string project_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which fields of the Project resource are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Name of the project. 0-63 characters long.
  string name = 3 [(length) = "<=63", (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the project. 0-256 characters long.
  string description = 4 [(length) = "<=256"];

  // Labels of the project.
  map<string, string> labels = 5 [(size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Settings of the project.
  Project.Settings settings = 6;

  // Limits of the project.
  Project.Limits limits = 7;
}

message UpdateProjectMetadata {
  // ID of the project that is being updated.
  string project_id = 1;
}

message DeleteProjectRequest {
  // ID of the Project resource to delete.
  // To get the project ID use a [ProjectService.List] request.
  string project_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteProjectMetadata {
  // ID of the project that is being deleted.
  string project_id = 1;
}

message OpenProjectRequest {
  // ID of the Project resource to open.
  // To get the project ID use a [ProjectService.List] request.
  string project_id = 1 [(required) = true, (length) = "<=50"];
}

message OpenProjectMetadata {
  enum OpenProjectStatus {
    OPEN_PROJECT_STATUS_UNSPECIFIED = 0;

    // Closing previous IDE instance.
    OPEN_PROJECT_STATUS_CLOSING_IDE = 1;

    // Unzipping project.
    OPEN_PROJECT_STATUS_UNZIPPING_PROJECT = 2;

    // Allocating VM for the project.
    OPEN_PROJECT_STATUS_ALLOCATING_VM = 3;

    // Allocating resources for the project.
    OPEN_PROJECT_STATUS_ALLOCATING_RESOURCES = 4;

    // Starting IDE.
    OPEN_PROJECT_STATUS_STARTING_IDE = 5;

    // Unknown open project status.
    OPEN_PROJECT_STATUS_UNKNOWN = 7;

    reserved 6;
  }

  // ID of the project that is being opened.
  string project_id = 1;
  // Project opening status.
  OpenProjectStatus status = 2;
}

message OpenProjectResponse {
  // URL of the project that is being opened.
  // Make GET request to [project_url] with sessionToken query parameter equals to [session_token]
  // or POST request to [project_url] with sessionToken body parameter equals to [session_token]
  // to fetch DataSphere web interface.
  string project_url = 1;

  // Session token of the project that is being opened.
  string session_token = 2;
}

message GetProjectRequest {
  // ID of the Project resource to return.
  // To get the project ID use a [ProjectService.List] request.
  string project_id = 1 [(required) = true, (length) = "<=50"];
}

message ListProjectsRequest {
  // ID of the community to list projects in.
  string community_id = 1 [(required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListProjectsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListProjectsResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // Name pattern to filter projects that are returned.
  // Only projects with names matching the pattern will be returned.
  string project_name_pattern = 4;

  // User ID to filter projects that are returned.
  // Only projects that are owned by specified user will be returned.
  string owned_by_id = 5;
}

message ListProjectsResponse {
  // List of Project resources.
  repeated Project projects = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListProjectsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListProjectsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message GetUnitBalanceRequest {
  // ID of the project to return the unit balance for.
  string project_id = 1 [(required) = true, (length) = "<=50"];
}

message GetUnitBalanceResponse {
  // The number of units available to the project.
  google.protobuf.Int64Value unit_balance = 1;
}

message SetUnitBalanceRequest {
  // ID of the project to set the unit balance for.
  string project_id = 1 [(required) = true, (length) = "<=50"];

  // The number of units available to the project.
  google.protobuf.Int64Value unit_balance = 2;
}

message SetUnitBalanceMetadata {
  // ID of the project which unit balance is set.
  string project_id = 1;
}

message ProjectExecutionRequest {
  // ID of the project to execute notebook/cell in.
  string project_id = 1 [(required) = true, (length) = "<=50"];
  oneof target {
    option (exactly_one) = true;

    // The path to the executable notebook in the project storage. The maximum string length is 200 characters.
    //
    // To get the path, right-click on the notebook in JupyterLab and select `Copy path`.
    string notebook_id = 2 [(length) = "<=200"];

    // ID of the cell to execute.
    // Deprecated
    string cell_id = 3 [(length) = "<=200", deprecated=true];
  }

  // Values of input variables. Input variables will be available in the project as environment variables.
  google.protobuf.Struct input_variables = 4;

  // Names of output variables.
  repeated string output_variable_names = 5;

  //Specification of the VM
  string spec = 6;

  //ID of the Spark Connector
  string spark_connector_id = 7 [(length) = "<=200"];
}

message ProjectExecutionMetadata {
  // ID of the project in which notebook is being executed.
  string project_id = 1;
  oneof target {
    option (exactly_one) = true;

    // ID of the notebook that is being executed
    string notebook_id = 2 [(length) = "<=200"];

    // ID of the cell that is being executed
    string cell_id = 3 [(length) = "<=200"];
  }
}

enum ExecutionStatus {
  EXECUTION_STATUS_UNSPECIFIED = 0;
  // Execution finished successfully.
  OK      = 1;
  // Execution ended with error.
  ERROR   = 2;
  // Execution was aborted.
  ABORTED = 3;
}

message ProjectExecutionResponse {
  // Execution final status.
  ExecutionStatus execution_status = 3;

  reserved 1, 2;
}

message SetProjectAccessBindingsMetadata {
  // ID of the project which access bindings are set.
  string project_id = 1;
}

message UpdateProjectAccessBindingsMetadata {
  // ID of the project which access bindings are updated.
  string project_id = 1;
}

message AddResourceToProjectRequest {
  string project_id = 1 [(required) = true, (length) = "<=50"];
  ResourceType resource_type = 2;
  string resource_id = 3 [(required) = true];
}

message RemoveResourceFromProjectRequest {
  string project_id = 1 [(required) = true, (length) = "<=50"];
  ResourceType resource_type = 2;
  string resource_id = 3 [(required) = true];
}

message GetProjectRestrictionsRequest {
  // ID of the project.
  string project_id = 1 [(required) = true];
}

message SetProjectRestrictionsRequest {
  // ID of the project.
  string project_id = 1 [(required) = true];
  // List of restrictions to set.
  repeated Restriction restrictions = 2;
}

message ResizeProjectDiskRequest {
  // ID of the project.
  string project_id = 1 [(required) = true, (length) = "<=50"];
  // Set new size project disk in gigabytes.
  int64 new_disk_size_gb = 2;
}

message ResizeProjectDiskMetadata {
  // ID of the project which resized project disk.
  string project_id = 1;
  // Old size project disk in gigabytes.
  int64 old_disk_size_gb = 2;
  // New size project disk in gigabytes.
  int64 new_disk_size_gb = 3;
}

message DiskInfo {
  message DetailedDiskInfo {
    // Used project disk for user data in gigabytes.
    double user_data_gb = 1;
    // Used project disk for packages in gigabytes.
    double packages_gb = 2;
    // Used project disk for system data in gigabytes.
    double system_data_gb = 3;
    // Free space project disk in gigabytes.
    double free_space_gb = 4;
  }
  // ID of the project.
  string project_id = 1;
  // Project disk size in gigabytes.
  double disk_size_gb = 2;
  // Used project disk in gigabytes.
  double disk_used_gb = 3;
  // Detailed information about the project disk.
  DetailedDiskInfo detailed_usage = 4;
}
