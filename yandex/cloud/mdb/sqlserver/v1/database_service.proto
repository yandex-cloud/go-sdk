syntax = "proto3";

package yandex.cloud.mdb.sqlserver.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/mdb/sqlserver/v1/database.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/sqlserver/v1;sqlserver";
option java_outer_classname = "PSDS";
option java_package = "yandex.cloud.api.mdb.sqlserver.v1";

// A set of methods for managing SQL Server databases.
service DatabaseService {
  // Returns the specified SQL Server database.
  //
  // To get the list of available SQL Server databases, make a [List] request.
  rpc Get(GetDatabaseRequest) returns (Database) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases/{database_name}"};
  }

  // Retrieves the list of SQL Server databases in the specified cluster.
  rpc List(ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases"};
  }

  // Creates a new SQL Server database in the specified cluster.
  rpc Create(CreateDatabaseRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateDatabaseMetadata"
      response: "Database"
    };
  }

  // Creates a new SQL Server database in the specified cluster from a backup.
  rpc Restore(RestoreDatabaseRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases:restore"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "RestoreDatabaseMetadata"
      response: "Database"
    };
  }

  //Imports a new SQL Server database from an external backup.
  rpc ImportBackup(ImportDatabaseBackupRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases:import"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "ImportDatabaseBackupMetadata"
      response: "Database"
    };
  }

  //Exports the last database backup to an external backup.
  rpc ExportBackup(ExportDatabaseBackupRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases/{database_name}:export"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "ExportDatabaseBackupMetadata"
      response: "Database"
    };
  }

  // Deletes the specified SQL Server database.
  rpc Delete(DeleteDatabaseRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/mdb/sqlserver/v1/clusters/{cluster_id}/databases/{database_name}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteDatabaseMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetDatabaseRequest {
  // ID of the SQL Server cluster the database belongs to.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the SQL Server database to return.
  //
  // To get the name of the database use a [DatabaseService.List] request.
  string database_name = 2 [
    (required) = true,
    (length) = "<=63",
    (pattern) = "[a-zA-Z0-9_-]*"
  ];
}

message ListDatabasesRequest {
  // ID of the SQL Server cluster to list databases in.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return.
  //
  // If the number of available results is larger than [page_size], the service returns a [ListDatabasesResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the [ListDatabasesResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListDatabasesResponse {
  // List of SQL Server databases.
  repeated Database databases = 1;

  // Token that allows you to get the next page of results for list requests.
  //
  // If the number of results is larger than [ListDatabasesRequest.page_size], use the [next_page_token] as the value for the [ListDatabasesRequest.page_token] parameter in the next list request.
  //
  // Each subsequent list request has its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateDatabaseRequest {
  // ID of the SQL Server cluster to create a database in.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Configuration of the database to create.
  DatabaseSpec database_spec = 2 [(required) = true];
}

message CreateDatabaseMetadata {
  // ID of the SQL Server cluster where the database is being created.
  string cluster_id = 1;

  // Name of the SQL Server database being created.
  string database_name = 2;
}

message DeleteDatabaseRequest {
  // ID of the SQL Server cluster to delete a database in.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the database to delete.
  //
  // To get the name of the database, use a [DatabaseService.List] request.
  string database_name = 2 [
    (required) = true,
    (length) = "<=63",
    (pattern) = "[a-zA-Z0-9_-]*"
  ];
}

message DeleteDatabaseMetadata {
  // ID of the SQL Server cluster where the database is being deleted.
  string cluster_id = 1;

  // Name of the SQL Server database being deleted.
  string database_name = 2;
}

message RestoreDatabaseRequest {
  reserved 5;
  // ID of the SQL Server cluster to restore a database in.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the SQL Server database that is being restored.
  string database_name = 2 [(required) = true];

  // Name of the database which backup is used to restore the database.
  string from_database = 3 [(required) = true];

  // ID of a backup to be used.
  string backup_id = 4 [(required) = true];

  // Timestamp which is used for Point-in-Time recovery.
  google.protobuf.Timestamp time = 6 [(required) = true];
}

message RestoreDatabaseMetadata {
  // ID of the SQL Server cluster where a database is being created.
  string cluster_id = 1 [(required) = true];

  // Name of an SQL Server database that is being created.
  string database_name = 2 [(required) = true];

  // Name of the database which backup is used to restore the database.
  string from_database = 3 [(required) = true];

  // ID of a backup to be used.
  string backup_id = 4 [(required) = true];
}

message ImportDatabaseBackupRequest {
  // ID of the SQL Server cluster to import a database in.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the SQL Server database that is being imported.
  string database_name = 2 [(required) = true];

  // Name of object storage bucket to import backups from.
  string s3_bucket = 3 [(required) = true];

  // Path in object storage bucket to import backups from.
  string s3_path = 4;

  // List of .bak files in bucket containing database backup.
  repeated string files = 5 [(required) = true];
}

message ImportDatabaseBackupMetadata {
  // ID of the SQL Server cluster where a database is being imported.
  string cluster_id = 1 [(required) = true];

  // Name of the SQL Server database that is being imported.
  string database_name = 2 [(required) = true];

  // Name of object storage bucket to import backups from.
  string s3_bucket = 3 [(required) = true];

  // Path in object storage bucket to import backups from.
  string s3_path = 4;
}

message ExportDatabaseBackupRequest {
  // ID of the SQL Server cluster to export a database from.
  //
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the SQL Server database that is being exported.
  string database_name = 2 [(required) = true];

  // Name of object storage bucket to export backups to.
  string s3_bucket = 3 [(required) = true];

  // Path in object storage bucket to export backups to.
  string s3_path = 4;

  // Prefix for .bak files to export.
  string prefix = 5;
}

message ExportDatabaseBackupMetadata {
  // ID of the SQL Server cluster where a database is being exported.
  string cluster_id = 1 [(required) = true];

  // Name of the SQL Server database that is being exported.
  string database_name = 2 [(required) = true];

  // Name of object storage bucket to export backups to.
  string s3_bucket = 3 [(required) = true];

  // Path in object storage bucket to export backups to.
  string s3_path = 4;
}
