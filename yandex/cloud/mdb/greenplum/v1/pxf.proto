syntax = "proto3";

package yandex.cloud.mdb.greenplum.v1;

import "google/protobuf/wrappers.proto";

import "yandex/cloud/validation.proto";


option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplum";
option java_package = "yandex.cloud.api.mdb.greenplum.v1";


message PXFConfig {
    // Timeout for connection to the Apache Tomcat® server when making read requests.
    //
    // Specify values in seconds.
    google.protobuf.Int64Value connection_timeout = 1 [(value) = "5-600"];

    // Timeout for connection to the Apache Tomcat® server when making write requests.
    //
    // Specify the values in seconds.
    google.protobuf.Int64Value upload_timeout = 2 [(value) = "5-600"];

    // Maximum number of the Apache Tomcat® threads.
    //
    // To prevent situations when requests get stuck or fail due to running out of memory or malfunctioning of the Java garbage collector, specify the number of the Apache Tomcat® threads. Learn more about adjusting the number of threads in the [VMware Greenplum® Platform Extension Framework](https://docs.vmware.com/en/VMware-Greenplum-Platform-Extension-Framework/6.9/greenplum-platform-extension-framework/cfg_mem.html) documentation.
    google.protobuf.Int64Value max_threads = 3 [(value) = "1-1024"];

    // Determines whether the timeout for core streaming threads is permitted.
    google.protobuf.BoolValue  pool_allow_core_thread_timeout = 4;

    // Number of core streaming threads per pool.
    google.protobuf.Int64Value pool_core_size = 5 [(value) = "1-1024"];

    // Maximum number of requests you can add to a pool queue for core streaming threads.
    //
    // If `0`, no pool queue is generated.
    google.protobuf.Int64Value pool_queue_capacity = 6 [(value) = ">=0"];

    // Maximum allowed number of core streaming threads.
    google.protobuf.Int64Value pool_max_size = 7 [(value) = "1-1024"];

    // Initial size, in megabytes, of the JVM heap for the PXF daemon.
    google.protobuf.Int64Value xmx = 8[(value) = ">=64"];

    // Maximum size, in megabytes, of the JVM heap for the PXF daemon.
    google.protobuf.Int64Value xms = 9[(value) = ">=64"];
}

message PXFConfigSet {
    PXFConfig effective_config = 1 [(required) = true];

    // User-defined settings.
    PXFConfig user_config = 2;

    // Default configuration.
    PXFConfig default_config = 3;
}

// Datasources API

message PXFDatasourceS3 {
    // Public key to access S3 storage.
    string                    access_key  = 1 [(length) = "<=200"];

    // Secret key to access S3 storage.
    string                    secret_key  = 2 [(length) = "<=200"];

    // Manages a fast upload of big files to S3 storage. In case of the `false` value, the PXF generates files on disk before sending them to the S3 storage. In case of the `true` value, the PXF generates files in RAM (the PXF writes to disc only if there is not enough RAM).
    //
    // The fast upload is enabled by default.
    google.protobuf.BoolValue fast_upload = 3;

    // S3 storage address. The default value is `storage.yandexcloud.net` used for Yandex Object Storage.
    string                    endpoint    = 4 [(length) = "<=200", (pattern) = "(((s3|https?)://)?([a-z0-9]([a-z0-9-]*[a-z0-9])?[.])+[a-z]{2,})?"];
}

message PXFDatasourceJDBC {
    // JDBC driver class in Java. The possible values are the following:
    //
    // * `com.simba.athena.jdbc.Driver`
    // * `com.clickhouse.jdbc.ClickHouseDriver`
    // * `com.ibm.as400.access.AS400JDBCDriver`
    // * `com.microsoft.sqlserver.jdbc.SQLServerDriver`
    // * `com.mysql.cj.jdbc.Driver`
    // * `org.postgresql.Driver`
    // * `oracle.jdbc.driver.OracleDriver`
    // * `net.snowflake.client.jdbc.SnowflakeDriver`
    // * `io.trino.jdbc.TrinoDriver`
    string driver = 1 [(length) = "<=50"];

    // URL that the JDBC driver uses to connect to the database. Examples:
    //
    // * `jdbc:mysql://mysqlhost:3306/testdb`: Local MySQL DB.
    // * `jdbc:postgresql://c-<cluster_id>.rw.mdb.yandexcloud.net:6432/db1`: Managed Service for PostgreSQL cluster. The address contains the special FQDN of the cluster's master.
    // * `jdbc:oracle:thin:@host.example:1521:orcl`: Oracle DB.
    string url    = 2 [(length) = "<=1000"];

    // Username of the DB owner.
    string user     = 3 [(length) = "<=200"];

    // Password of the DB owner.
    string password = 4 [(length) = "<=200"];

    // Number of rows to read in an external table, in a batch.
    //
    // The default value is `100`.
    google.protobuf.Int64Value statement_batch_size = 5 [(value) = "50-1000"];

    // Number of rows to fetch (buffer) when reading from an external table.
    //
    // The default value is `1000`.
    google.protobuf.Int64Value statement_fetch_size = 6 [(value) = "50-10000"];

    // Amount of time (in seconds) the JDBC driver waits for a statement to run. This timeout applies to statements created for both read and write operations.
    //
    // The default value is `60`.
    google.protobuf.Int64Value statement_query_timeout = 7 [(value) = "5-43200"];

    // Determines whether JDBC connection pooling is used in a server configuration. By default, it is used.
    google.protobuf.BoolValue pool_enabled = 8;

    // Maximum number of connections to the DB backend.
    //
    // The default value is `5`.
    google.protobuf.Int64Value pool_maximum_size = 9 [(value) = "1-200"];

    // Maximum time, in milliseconds, to wait for a connection from the pool.
    //
    // The default value is `30000`.
    google.protobuf.Int64Value pool_connection_timeout = 10 [(value) = "5000-600000"];

    // Maximum amount of time, in milliseconds, after which an inactive connection is considered idle.
    //
    // The default value is `30000`.
    google.protobuf.Int64Value pool_idle_timeout = 11 [(value) = "5000-600000"];

    // Minimum number of idle connections maintained in the connection pool.
    //
    // The default value is `0`.
    google.protobuf.Int64Value pool_minimum_idle = 12 [(value) = "0-200"];
}

message PXFDatasourceCore {
    // URI whose scheme and authority determine the file system implementation.
    string default_fs             = 1 [(length) = "<=200"];

    // Rules for mapping Kerberos principals to operating system user accounts.
    string security_auth_to_local = 2 [(length) = "<=1000"];
}

message PXFDatasourceKerberos {
    // Determines whether the Kerberos authentication server is used. By default, it is not used.
    google.protobuf.BoolValue enable = 1;

    // Host of the primary KDC server (Key Distribution Center).
    string primary                   = 2 [(length) = "<=128"];

    // Kerberos realm for a Greenplum® DB.
    string realm                     = 3 [(length) = "<=1000"];

    // KDC server hosts.
    repeated string kdc_servers      = 4 [(size) = "<=200", (length) = "1-200"];

    // Administration server host. Usually, this is the primary Kerberos server.
    string admin_server              = 5 [(length) = "<=128"];

    // Domain that is used for the host name extension. Applicable when Kerberos 4 service members become Kerberos 5 service members (for example, when rcmd.hostname is replaced with host/hostname.domain).
    string default_domain            = 6 [(length) = "<=128"];

    // Base64 encoded contents of the keytab file.
    string keytab_base64             = 7 [(pattern) = "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$", (length) = "<=65536"];
}

message PXFDatasourceHDFSDfsNamenode {
    string rpc_address         = 1 [(length) = "<=1000"];
    string service_rpc_address = 2 [(length) = "<=1000"];
    string http_address        = 3 [(length) = "<=1000"];
    string https_address       = 4 [(length) = "<=1000"];
}

message PXFDatasourceHDFSDfs {
    // Determines whether automatic failover is enabled for the high availability of the file system.
    //
    // The automatic failover is enabled by default.
    google.protobuf.BoolValue ha_automatic_failover_enabled = 1;

    // If `true`, access tokens are used as capabilities for accessing datanodes. If `false`, no access tokens are checked on accessing datanodes.
    //
    // The check of access tokens is enabled by default.
    google.protobuf.BoolValue block_access_token_enabled    = 2;

    // Determines whether the datanode hostname is used when connecting to datanodes.
    google.protobuf.BoolValue use_datanode_hostname         = 3;

    // List of HDFS service logical names.
    //
    // Specify them separated by commas. The names can be arbitrary.
    map<string, PXFDatasourceHDFSDfsNamenode> namenodes = 4 [(size) = "<=10000"];

    // Corresponds well-known HDFS client setting "dfs.nameservices" for this datasource
    string nameservices = 5;
}

message PXFDatasourceHDFSYarnHaRm {
    string resourcemanager_address                  = 1;
    string resourcemanager_scheduler_address        = 2;
    string resourcemanager_resource_tracker_address = 3;
    string resourcemanager_admin_address            = 4;
    string resourcemanager_webapp_address           = 5;
    string resourcemanager_webapp_https_address     = 6;
}

message PXFDatasourceHDFSYarn {
    // Determines whether high availability is enabled for YARN's ResourceManager services.
    //
    // The high availability is enabled by default.
    google.protobuf.BoolValue   resourcemanager_ha_enabled                = 1;

    // Determines whether another ResourceManager should automatically become active when the active ResourceManager has failed and does not respond.
    //
    // The switch of ResourceManagers is enabled by default if the high availability is enabled.
    google.protobuf.BoolValue   resourcemanager_ha_auto_failover_enabled  = 2;

    // Determines whether the embedded ActiveStandbyElector method should be used for the election of the active ResourceManager. If the current active ResourceManager has failed and does not respond, the ActiveStandbyElector method makes another ResourceManager active which then takes over.
    google.protobuf.BoolValue   resourcemanager_ha_auto_failover_embedded = 3;

    // Cluster ID. Specify it, so the ResourceManager service does not become active for a different cluster.
    string                      resourcemanager_cluster_id                = 4 [(length) = "<=1000"];

    // Highly available ResourceManager service.
    map<string, PXFDatasourceHDFSYarnHaRm> ha_rm = 5 [(size) = "<=10000"];
}

message PXFDatasourceHDFS {
    // Settings of the file system and security rules.
    PXFDatasourceCore     core     = 1;

    // Settings of the Kerberos network authentication protocol.
    PXFDatasourceKerberos kerberos = 2;

    // Enables authentication on behalf of the Greenplum® user when connecting to the remote file storage or DBMS.
    //
    // The authentication is disabled by default.
    google.protobuf.BoolValue   user_impersonation      = 3;

    // Login username for the remote file storage or DBMS if authentication on behalf of the Greenplum® user is enabled.
    string                      username                = 4 [(length) = "<=128"];

    // Maximum number of times that PXF retries a SASL connection request after a refused connection returns a `GSS initiate failed` error.
    //
    // The default value is `5`.
    google.protobuf.Int64Value  sasl_connection_retries = 5 [(value) = "1-50"];

    // ZooKeeper server hosts.
    //
    // Specify values in the `<address>:<port>` format.
    repeated string             zk_hosts                = 6 [(size) = "<=200", (length) = "1-200"];

    // Settings of the distributed file system.
    PXFDatasourceHDFSDfs  dfs  = 7;

    // Settings of the ResourceManager service that is responsible for tracking resources in a cluster and scheduling applications (e.g., MapReduce jobs).
    PXFDatasourceHDFSYarn yarn = 8;
}

message PXFDatasourceHive {
    // Settings of the file system and security rules.
    PXFDatasourceCore     core     = 1;

    // Settings of the Kerberos network authentication protocol.
    PXFDatasourceKerberos kerberos = 2;

    // Enables authentication on behalf of the Greenplum® user when connecting to the remote file storage or DBMS.
    //
    // The authentication is disabled by default.
    google.protobuf.BoolValue   user_impersonation      = 3;

    // Login username for the remote file storage or DBMS if authentication on behalf of the Greenplum® user is enabled.
    string                      username                = 4 [(length) = "<=128"];

    // Maximum number of times that PXF retries a SASL connection request after a refused connection returns a `GSS initiate failed` error.
    //
    // The default value is `5`.
    google.protobuf.Int64Value  sasl_connection_retries = 5 [(value) = "1-50"];

    // ZooKeeper server hosts.
    //
    // Specify values in the `<address>:<port>` format.
    repeated string             zk_hosts                = 6 [(size) = "<=200", (length) = "1-200"];

    // Specifies if predicate pushdown is enabled for queries on external tables.
    //
    // The predicate pushdown is enabled by default.
    google.protobuf.BoolValue   ppd                          = 7;

    // List of URIs separated by commas. To request metadata, the remote DBMS connects to Metastore by one of these URIs.
    repeated string             metastore_uris               = 8 [(size) = "<=200", (length) = "1-200"];

    // Service principal for the Metastore Thrift server.
    string                      metastore_kerberos_principal = 9 [(length) = "<=1000"];

    // Kerberos server principal.
    string                      auth_kerberos_principal      = 10 [(length) = "<=1000"];
}

message PXFDatasource {
    // Data source name.
    string name = 1 [(required) = true, (length) = "3-200", (pattern) = "^[^\\|/*?.,;\"'<>]+$"];
    oneof settings {
        // Settings of an external S3 data source.
        PXFDatasourceS3   s3   = 2;

        // Settings of an external JDBC data source.
        PXFDatasourceJDBC jdbc = 3;

        // Settings of an external HDFS data source.
        PXFDatasourceHDFS hdfs = 4;

        // Settings of an external Hive data source.
        PXFDatasourceHive hive = 5;
    }
}
