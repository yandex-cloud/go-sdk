syntax = "proto3";

package yandex.cloud.ai.assistants.v1.users;

import "yandex/cloud/ai/common/common.proto";
import "yandex/cloud/ai/assistants/v1/users/user.proto";
import "yandex/cloud/validation.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1/users;users";
option java_package = "yandex.cloud.api.ai.assistants.v1.users";

// UserService provides operations for managing users.
service UserService {
  // Create a new user.
  rpc Create(CreateUserRequest) returns (User) {
    option (google.api.http) = {post: "/users/v1/users" body: "*"};
  }

  // Retrieve details of a specific user by its ID.
  rpc Get(GetUserRequest) returns (User) {
    option (google.api.http) = {get: "/users/v1/users/{user_id}"};
  }

  // Update an existing user.
  rpc Update(UpdateUserRequest) returns (User) {
    option (google.api.http) = {patch: "/users/v1/users/{user_id}" body: "*"};
  }

  // Delete a user by its ID.
  rpc Delete(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {delete: "/users/v1/users/{user_id}"};
  }

  // List users in a specific folder.
  rpc List(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/users/v1/users"};
  }
}

// Request message for creating a new user.
message CreateUserRequest {
  string folder_id = 1 [(required) = true];

  // Name of the user.
  string name = 2;

  // Description of the user.
  string description = 3;

  string source = 4;

  // Expiration configuration for the user.
  yandex.cloud.ai.common.ExpirationConfig expiration_config = 5;

  // Set of key-value pairs to label the user.
  map<string, string> labels = 6;
}

// Request message for retrieving a user by ID.
message GetUserRequest {
  // ID of the user to retrieve.
  string user_id = 1 [(required) = true];
}

// Request message for updating an existing user.
message UpdateUserRequest {
  // ID of the user to update.
  string user_id = 1 [(required) = true];

  // A field mask specifying which fields to update.
  google.protobuf.FieldMask update_mask = 2 [(required) = true];

  // New name for the user.
  string name = 3;

  // New description for the user.
  string description = 4;

  // New expiration configuration for the user.
  yandex.cloud.ai.common.ExpirationConfig expiration_config = 5;

  // New set of labels for the user.
  map<string, string> labels = 6;
}

// Request message for deleting a user by ID.
message DeleteUserRequest {
  // ID of the user to delete.
  string user_id = 1 [(required) = true];
}

// Response message for the delete operation.
message DeleteUserResponse {
}

// Request message for listing users in a specific folder.
message ListUsersRequest {
  // Folder ID from which to list users.
  string folder_id = 1 [(required) = true];

  // Maximum number of users to return per page.
  int64 page_size = 2;

  // Token to retrieve the next page of results.
  string page_token = 3;
}

// Response message for the list operation.
message ListUsersResponse {
  // List of users in the specified folder.
  repeated User users = 1;

  // Token to retrieve the next page of results.
  string next_page_token = 2;
}
