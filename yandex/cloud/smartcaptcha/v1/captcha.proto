syntax = "proto3";

package yandex.cloud.smartcaptcha.v1;

import "google/protobuf/timestamp.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/smartcaptcha/v1;smartcaptcha";
option java_package = "yandex.cloud.api.smartcaptcha.v1";

// Captcha's complexity.
enum CaptchaComplexity {
  CAPTCHA_COMPLEXITY_UNSPECIFIED = 0;

  // High chance to pass pre-check and easy advanced challenge.
  EASY = 1;

  // Medium chance to pass pre-check and normal advanced challenge.
  MEDIUM = 2;

  // Little chance to pass pre-check and hard advanced challenge.
  HARD = 3;

  // Impossible to pass pre-check and hard advanced challenge.
  FORCE_HARD = 4;
}

// Captcha's basic check type, see [Task types / Main task](/docs/smartcaptcha/concepts/tasks#main-task).
enum CaptchaPreCheckType {
  CAPTCHA_PRE_CHECK_TYPE_UNSPECIFIED = 0;

  // User must click the "I am not a robot" button.
  CHECKBOX = 1;

  // User must move the slider from left to right.
  SLIDER = 2;
}

// Additional task, see [Task types / Additional task](/docs/smartcaptcha/concepts/tasks#additional-task).
enum CaptchaChallengeType {
  CAPTCHA_CHALLENGE_TYPE_UNSPECIFIED = 0;

  // Text recognition: The user has to type a distorted text from the picture into a special field.
  IMAGE_TEXT = 1;

  // Silhouettes: The user has to mark several icons from the picture in a particular order.
  SILHOUETTES = 2;

  // Kaleidoscope: The user has to build a picture from individual parts by shuffling them using a slider.
  KALEIDOSCOPE = 3;
}

// A Captcha resource.
message Captcha {
  // ID of the captcha.
  string id = 21;

  // ID of the folder that the captcha belongs to.
  string folder_id = 2;

  // ID of the cloud that the captcha belongs to.
  string cloud_id = 12;

  // Client key of the captcha, see [CAPTCHA keys](/docs/smartcaptcha/concepts/keys).
  string client_key = 3;

  // Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp created_at = 5;

  // Name of the captcha. The name is unique within the folder. 3-63 characters long.
  string name = 7;

  // List of allowed host names, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
  repeated string allowed_sites = 8;

  // Complexity of the captcha.
  CaptchaComplexity complexity = 9;

  // JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
  string style_json = 10;

  // Determines that the captcha is currently in restricted mode, see [SmartCaptcha restricted mode](/docs/smartcaptcha/concepts/restricted-mode).
  bool suspend = 13;

  // Turn off host name check, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
  bool turn_off_hostname_check = 14;

  // Basic check type of the captcha.
  CaptchaPreCheckType pre_check_type = 16;

  // Additional task type of the captcha.
  CaptchaChallengeType challenge_type = 17;

  // List of security rules.
  repeated SecurityRule security_rules = 19;

  reserved 1, 4, 6, 11, 15, 18, 20;

  // Determines whether captcha is protected from being deleted.
  bool deletion_protection = 22;

  // List of variants to use in security_rules
  repeated OverrideVariant override_variants = 23 [(size) = "<=32"];
}

// OverrideVariant object. Contains the settings to override.
message OverrideVariant {
  // Unique identifier of the variant.
  string uuid = 1 [(pattern) = "[a-zA-Z0-9][a-zA-Z0-9-_.]*", (length) = "<=64"];
  
  // Optional description of the rule. 0-512 characters long.
  string description = 2 [(length) = "<=512"];

  // Complexity of the captcha.
  CaptchaComplexity complexity = 3;

  // Basic check type of the captcha.
  CaptchaPreCheckType pre_check_type = 4;

  // Additional task type of the captcha.
  CaptchaChallengeType challenge_type = 5;
}

// CaptchaSecretKey object. Contains captcha data that need to keep in secret.
message CaptchaSecretKey {
  // Server key of the captcha, see [CAPTCHA keys](/docs/smartcaptcha/concepts/keys).
  string server_key = 1;
}

// SecurityRule object. Defines the condition and action: when and which variant to show.
message SecurityRule {
  // Name of the rule. The name is unique within the captcha. 1-50 characters long.
  string name = 1 [(required) = true, (length) = "1-50", (pattern) = "[a-zA-Z0-9][a-zA-Z0-9-_.]*"];

  // Priority of the rule. Lower value means higher priority.
  int64 priority = 2 [(value) = "1-999999"];

  // Optional description of the rule. 0-512 characters long.
  string description = 3 [(length) = "<=512"];

  // The condition for matching the rule.
  Condition condition = 4;

  reserved 5;

  // Variant UUID to show in case of match the rule. Keep empty to use defaults.
  string override_variant_uuid = 6;
}

// Condition object. AND semantics implied.
message Condition {
  // Host where captcha placed.
  HostMatcher host = 1;

  // URI where captcha placed.
  UriMatcher uri = 2;

  // Captcha request headers.
  repeated HeaderMatcher headers = 3 [(size) = "<=20"];

  // The IP address of the requester.
  IpMatcher source_ip = 4;

  // StringMatcher object.
  message StringMatcher {
    oneof match {
      string exact_match = 1 [(length) = "0-255"];
      string exact_not_match = 2 [(length) = "0-255"];
      string prefix_match = 3 [(length) = "0-255"];
      string prefix_not_match = 4 [(length) = "0-255"];
      string pire_regex_match = 5 [(length) = "0-255"];
      string pire_regex_not_match = 6 [(length) = "0-255"];
    }
  }

  // HostMatcher object.
  message HostMatcher {
    // List of hosts. OR semantics implied.
    repeated StringMatcher hosts = 1 [(size) = "<=20"];
  }

  // UriMatcher object. AND semantics implied.
  message UriMatcher {
    // Path of the URI [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986#section-3.3).
    StringMatcher path = 1;

    // List of query matchers. AND semantics implied.
    repeated QueryMatcher queries = 2 [(size) = "<=20"];
  }

  // QueryMatcher object.
  message QueryMatcher {
    // Key of the query parameter.
    string key = 1 [(required) = true, (length) = "1-255"];

    // Value of the query parameter.
    StringMatcher value = 2 [(required) = true];
  }

  // HeaderMatcher object.
  message HeaderMatcher {
    // Name of header (case insensitive).
    string name = 1 [(required) = true, (length) = "1-255"];

    // Value of the header.
    StringMatcher value = 2 [(required) = true];
  }

  // IpMatcher object. AND semantics implied.
  message IpMatcher {
    IpRangesMatcher ip_ranges_match = 1;
    IpRangesMatcher ip_ranges_not_match = 2;
    GeoIpMatcher geo_ip_match = 3;
    GeoIpMatcher geo_ip_not_match = 4;
  }

  // IpRangesMatcher object.
  message IpRangesMatcher {
    // List of IP ranges. OR semantics implied.
    repeated string ip_ranges = 1 [(size) = "<=10000"];
  }

  // GeoIpMatcher object.
  message GeoIpMatcher {
    // ISO 3166-1 alpha 2. OR semantics implied.
    repeated string locations = 1 [(size) = ">=1", (unique) = true, (length) = "2"];
  }
}
