syntax = "proto3";

package yandex.cloud.containerregistry.v1;

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/containerregistry/v1/image.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

import "google/api/annotations.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1;containerregistry";
option java_package = "yandex.cloud.api.containerregistry.v1";

// A set of methods for managing Image resources.
service ImageService {
  // Retrieves the list of Image resources in the specified registry or repository.
  rpc List (ListImagesRequest) returns (ListImagesResponse) {
    option (google.api.http) = { get: "/container-registry/v1/images" };
  };

  // Returns the specified Image resource.
  //
  // To get the list of available Image resources, make a [List] request.
  rpc Get (GetImageRequest) returns (Image) {
    option (google.api.http) = { get: "/container-registry/v1/images/{image_id}" };
  };

  // Deletes the specified Docker image.
  rpc Delete (DeleteImageRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/container-registry/v1/images/{image_id}" };
    option (yandex.cloud.api.operation) = {
          metadata: "DeleteImageMetadata"
          response: "google.protobuf.Empty"
        };
  }
}


message ListImagesRequest {
  // ID of the registry to list Docker images in.
  //
  // [registry_id] is ignored if a [ListImagesRequest.repository_name] is specified in the request.
  //
  // To get the registry ID use a [RegistryService.List] request.
  string registry_id = 1 [(length) = "<=50"];

  // Name of the repository to list Docker images in.
  //
  // To get the repository name use a [RepositoryService.List] request.
  string repository_name = 2 [(pattern) = "|[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*"];

  // ID of the folder to list Docker images in.
  //
  // [folder_id] is ignored if a [ListImagesRequest.repository_name] or a [ListImagesRequest.registry_id] are specified in the request.
  //
  // To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 7[(length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListImagesResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 3 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListImagesResponse.next_page_token] returned by a previous list request.
  string page_token = 4 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Image.name] field.
  // 2. An `=` operator.
  // 3. The value in double quotes (`"`). Must be a maximum of 256 characters long and match the regular expression `[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))`.
  string filter = 5 [(length) = "<=1000"];
  string order_by = 6 [(length) = "<=100"];
}

message ListImagesResponse {
  // List of Image resources.
  repeated Image images = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListImagesRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListImagesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message GetImageRequest {
  // ID of the Docker image resource to return.
  //
  // To get the Docker image ID use a [ImageService.List] request.
  string image_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteImageRequest {
  // ID of the Docker image to delete.
  //
  // To get Docker image ID use a [ImageService.List] request.
  string image_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteImageMetadata {
  // ID of the Docker image that is being deleted.
  string image_id = 1;
}
