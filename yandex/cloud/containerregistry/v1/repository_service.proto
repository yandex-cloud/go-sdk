syntax = "proto3";

package yandex.cloud.containerregistry.v1;

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/containerregistry/v1/repository.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

import "google/api/annotations.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1;containerregistry";
option java_package = "yandex.cloud.api.containerregistry.v1";

// A set of methods for managing Repository resources.
service RepositoryService {
  // Returns the specified Repository resource.
  //
  // To get the list of available Repository resources, make a [List] request.
  rpc Get (GetRepositoryRequest) returns (Repository) {
    option (google.api.http) = { get: "/container-registry/v1/repositories/{repository_id}" };
  };

  // Returns the specified Repository resource.
  //
  // To get the list of available Repository resources, make a [List] request.
  rpc GetByName (GetRepositoryByNameRequest) returns (Repository) {
    option (google.api.http) = { get: "/container-registry/v1/repositories/{repository_name}:byName" };
  }

  // Retrieves the list of Repository resources in the specified registry.
  rpc List (ListRepositoriesRequest) returns (ListRepositoriesResponse) {
    option (google.api.http) = { get: "/container-registry/v1/repositories" };
  };

  //access

  // Lists access bindings for the specified repository.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = { get: "/container-registry/v1/repositories/{resource_id}:listAccessBindings" };
  }

  // Upserts a repository in the specified registry.
  rpc Upsert (UpsertRepositoryRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/container-registry/v1/repositories" body: "*" };
    option (yandex.cloud.api.operation) = {
          metadata: "UpsertRepositoryMetadata"
          response: "Repository"
        };
  };

  // Deletes the specified repository.
  rpc Delete (DeleteRepositoryRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/container-registry/v1/repositories/{repository_id}" };
    option (yandex.cloud.api.operation) = {
          metadata: "DeleteRepositoryMetadata"
          response: "google.protobuf.Empty"
        };
  }

  // Sets access bindings for the specified repository.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/container-registry/v1/repositories/{resource_id}:setAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates access bindings for the specified repository.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/container-registry/v1/repositories/{resource_id}:updateAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

}

message GetRepositoryRequest {
  // ID of the Repository resource to return.
  //
  // To get the repository ID use a [RepositoryService.List] request.
  string repository_id = 1 [(required) = true, (length) = "<=50"];
}

message GetRepositoryByNameRequest {
  // Name of the Repository resource to return.
  //
  // To get the repository name use a [RepositoryService.List] request.
  string repository_name = 1 [(required) = true, (pattern) = "[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*"];
}

message ListRepositoriesRequest {
  // ID of the registry to list repositories in.
  //
  // To get the registry ID use a [RegistryService.List] request.
  string registry_id = 1 [(length) = "<=50"];

  // ID of the folder to list registries in.
  //
  // [folder_id] is ignored if a [ListImagesRequest.registry_id] is specified in the request.
  //
  // To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 6 [(length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListRepositoriesResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListRepositoriesResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Repository.name] field.
  // 2. An `=` operator.
  // 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
  string filter = 4 [(length) = "<=1000"];
  string order_by = 5 [(length) = "<=100"];
}

message ListRepositoriesResponse {
  // List of Repository resources.
  repeated Repository repositories = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListRepositoriesRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListRepositoriesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message UpsertRepositoryRequest {
  // Name of the repository.
  //
  // The name of the repository should match the name of the images that will be pushed in the repository.
  string name = 1 [(required) = true, (pattern) = "[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*"];
}

message UpsertRepositoryMetadata {
  // ID of the repository that is being upserted.
  string repository_id = 1;
}

message DeleteRepositoryRequest {
  // ID of the repository to delete.
  string repository_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteRepositoryMetadata {
  // ID of the repository that is being deleted.
  string repository_id = 1;
}
