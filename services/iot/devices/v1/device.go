// Code generated by sdkgen-v2. DO NOT EDIT.
package devicessdk

import (
	"context"

	devices "github.com/yandex-cloud/go-genproto/yandex/cloud/iot/devices/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DeviceClient provides methods for managing Device resources of Yandex.Cloud Devices.
type DeviceClient interface {
	Get(context.Context, *devices.GetDeviceRequest, ...grpc.CallOption) (*devices.Device, error)
	GetByName(context.Context, *devices.GetByNameDeviceRequest, ...grpc.CallOption) (*devices.Device, error)
	List(context.Context, *devices.ListDevicesRequest, ...grpc.CallOption) (*devices.ListDevicesResponse, error)
	Create(context.Context, *devices.CreateDeviceRequest, ...grpc.CallOption) (*DeviceCreateOperation, error)
	Update(context.Context, *devices.UpdateDeviceRequest, ...grpc.CallOption) (*DeviceUpdateOperation, error)
	Delete(context.Context, *devices.DeleteDeviceRequest, ...grpc.CallOption) (*DeviceDeleteOperation, error)
	ListCertificates(context.Context, *devices.ListDeviceCertificatesRequest, ...grpc.CallOption) (*devices.ListDeviceCertificatesResponse, error)
	AddCertificate(context.Context, *devices.AddDeviceCertificateRequest, ...grpc.CallOption) (*DeviceAddCertificateOperation, error)
	DeleteCertificate(context.Context, *devices.DeleteDeviceCertificateRequest, ...grpc.CallOption) (*DeviceDeleteCertificateOperation, error)
	ListPasswords(context.Context, *devices.ListDevicePasswordsRequest, ...grpc.CallOption) (*devices.ListDevicePasswordsResponse, error)
	AddPassword(context.Context, *devices.AddDevicePasswordRequest, ...grpc.CallOption) (*DeviceAddPasswordOperation, error)
	DeletePassword(context.Context, *devices.DeleteDevicePasswordRequest, ...grpc.CallOption) (*DeviceDeletePasswordOperation, error)
	ListOperations(context.Context, *devices.ListDeviceOperationsRequest, ...grpc.CallOption) (*devices.ListDeviceOperationsResponse, error)
}

var _ DeviceClient = deviceClient{}

type deviceClient struct {
	connector transport.Connector
}

// NewDeviceClient returns DeviceClient implementation.
func NewDeviceClient(connector transport.Connector) DeviceClient {
	return deviceClient{connector}
}

// Get is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) Get(ctx context.Context, in *devices.GetDeviceRequest, opts ...grpc.CallOption) (*devices.Device, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceGet, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).Get(ctx, in, opts...)
}

// GetByName is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) GetByName(ctx context.Context, in *devices.GetByNameDeviceRequest, opts ...grpc.CallOption) (*devices.Device, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceGetByName, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).GetByName(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) List(ctx context.Context, in *devices.ListDevicesRequest, opts ...grpc.CallOption) (*devices.ListDevicesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceList, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).List(ctx, in, opts...)
}

// DeviceCreateOperation is used to monitor the state of Create operations.
type DeviceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceCreateOperation) Metadata() *devices.CreateDeviceMetadata {
	return o.Operation.Metadata().(*devices.CreateDeviceMetadata)
}

// Response retrieves the operation response.
func (o *DeviceCreateOperation) Response() *devices.Device {
	return o.Operation.Response().(*devices.Device)
}

// Wait polls the operation until it's done.
func (o *DeviceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Device, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Device)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Device, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Device)
	return response, err
}

// Create is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) Create(ctx context.Context, in *devices.CreateDeviceRequest, opts ...grpc.CallOption) (*DeviceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.CreateDeviceMetadata).GetDeviceId()
		},
		MetadataType: (*devices.CreateDeviceMetadata)(nil),
		ResponseType: (*devices.Device)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceCreateOperation{*op}, nil
}

// DeviceUpdateOperation is used to monitor the state of Update operations.
type DeviceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceUpdateOperation) Metadata() *devices.UpdateDeviceMetadata {
	return o.Operation.Metadata().(*devices.UpdateDeviceMetadata)
}

// Response retrieves the operation response.
func (o *DeviceUpdateOperation) Response() *devices.Device {
	return o.Operation.Response().(*devices.Device)
}

// Wait polls the operation until it's done.
func (o *DeviceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Device, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Device)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Device, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Device)
	return response, err
}

// Update is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) Update(ctx context.Context, in *devices.UpdateDeviceRequest, opts ...grpc.CallOption) (*DeviceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.UpdateDeviceMetadata).GetDeviceId()
		},
		MetadataType: (*devices.UpdateDeviceMetadata)(nil),
		ResponseType: (*devices.Device)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceUpdateOperation{*op}, nil
}

// DeviceDeleteOperation is used to monitor the state of Delete operations.
type DeviceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceDeleteOperation) Metadata() *devices.DeleteDeviceMetadata {
	return o.Operation.Metadata().(*devices.DeleteDeviceMetadata)
}

// Response retrieves the operation response.
func (o *DeviceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DeviceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) Delete(ctx context.Context, in *devices.DeleteDeviceRequest, opts ...grpc.CallOption) (*DeviceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteDeviceMetadata).GetDeviceId()
		},
		MetadataType: (*devices.DeleteDeviceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceDeleteOperation{*op}, nil
}

// ListCertificates is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) ListCertificates(ctx context.Context, in *devices.ListDeviceCertificatesRequest, opts ...grpc.CallOption) (*devices.ListDeviceCertificatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceListCertificates, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).ListCertificates(ctx, in, opts...)
}

// DeviceAddCertificateOperation is used to monitor the state of AddCertificate operations.
type DeviceAddCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceAddCertificateOperation) Metadata() *devices.AddDeviceCertificateMetadata {
	return o.Operation.Metadata().(*devices.AddDeviceCertificateMetadata)
}

// Response retrieves the operation response.
func (o *DeviceAddCertificateOperation) Response() *devices.DeviceCertificate {
	return o.Operation.Response().(*devices.DeviceCertificate)
}

// Wait polls the operation until it's done.
func (o *DeviceAddCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.DeviceCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.DeviceCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceAddCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.DeviceCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.DeviceCertificate)
	return response, err
}

// AddCertificate is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) AddCertificate(ctx context.Context, in *devices.AddDeviceCertificateRequest, opts ...grpc.CallOption) (*DeviceAddCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceAddCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).AddCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.AddDeviceCertificateMetadata).GetDeviceId()
		},
		MetadataType: (*devices.AddDeviceCertificateMetadata)(nil),
		ResponseType: (*devices.DeviceCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceAddCertificateOperation{*op}, nil
}

// DeviceDeleteCertificateOperation is used to monitor the state of DeleteCertificate operations.
type DeviceDeleteCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceDeleteCertificateOperation) Metadata() *devices.DeleteDeviceCertificateMetadata {
	return o.Operation.Metadata().(*devices.DeleteDeviceCertificateMetadata)
}

// Response retrieves the operation response.
func (o *DeviceDeleteCertificateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DeviceDeleteCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceDeleteCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteCertificate is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) DeleteCertificate(ctx context.Context, in *devices.DeleteDeviceCertificateRequest, opts ...grpc.CallOption) (*DeviceDeleteCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceDeleteCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).DeleteCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteDeviceCertificateMetadata).GetDeviceId()
		},
		MetadataType: (*devices.DeleteDeviceCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceDeleteCertificateOperation{*op}, nil
}

// ListPasswords is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) ListPasswords(ctx context.Context, in *devices.ListDevicePasswordsRequest, opts ...grpc.CallOption) (*devices.ListDevicePasswordsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceListPasswords, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).ListPasswords(ctx, in, opts...)
}

// DeviceAddPasswordOperation is used to monitor the state of AddPassword operations.
type DeviceAddPasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceAddPasswordOperation) Metadata() *devices.AddDevicePasswordMetadata {
	return o.Operation.Metadata().(*devices.AddDevicePasswordMetadata)
}

// Response retrieves the operation response.
func (o *DeviceAddPasswordOperation) Response() *devices.DevicePassword {
	return o.Operation.Response().(*devices.DevicePassword)
}

// Wait polls the operation until it's done.
func (o *DeviceAddPasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.DevicePassword, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.DevicePassword)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceAddPasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.DevicePassword, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.DevicePassword)
	return response, err
}

// AddPassword is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) AddPassword(ctx context.Context, in *devices.AddDevicePasswordRequest, opts ...grpc.CallOption) (*DeviceAddPasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceAddPassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).AddPassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.AddDevicePasswordMetadata).GetDeviceId()
		},
		MetadataType: (*devices.AddDevicePasswordMetadata)(nil),
		ResponseType: (*devices.DevicePassword)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceAddPasswordOperation{*op}, nil
}

// DeviceDeletePasswordOperation is used to monitor the state of DeletePassword operations.
type DeviceDeletePasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DeviceDeletePasswordOperation) Metadata() *devices.DeleteDevicePasswordMetadata {
	return o.Operation.Metadata().(*devices.DeleteDevicePasswordMetadata)
}

// Response retrieves the operation response.
func (o *DeviceDeletePasswordOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DeviceDeletePasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DeviceDeletePasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeletePassword is an operation of Yandex.Cloud Devices Device service.
// It returns an object which should be used to monitor the operation state.
func (c deviceClient) DeletePassword(ctx context.Context, in *devices.DeleteDevicePasswordRequest, opts ...grpc.CallOption) (*DeviceDeletePasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceDeletePassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewDeviceServiceClient(connection).DeletePassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteDevicePasswordMetadata).GetDeviceId()
		},
		MetadataType: (*devices.DeleteDevicePasswordMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DeviceDeletePasswordOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Devices Device service.
func (c deviceClient) ListOperations(ctx context.Context, in *devices.ListDeviceOperationsRequest, opts ...grpc.CallOption) (*devices.ListDeviceOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewDeviceServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c deviceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DeviceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DeviceGet               = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.Get")
	DeviceGetByName         = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.GetByName")
	DeviceList              = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.List")
	DeviceCreate            = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.Create")
	DeviceUpdate            = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.Update")
	DeviceDelete            = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.Delete")
	DeviceListCertificates  = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.ListCertificates")
	DeviceAddCertificate    = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.AddCertificate")
	DeviceDeleteCertificate = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.DeleteCertificate")
	DeviceListPasswords     = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.ListPasswords")
	DeviceAddPassword       = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.AddPassword")
	DeviceDeletePassword    = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.DeletePassword")
	DeviceListOperations    = protoreflect.FullName("yandex.cloud.iot.devices.v1.DeviceService.ListOperations")
	DeviceOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
