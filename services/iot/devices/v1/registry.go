// Code generated by sdkgen-v2. DO NOT EDIT.
package devicessdk

import (
	"context"

	devices "github.com/yandex-cloud/go-genproto/yandex/cloud/iot/devices/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RegistryClient provides methods for managing Registry resources of Yandex.Cloud Devices.
type RegistryClient interface {
	Get(context.Context, *devices.GetRegistryRequest, ...grpc.CallOption) (*devices.Registry, error)
	GetByName(context.Context, *devices.GetByNameRegistryRequest, ...grpc.CallOption) (*devices.Registry, error)
	List(context.Context, *devices.ListRegistriesRequest, ...grpc.CallOption) (*devices.ListRegistriesResponse, error)
	Create(context.Context, *devices.CreateRegistryRequest, ...grpc.CallOption) (*RegistryCreateOperation, error)
	Update(context.Context, *devices.UpdateRegistryRequest, ...grpc.CallOption) (*RegistryUpdateOperation, error)
	Delete(context.Context, *devices.DeleteRegistryRequest, ...grpc.CallOption) (*RegistryDeleteOperation, error)
	ListCertificates(context.Context, *devices.ListRegistryCertificatesRequest, ...grpc.CallOption) (*devices.ListRegistryCertificatesResponse, error)
	AddCertificate(context.Context, *devices.AddRegistryCertificateRequest, ...grpc.CallOption) (*RegistryAddCertificateOperation, error)
	DeleteCertificate(context.Context, *devices.DeleteRegistryCertificateRequest, ...grpc.CallOption) (*RegistryDeleteCertificateOperation, error)
	ListPasswords(context.Context, *devices.ListRegistryPasswordsRequest, ...grpc.CallOption) (*devices.ListRegistryPasswordsResponse, error)
	AddPassword(context.Context, *devices.AddRegistryPasswordRequest, ...grpc.CallOption) (*RegistryAddPasswordOperation, error)
	DeletePassword(context.Context, *devices.DeleteRegistryPasswordRequest, ...grpc.CallOption) (*RegistryDeletePasswordOperation, error)
	ListDeviceTopicAliases(context.Context, *devices.ListDeviceTopicAliasesRequest, ...grpc.CallOption) (*devices.ListDeviceTopicAliasesResponse, error)
	ListDataStreamExports(context.Context, *devices.ListDataStreamExportsRequest, ...grpc.CallOption) (*devices.ListDataStreamExportsResponse, error)
	AddDataStreamExport(context.Context, *devices.AddDataStreamExportRequest, ...grpc.CallOption) (*RegistryAddDataStreamExportOperation, error)
	DeleteDataStreamExport(context.Context, *devices.DeleteDataStreamExportRequest, ...grpc.CallOption) (*RegistryDeleteDataStreamExportOperation, error)
	ListOperations(context.Context, *devices.ListRegistryOperationsRequest, ...grpc.CallOption) (*devices.ListRegistryOperationsResponse, error)
	Disable(context.Context, *devices.DisableRegistryRequest, ...grpc.CallOption) (*RegistryDisableOperation, error)
	Enable(context.Context, *devices.EnableRegistryRequest, ...grpc.CallOption) (*RegistryEnableOperation, error)
}

var _ RegistryClient = registryClient{}

type registryClient struct {
	connector transport.Connector
}

// NewRegistryClient returns RegistryClient implementation.
func NewRegistryClient(connector transport.Connector) RegistryClient {
	return registryClient{connector}
}

// Get is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) Get(ctx context.Context, in *devices.GetRegistryRequest, opts ...grpc.CallOption) (*devices.Registry, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryGet, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).Get(ctx, in, opts...)
}

// GetByName is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) GetByName(ctx context.Context, in *devices.GetByNameRegistryRequest, opts ...grpc.CallOption) (*devices.Registry, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryGetByName, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).GetByName(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) List(ctx context.Context, in *devices.ListRegistriesRequest, opts ...grpc.CallOption) (*devices.ListRegistriesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryList, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).List(ctx, in, opts...)
}

// RegistryCreateOperation is used to monitor the state of Create operations.
type RegistryCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryCreateOperation) Metadata() *devices.CreateRegistryMetadata {
	return o.Operation.Metadata().(*devices.CreateRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryCreateOperation) Response() *devices.Registry {
	return o.Operation.Response().(*devices.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// Create is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Create(ctx context.Context, in *devices.CreateRegistryRequest, opts ...grpc.CallOption) (*RegistryCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.CreateRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*devices.CreateRegistryMetadata)(nil),
		ResponseType: (*devices.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryCreateOperation{*op}, nil
}

// RegistryUpdateOperation is used to monitor the state of Update operations.
type RegistryUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryUpdateOperation) Metadata() *devices.UpdateRegistryMetadata {
	return o.Operation.Metadata().(*devices.UpdateRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryUpdateOperation) Response() *devices.Registry {
	return o.Operation.Response().(*devices.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// Update is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Update(ctx context.Context, in *devices.UpdateRegistryRequest, opts ...grpc.CallOption) (*RegistryUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.UpdateRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*devices.UpdateRegistryMetadata)(nil),
		ResponseType: (*devices.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryUpdateOperation{*op}, nil
}

// RegistryDeleteOperation is used to monitor the state of Delete operations.
type RegistryDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDeleteOperation) Metadata() *devices.DeleteRegistryMetadata {
	return o.Operation.Metadata().(*devices.DeleteRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Delete(ctx context.Context, in *devices.DeleteRegistryRequest, opts ...grpc.CallOption) (*RegistryDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*devices.DeleteRegistryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDeleteOperation{*op}, nil
}

// ListCertificates is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) ListCertificates(ctx context.Context, in *devices.ListRegistryCertificatesRequest, opts ...grpc.CallOption) (*devices.ListRegistryCertificatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListCertificates, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).ListCertificates(ctx, in, opts...)
}

// RegistryAddCertificateOperation is used to monitor the state of AddCertificate operations.
type RegistryAddCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryAddCertificateOperation) Metadata() *devices.AddRegistryCertificateMetadata {
	return o.Operation.Metadata().(*devices.AddRegistryCertificateMetadata)
}

// Response retrieves the operation response.
func (o *RegistryAddCertificateOperation) Response() *devices.RegistryCertificate {
	return o.Operation.Response().(*devices.RegistryCertificate)
}

// Wait polls the operation until it's done.
func (o *RegistryAddCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.RegistryCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.RegistryCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryAddCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.RegistryCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.RegistryCertificate)
	return response, err
}

// AddCertificate is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) AddCertificate(ctx context.Context, in *devices.AddRegistryCertificateRequest, opts ...grpc.CallOption) (*RegistryAddCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryAddCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).AddCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.AddRegistryCertificateMetadata).GetRegistryId()
		},
		MetadataType: (*devices.AddRegistryCertificateMetadata)(nil),
		ResponseType: (*devices.RegistryCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryAddCertificateOperation{*op}, nil
}

// RegistryDeleteCertificateOperation is used to monitor the state of DeleteCertificate operations.
type RegistryDeleteCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDeleteCertificateOperation) Metadata() *devices.DeleteRegistryCertificateMetadata {
	return o.Operation.Metadata().(*devices.DeleteRegistryCertificateMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDeleteCertificateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryDeleteCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDeleteCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteCertificate is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) DeleteCertificate(ctx context.Context, in *devices.DeleteRegistryCertificateRequest, opts ...grpc.CallOption) (*RegistryDeleteCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDeleteCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).DeleteCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteRegistryCertificateMetadata).GetRegistryId()
		},
		MetadataType: (*devices.DeleteRegistryCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDeleteCertificateOperation{*op}, nil
}

// ListPasswords is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) ListPasswords(ctx context.Context, in *devices.ListRegistryPasswordsRequest, opts ...grpc.CallOption) (*devices.ListRegistryPasswordsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListPasswords, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).ListPasswords(ctx, in, opts...)
}

// RegistryAddPasswordOperation is used to monitor the state of AddPassword operations.
type RegistryAddPasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryAddPasswordOperation) Metadata() *devices.AddRegistryPasswordMetadata {
	return o.Operation.Metadata().(*devices.AddRegistryPasswordMetadata)
}

// Response retrieves the operation response.
func (o *RegistryAddPasswordOperation) Response() *devices.RegistryPassword {
	return o.Operation.Response().(*devices.RegistryPassword)
}

// Wait polls the operation until it's done.
func (o *RegistryAddPasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.RegistryPassword, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.RegistryPassword)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryAddPasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.RegistryPassword, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.RegistryPassword)
	return response, err
}

// AddPassword is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) AddPassword(ctx context.Context, in *devices.AddRegistryPasswordRequest, opts ...grpc.CallOption) (*RegistryAddPasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryAddPassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).AddPassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.AddRegistryPasswordMetadata).GetRegistryId()
		},
		MetadataType: (*devices.AddRegistryPasswordMetadata)(nil),
		ResponseType: (*devices.RegistryPassword)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryAddPasswordOperation{*op}, nil
}

// RegistryDeletePasswordOperation is used to monitor the state of DeletePassword operations.
type RegistryDeletePasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDeletePasswordOperation) Metadata() *devices.DeleteRegistryPasswordMetadata {
	return o.Operation.Metadata().(*devices.DeleteRegistryPasswordMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDeletePasswordOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryDeletePasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDeletePasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeletePassword is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) DeletePassword(ctx context.Context, in *devices.DeleteRegistryPasswordRequest, opts ...grpc.CallOption) (*RegistryDeletePasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDeletePassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).DeletePassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteRegistryPasswordMetadata).GetRegistryId()
		},
		MetadataType: (*devices.DeleteRegistryPasswordMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDeletePasswordOperation{*op}, nil
}

// ListDeviceTopicAliases is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) ListDeviceTopicAliases(ctx context.Context, in *devices.ListDeviceTopicAliasesRequest, opts ...grpc.CallOption) (*devices.ListDeviceTopicAliasesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListDeviceTopicAliases, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).ListDeviceTopicAliases(ctx, in, opts...)
}

// ListDataStreamExports is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) ListDataStreamExports(ctx context.Context, in *devices.ListDataStreamExportsRequest, opts ...grpc.CallOption) (*devices.ListDataStreamExportsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListDataStreamExports, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).ListDataStreamExports(ctx, in, opts...)
}

// RegistryAddDataStreamExportOperation is used to monitor the state of AddDataStreamExport operations.
type RegistryAddDataStreamExportOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryAddDataStreamExportOperation) Metadata() *devices.AddDataStreamExportMetadata {
	return o.Operation.Metadata().(*devices.AddDataStreamExportMetadata)
}

// Response retrieves the operation response.
func (o *RegistryAddDataStreamExportOperation) Response() *devices.DataStreamExport {
	return o.Operation.Response().(*devices.DataStreamExport)
}

// Wait polls the operation until it's done.
func (o *RegistryAddDataStreamExportOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.DataStreamExport, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.DataStreamExport)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryAddDataStreamExportOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.DataStreamExport, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.DataStreamExport)
	return response, err
}

// AddDataStreamExport is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) AddDataStreamExport(ctx context.Context, in *devices.AddDataStreamExportRequest, opts ...grpc.CallOption) (*RegistryAddDataStreamExportOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryAddDataStreamExport, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).AddDataStreamExport(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.AddDataStreamExportMetadata).GetRegistryId()
		},
		MetadataType: (*devices.AddDataStreamExportMetadata)(nil),
		ResponseType: (*devices.DataStreamExport)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryAddDataStreamExportOperation{*op}, nil
}

// RegistryDeleteDataStreamExportOperation is used to monitor the state of DeleteDataStreamExport operations.
type RegistryDeleteDataStreamExportOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDeleteDataStreamExportOperation) Metadata() *devices.DeleteDataStreamExportMetadata {
	return o.Operation.Metadata().(*devices.DeleteDataStreamExportMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDeleteDataStreamExportOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryDeleteDataStreamExportOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDeleteDataStreamExportOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteDataStreamExport is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) DeleteDataStreamExport(ctx context.Context, in *devices.DeleteDataStreamExportRequest, opts ...grpc.CallOption) (*RegistryDeleteDataStreamExportOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDeleteDataStreamExport, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).DeleteDataStreamExport(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DeleteDataStreamExportMetadata).GetRegistryId()
		},
		MetadataType: (*devices.DeleteDataStreamExportMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDeleteDataStreamExportOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Devices Registry service.
func (c registryClient) ListOperations(ctx context.Context, in *devices.ListRegistryOperationsRequest, opts ...grpc.CallOption) (*devices.ListRegistryOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return devices.NewRegistryServiceClient(connection).ListOperations(ctx, in, opts...)
}

// RegistryDisableOperation is used to monitor the state of Disable operations.
type RegistryDisableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDisableOperation) Metadata() *devices.DisableRegistryMetadata {
	return o.Operation.Metadata().(*devices.DisableRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDisableOperation) Response() *devices.Registry {
	return o.Operation.Response().(*devices.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryDisableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDisableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// Disable is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Disable(ctx context.Context, in *devices.DisableRegistryRequest, opts ...grpc.CallOption) (*RegistryDisableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDisable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).Disable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.DisableRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*devices.DisableRegistryMetadata)(nil),
		ResponseType: (*devices.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDisableOperation{*op}, nil
}

// RegistryEnableOperation is used to monitor the state of Enable operations.
type RegistryEnableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryEnableOperation) Metadata() *devices.EnableRegistryMetadata {
	return o.Operation.Metadata().(*devices.EnableRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryEnableOperation) Response() *devices.Registry {
	return o.Operation.Response().(*devices.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryEnableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryEnableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*devices.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*devices.Registry)
	return response, err
}

// Enable is an operation of Yandex.Cloud Devices Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Enable(ctx context.Context, in *devices.EnableRegistryRequest, opts ...grpc.CallOption) (*RegistryEnableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryEnable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := devices.NewRegistryServiceClient(connection).Enable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*devices.EnableRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*devices.EnableRegistryMetadata)(nil),
		ResponseType: (*devices.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryEnableOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c registryClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RegistryGet                    = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Get")
	RegistryGetByName              = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.GetByName")
	RegistryList                   = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.List")
	RegistryCreate                 = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Create")
	RegistryUpdate                 = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Update")
	RegistryDelete                 = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Delete")
	RegistryListCertificates       = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.ListCertificates")
	RegistryAddCertificate         = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.AddCertificate")
	RegistryDeleteCertificate      = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.DeleteCertificate")
	RegistryListPasswords          = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.ListPasswords")
	RegistryAddPassword            = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.AddPassword")
	RegistryDeletePassword         = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.DeletePassword")
	RegistryListDeviceTopicAliases = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.ListDeviceTopicAliases")
	RegistryListDataStreamExports  = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.ListDataStreamExports")
	RegistryAddDataStreamExport    = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.AddDataStreamExport")
	RegistryDeleteDataStreamExport = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.DeleteDataStreamExport")
	RegistryListOperations         = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.ListOperations")
	RegistryDisable                = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Disable")
	RegistryEnable                 = protoreflect.FullName("yandex.cloud.iot.devices.v1.RegistryService.Enable")
	RegistryOperationPoller        = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
