// Code generated by sdkgen-v2. DO NOT EDIT.
package brokersdk

import (
	"context"

	broker "github.com/yandex-cloud/go-genproto/yandex/cloud/iot/broker/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BrokerClient provides methods for managing Broker resources of Yandex.Cloud Broker.
type BrokerClient interface {
	Get(context.Context, *broker.GetBrokerRequest, ...grpc.CallOption) (*broker.Broker, error)
	List(context.Context, *broker.ListBrokersRequest, ...grpc.CallOption) (*broker.ListBrokersResponse, error)
	Create(context.Context, *broker.CreateBrokerRequest, ...grpc.CallOption) (*BrokerCreateOperation, error)
	Update(context.Context, *broker.UpdateBrokerRequest, ...grpc.CallOption) (*BrokerUpdateOperation, error)
	Delete(context.Context, *broker.DeleteBrokerRequest, ...grpc.CallOption) (*BrokerDeleteOperation, error)
	ListCertificates(context.Context, *broker.ListBrokerCertificatesRequest, ...grpc.CallOption) (*broker.ListBrokerCertificatesResponse, error)
	AddCertificate(context.Context, *broker.AddBrokerCertificateRequest, ...grpc.CallOption) (*BrokerAddCertificateOperation, error)
	DeleteCertificate(context.Context, *broker.DeleteBrokerCertificateRequest, ...grpc.CallOption) (*BrokerDeleteCertificateOperation, error)
	ListPasswords(context.Context, *broker.ListBrokerPasswordsRequest, ...grpc.CallOption) (*broker.ListBrokerPasswordsResponse, error)
	AddPassword(context.Context, *broker.AddBrokerPasswordRequest, ...grpc.CallOption) (*BrokerAddPasswordOperation, error)
	DeletePassword(context.Context, *broker.DeleteBrokerPasswordRequest, ...grpc.CallOption) (*BrokerDeletePasswordOperation, error)
	ListOperations(context.Context, *broker.ListBrokerOperationsRequest, ...grpc.CallOption) (*broker.ListBrokerOperationsResponse, error)
}

var _ BrokerClient = brokerClient{}

type brokerClient struct {
	connector transport.Connector
}

// NewBrokerClient returns BrokerClient implementation.
func NewBrokerClient(connector transport.Connector) BrokerClient {
	return brokerClient{connector}
}

// Get is an operation of Yandex.Cloud Broker Broker service.
func (c brokerClient) Get(ctx context.Context, in *broker.GetBrokerRequest, opts ...grpc.CallOption) (*broker.Broker, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerGet, opts...)
	if err != nil {
		return nil, err
	}
	return broker.NewBrokerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Broker Broker service.
func (c brokerClient) List(ctx context.Context, in *broker.ListBrokersRequest, opts ...grpc.CallOption) (*broker.ListBrokersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerList, opts...)
	if err != nil {
		return nil, err
	}
	return broker.NewBrokerServiceClient(connection).List(ctx, in, opts...)
}

// BrokerCreateOperation is used to monitor the state of Create operations.
type BrokerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerCreateOperation) Metadata() *broker.CreateBrokerMetadata {
	return o.Operation.Metadata().(*broker.CreateBrokerMetadata)
}

// Response retrieves the operation response.
func (o *BrokerCreateOperation) Response() *broker.Broker {
	return o.Operation.Response().(*broker.Broker)
}

// Wait polls the operation until it's done.
func (o *BrokerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*broker.Broker, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*broker.Broker)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*broker.Broker, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*broker.Broker)
	return response, err
}

// Create is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) Create(ctx context.Context, in *broker.CreateBrokerRequest, opts ...grpc.CallOption) (*BrokerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.CreateBrokerMetadata).GetBrokerId()
		},
		MetadataType: (*broker.CreateBrokerMetadata)(nil),
		ResponseType: (*broker.Broker)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerCreateOperation{*op}, nil
}

// BrokerUpdateOperation is used to monitor the state of Update operations.
type BrokerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerUpdateOperation) Metadata() *broker.UpdateBrokerMetadata {
	return o.Operation.Metadata().(*broker.UpdateBrokerMetadata)
}

// Response retrieves the operation response.
func (o *BrokerUpdateOperation) Response() *broker.Broker {
	return o.Operation.Response().(*broker.Broker)
}

// Wait polls the operation until it's done.
func (o *BrokerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*broker.Broker, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*broker.Broker)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*broker.Broker, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*broker.Broker)
	return response, err
}

// Update is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) Update(ctx context.Context, in *broker.UpdateBrokerRequest, opts ...grpc.CallOption) (*BrokerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.UpdateBrokerMetadata).GetBrokerId()
		},
		MetadataType: (*broker.UpdateBrokerMetadata)(nil),
		ResponseType: (*broker.Broker)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerUpdateOperation{*op}, nil
}

// BrokerDeleteOperation is used to monitor the state of Delete operations.
type BrokerDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerDeleteOperation) Metadata() *broker.DeleteBrokerMetadata {
	return o.Operation.Metadata().(*broker.DeleteBrokerMetadata)
}

// Response retrieves the operation response.
func (o *BrokerDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BrokerDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) Delete(ctx context.Context, in *broker.DeleteBrokerRequest, opts ...grpc.CallOption) (*BrokerDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.DeleteBrokerMetadata).GetBrokerId()
		},
		MetadataType: (*broker.DeleteBrokerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerDeleteOperation{*op}, nil
}

// ListCertificates is an operation of Yandex.Cloud Broker Broker service.
func (c brokerClient) ListCertificates(ctx context.Context, in *broker.ListBrokerCertificatesRequest, opts ...grpc.CallOption) (*broker.ListBrokerCertificatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerListCertificates, opts...)
	if err != nil {
		return nil, err
	}
	return broker.NewBrokerServiceClient(connection).ListCertificates(ctx, in, opts...)
}

// BrokerAddCertificateOperation is used to monitor the state of AddCertificate operations.
type BrokerAddCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerAddCertificateOperation) Metadata() *broker.AddBrokerCertificateMetadata {
	return o.Operation.Metadata().(*broker.AddBrokerCertificateMetadata)
}

// Response retrieves the operation response.
func (o *BrokerAddCertificateOperation) Response() *broker.BrokerCertificate {
	return o.Operation.Response().(*broker.BrokerCertificate)
}

// Wait polls the operation until it's done.
func (o *BrokerAddCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*broker.BrokerCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*broker.BrokerCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerAddCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*broker.BrokerCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*broker.BrokerCertificate)
	return response, err
}

// AddCertificate is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) AddCertificate(ctx context.Context, in *broker.AddBrokerCertificateRequest, opts ...grpc.CallOption) (*BrokerAddCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerAddCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).AddCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.AddBrokerCertificateMetadata).GetBrokerId()
		},
		MetadataType: (*broker.AddBrokerCertificateMetadata)(nil),
		ResponseType: (*broker.BrokerCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerAddCertificateOperation{*op}, nil
}

// BrokerDeleteCertificateOperation is used to monitor the state of DeleteCertificate operations.
type BrokerDeleteCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerDeleteCertificateOperation) Metadata() *broker.DeleteBrokerCertificateMetadata {
	return o.Operation.Metadata().(*broker.DeleteBrokerCertificateMetadata)
}

// Response retrieves the operation response.
func (o *BrokerDeleteCertificateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BrokerDeleteCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerDeleteCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteCertificate is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) DeleteCertificate(ctx context.Context, in *broker.DeleteBrokerCertificateRequest, opts ...grpc.CallOption) (*BrokerDeleteCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerDeleteCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).DeleteCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.DeleteBrokerCertificateMetadata).GetBrokerId()
		},
		MetadataType: (*broker.DeleteBrokerCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerDeleteCertificateOperation{*op}, nil
}

// ListPasswords is an operation of Yandex.Cloud Broker Broker service.
func (c brokerClient) ListPasswords(ctx context.Context, in *broker.ListBrokerPasswordsRequest, opts ...grpc.CallOption) (*broker.ListBrokerPasswordsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerListPasswords, opts...)
	if err != nil {
		return nil, err
	}
	return broker.NewBrokerServiceClient(connection).ListPasswords(ctx, in, opts...)
}

// BrokerAddPasswordOperation is used to monitor the state of AddPassword operations.
type BrokerAddPasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerAddPasswordOperation) Metadata() *broker.AddBrokerPasswordMetadata {
	return o.Operation.Metadata().(*broker.AddBrokerPasswordMetadata)
}

// Response retrieves the operation response.
func (o *BrokerAddPasswordOperation) Response() *broker.BrokerPassword {
	return o.Operation.Response().(*broker.BrokerPassword)
}

// Wait polls the operation until it's done.
func (o *BrokerAddPasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*broker.BrokerPassword, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*broker.BrokerPassword)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerAddPasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*broker.BrokerPassword, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*broker.BrokerPassword)
	return response, err
}

// AddPassword is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) AddPassword(ctx context.Context, in *broker.AddBrokerPasswordRequest, opts ...grpc.CallOption) (*BrokerAddPasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerAddPassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).AddPassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.AddBrokerPasswordMetadata).GetBrokerId()
		},
		MetadataType: (*broker.AddBrokerPasswordMetadata)(nil),
		ResponseType: (*broker.BrokerPassword)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerAddPasswordOperation{*op}, nil
}

// BrokerDeletePasswordOperation is used to monitor the state of DeletePassword operations.
type BrokerDeletePasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BrokerDeletePasswordOperation) Metadata() *broker.DeleteBrokerPasswordMetadata {
	return o.Operation.Metadata().(*broker.DeleteBrokerPasswordMetadata)
}

// Response retrieves the operation response.
func (o *BrokerDeletePasswordOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BrokerDeletePasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BrokerDeletePasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeletePassword is an operation of Yandex.Cloud Broker Broker service.
// It returns an object which should be used to monitor the operation state.
func (c brokerClient) DeletePassword(ctx context.Context, in *broker.DeleteBrokerPasswordRequest, opts ...grpc.CallOption) (*BrokerDeletePasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerDeletePassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := broker.NewBrokerServiceClient(connection).DeletePassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*broker.DeleteBrokerPasswordMetadata).GetBrokerId()
		},
		MetadataType: (*broker.DeleteBrokerPasswordMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BrokerDeletePasswordOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Broker Broker service.
func (c brokerClient) ListOperations(ctx context.Context, in *broker.ListBrokerOperationsRequest, opts ...grpc.CallOption) (*broker.ListBrokerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return broker.NewBrokerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c brokerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BrokerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BrokerGet               = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.Get")
	BrokerList              = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.List")
	BrokerCreate            = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.Create")
	BrokerUpdate            = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.Update")
	BrokerDelete            = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.Delete")
	BrokerListCertificates  = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.ListCertificates")
	BrokerAddCertificate    = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.AddCertificate")
	BrokerDeleteCertificate = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.DeleteCertificate")
	BrokerListPasswords     = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.ListPasswords")
	BrokerAddPassword       = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.AddPassword")
	BrokerDeletePassword    = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.DeletePassword")
	BrokerListOperations    = protoreflect.FullName("yandex.cloud.iot.broker.v1.BrokerService.ListOperations")
	BrokerOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
