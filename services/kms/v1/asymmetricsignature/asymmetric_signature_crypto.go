// Code generated by sdkgen-v2. DO NOT EDIT.
package asymmetricsignaturesdk

import (
	"context"

	asymmetricsignature "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// AsymmetricSignatureCryptoClient provides methods for managing AsymmetricSignatureCrypto resources of Yandex.Cloud Asymmetricsignature.
type AsymmetricSignatureCryptoClient interface {
	Sign(context.Context, *asymmetricsignature.AsymmetricSignRequest, ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignResponse, error)
	SignHash(context.Context, *asymmetricsignature.AsymmetricSignHashRequest, ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignHashResponse, error)
	GetPublicKey(context.Context, *asymmetricsignature.AsymmetricGetPublicKeyRequest, ...grpc.CallOption) (*asymmetricsignature.AsymmetricGetPublicKeyResponse, error)
}

var _ AsymmetricSignatureCryptoClient = asymmetricSignatureCryptoClient{}

type asymmetricSignatureCryptoClient struct {
	connector transport.Connector
}

// NewAsymmetricSignatureCryptoClient returns AsymmetricSignatureCryptoClient implementation.
func NewAsymmetricSignatureCryptoClient(connector transport.Connector) AsymmetricSignatureCryptoClient {
	return asymmetricSignatureCryptoClient{connector}
}

// Sign is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureCrypto service.
func (c asymmetricSignatureCryptoClient) Sign(ctx context.Context, in *asymmetricsignature.AsymmetricSignRequest, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureCryptoSign, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureCryptoServiceClient(connection).Sign(ctx, in, opts...)
}

// SignHash is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureCrypto service.
func (c asymmetricSignatureCryptoClient) SignHash(ctx context.Context, in *asymmetricsignature.AsymmetricSignHashRequest, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignHashResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureCryptoSignHash, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureCryptoServiceClient(connection).SignHash(ctx, in, opts...)
}

// GetPublicKey is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureCrypto service.
func (c asymmetricSignatureCryptoClient) GetPublicKey(ctx context.Context, in *asymmetricsignature.AsymmetricGetPublicKeyRequest, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricGetPublicKeyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureCryptoGetPublicKey, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureCryptoServiceClient(connection).GetPublicKey(ctx, in, opts...)
}

var (
	AsymmetricSignatureCryptoSign         = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.Sign")
	AsymmetricSignatureCryptoSignHash     = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.SignHash")
	AsymmetricSignatureCryptoGetPublicKey = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.GetPublicKey")
)
