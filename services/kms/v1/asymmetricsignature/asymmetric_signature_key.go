// Code generated by sdkgen-v2. DO NOT EDIT.
package asymmetricsignaturesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	asymmetricsignature "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AsymmetricSignatureKeyClient provides methods for managing AsymmetricSignatureKey resources of Yandex.Cloud Asymmetricsignature.
type AsymmetricSignatureKeyClient interface {
	Create(context.Context, *asymmetricsignature.CreateAsymmetricSignatureKeyRequest, ...grpc.CallOption) (*AsymmetricSignatureKeyCreateOperation, error)
	Get(context.Context, *asymmetricsignature.GetAsymmetricSignatureKeyRequest, ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error)
	List(context.Context, *asymmetricsignature.ListAsymmetricSignatureKeysRequest, ...grpc.CallOption) (*asymmetricsignature.ListAsymmetricSignatureKeysResponse, error)
	Update(context.Context, *asymmetricsignature.UpdateAsymmetricSignatureKeyRequest, ...grpc.CallOption) (*AsymmetricSignatureKeyUpdateOperation, error)
	Delete(context.Context, *asymmetricsignature.DeleteAsymmetricSignatureKeyRequest, ...grpc.CallOption) (*AsymmetricSignatureKeyDeleteOperation, error)
	ListOperations(context.Context, *asymmetricsignature.ListAsymmetricSignatureKeyOperationsRequest, ...grpc.CallOption) (*asymmetricsignature.ListAsymmetricSignatureKeyOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*AsymmetricSignatureKeySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*AsymmetricSignatureKeyUpdateAccessBindingsOperation, error)
}

var _ AsymmetricSignatureKeyClient = asymmetricSignatureKeyClient{}

type asymmetricSignatureKeyClient struct {
	connector transport.Connector
}

// NewAsymmetricSignatureKeyClient returns AsymmetricSignatureKeyClient implementation.
func NewAsymmetricSignatureKeyClient(connector transport.Connector) AsymmetricSignatureKeyClient {
	return asymmetricSignatureKeyClient{connector}
}

// AsymmetricSignatureKeyCreateOperation is used to monitor the state of Create operations.
type AsymmetricSignatureKeyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricSignatureKeyCreateOperation) Metadata() *asymmetricsignature.CreateAsymmetricSignatureKeyMetadata {
	return o.Operation.Metadata().(*asymmetricsignature.CreateAsymmetricSignatureKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricSignatureKeyCreateOperation) Response() *asymmetricsignature.AsymmetricSignatureKey {
	return o.Operation.Response().(*asymmetricsignature.AsymmetricSignatureKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricSignatureKeyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricSignatureKeyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// Create is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricSignatureKeyClient) Create(ctx context.Context, in *asymmetricsignature.CreateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKeyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricsignature.CreateAsymmetricSignatureKeyMetadata)(nil),
		ResponseType: (*asymmetricsignature.AsymmetricSignatureKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricSignatureKeyCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
func (c asymmetricSignatureKeyClient) Get(ctx context.Context, in *asymmetricsignature.GetAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyGet, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
func (c asymmetricSignatureKeyClient) List(ctx context.Context, in *asymmetricsignature.ListAsymmetricSignatureKeysRequest, opts ...grpc.CallOption) (*asymmetricsignature.ListAsymmetricSignatureKeysResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyList, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).List(ctx, in, opts...)
}

// AsymmetricSignatureKeyUpdateOperation is used to monitor the state of Update operations.
type AsymmetricSignatureKeyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricSignatureKeyUpdateOperation) Metadata() *asymmetricsignature.UpdateAsymmetricSignatureKeyMetadata {
	return o.Operation.Metadata().(*asymmetricsignature.UpdateAsymmetricSignatureKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricSignatureKeyUpdateOperation) Response() *asymmetricsignature.AsymmetricSignatureKey {
	return o.Operation.Response().(*asymmetricsignature.AsymmetricSignatureKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricSignatureKeyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricSignatureKeyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// Update is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricSignatureKeyClient) Update(ctx context.Context, in *asymmetricsignature.UpdateAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKeyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricsignature.UpdateAsymmetricSignatureKeyMetadata)(nil),
		ResponseType: (*asymmetricsignature.AsymmetricSignatureKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricSignatureKeyUpdateOperation{*op}, nil
}

// AsymmetricSignatureKeyDeleteOperation is used to monitor the state of Delete operations.
type AsymmetricSignatureKeyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricSignatureKeyDeleteOperation) Metadata() *asymmetricsignature.DeleteAsymmetricSignatureKeyMetadata {
	return o.Operation.Metadata().(*asymmetricsignature.DeleteAsymmetricSignatureKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricSignatureKeyDeleteOperation) Response() *asymmetricsignature.AsymmetricSignatureKey {
	return o.Operation.Response().(*asymmetricsignature.AsymmetricSignatureKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricSignatureKeyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricSignatureKeyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricsignature.AsymmetricSignatureKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricsignature.AsymmetricSignatureKey)
	return response, err
}

// Delete is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricSignatureKeyClient) Delete(ctx context.Context, in *asymmetricsignature.DeleteAsymmetricSignatureKeyRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKeyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricsignature.DeleteAsymmetricSignatureKeyMetadata)(nil),
		ResponseType: (*asymmetricsignature.AsymmetricSignatureKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricSignatureKeyDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
func (c asymmetricSignatureKeyClient) ListOperations(ctx context.Context, in *asymmetricsignature.ListAsymmetricSignatureKeyOperationsRequest, opts ...grpc.CallOption) (*asymmetricsignature.ListAsymmetricSignatureKeyOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
func (c asymmetricSignatureKeyClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// AsymmetricSignatureKeySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type AsymmetricSignatureKeySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *AsymmetricSignatureKeySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AsymmetricSignatureKeySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricSignatureKeySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricSignatureKeyClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKeySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricSignatureKeySetAccessBindingsOperation{*op}, nil
}

// AsymmetricSignatureKeyUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type AsymmetricSignatureKeyUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *AsymmetricSignatureKeyUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AsymmetricSignatureKeyUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricSignatureKeyUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Asymmetricsignature AsymmetricSignatureKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricSignatureKeyClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*AsymmetricSignatureKeyUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricsignature.NewAsymmetricSignatureKeyServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricSignatureKeyUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c asymmetricSignatureKeyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricSignatureKeyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AsymmetricSignatureKeyCreate               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Create")
	AsymmetricSignatureKeyGet                  = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Get")
	AsymmetricSignatureKeyList                 = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.List")
	AsymmetricSignatureKeyUpdate               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Update")
	AsymmetricSignatureKeyDelete               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.Delete")
	AsymmetricSignatureKeyListOperations       = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListOperations")
	AsymmetricSignatureKeyListAccessBindings   = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.ListAccessBindings")
	AsymmetricSignatureKeySetAccessBindings    = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.SetAccessBindings")
	AsymmetricSignatureKeyUpdateAccessBindings = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKeyService.UpdateAccessBindings")
	AsymmetricSignatureKeyOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
