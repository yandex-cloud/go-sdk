// Code generated by sdkgen-v2. DO NOT EDIT.
package asymmetricencryptionsdk

import (
	"context"

	asymmetricencryption "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricencryption"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// AsymmetricEncryptionCryptoClient provides methods for managing AsymmetricEncryptionCrypto resources of Yandex.Cloud Asymmetricencryption.
type AsymmetricEncryptionCryptoClient interface {
	Decrypt(context.Context, *asymmetricencryption.AsymmetricDecryptRequest, ...grpc.CallOption) (*asymmetricencryption.AsymmetricDecryptResponse, error)
	GetPublicKey(context.Context, *asymmetricencryption.AsymmetricGetPublicKeyRequest, ...grpc.CallOption) (*asymmetricencryption.AsymmetricGetPublicKeyResponse, error)
}

var _ AsymmetricEncryptionCryptoClient = asymmetricEncryptionCryptoClient{}

type asymmetricEncryptionCryptoClient struct {
	connector transport.Connector
}

// NewAsymmetricEncryptionCryptoClient returns AsymmetricEncryptionCryptoClient implementation.
func NewAsymmetricEncryptionCryptoClient(connector transport.Connector) AsymmetricEncryptionCryptoClient {
	return asymmetricEncryptionCryptoClient{connector}
}

// Decrypt is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionCrypto service.
func (c asymmetricEncryptionCryptoClient) Decrypt(ctx context.Context, in *asymmetricencryption.AsymmetricDecryptRequest, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricDecryptResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionCryptoDecrypt, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionCryptoServiceClient(connection).Decrypt(ctx, in, opts...)
}

// GetPublicKey is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionCrypto service.
func (c asymmetricEncryptionCryptoClient) GetPublicKey(ctx context.Context, in *asymmetricencryption.AsymmetricGetPublicKeyRequest, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricGetPublicKeyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionCryptoGetPublicKey, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionCryptoServiceClient(connection).GetPublicKey(ctx, in, opts...)
}

var (
	AsymmetricEncryptionCryptoDecrypt      = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionCryptoService.Decrypt")
	AsymmetricEncryptionCryptoGetPublicKey = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionCryptoService.GetPublicKey")
)
