// Code generated by sdkgen-v2. DO NOT EDIT.
package asymmetricencryptionsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	asymmetricencryption "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricencryption"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AsymmetricEncryptionKeyClient provides methods for managing AsymmetricEncryptionKey resources of Yandex.Cloud Asymmetricencryption.
type AsymmetricEncryptionKeyClient interface {
	Create(context.Context, *asymmetricencryption.CreateAsymmetricEncryptionKeyRequest, ...grpc.CallOption) (*AsymmetricEncryptionKeyCreateOperation, error)
	Get(context.Context, *asymmetricencryption.GetAsymmetricEncryptionKeyRequest, ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error)
	List(context.Context, *asymmetricencryption.ListAsymmetricEncryptionKeysRequest, ...grpc.CallOption) (*asymmetricencryption.ListAsymmetricEncryptionKeysResponse, error)
	Update(context.Context, *asymmetricencryption.UpdateAsymmetricEncryptionKeyRequest, ...grpc.CallOption) (*AsymmetricEncryptionKeyUpdateOperation, error)
	Delete(context.Context, *asymmetricencryption.DeleteAsymmetricEncryptionKeyRequest, ...grpc.CallOption) (*AsymmetricEncryptionKeyDeleteOperation, error)
	ListOperations(context.Context, *asymmetricencryption.ListAsymmetricEncryptionKeyOperationsRequest, ...grpc.CallOption) (*asymmetricencryption.ListAsymmetricEncryptionKeyOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*AsymmetricEncryptionKeySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*AsymmetricEncryptionKeyUpdateAccessBindingsOperation, error)
}

var _ AsymmetricEncryptionKeyClient = asymmetricEncryptionKeyClient{}

type asymmetricEncryptionKeyClient struct {
	connector transport.Connector
}

// NewAsymmetricEncryptionKeyClient returns AsymmetricEncryptionKeyClient implementation.
func NewAsymmetricEncryptionKeyClient(connector transport.Connector) AsymmetricEncryptionKeyClient {
	return asymmetricEncryptionKeyClient{connector}
}

// AsymmetricEncryptionKeyCreateOperation is used to monitor the state of Create operations.
type AsymmetricEncryptionKeyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricEncryptionKeyCreateOperation) Metadata() *asymmetricencryption.CreateAsymmetricEncryptionKeyMetadata {
	return o.Operation.Metadata().(*asymmetricencryption.CreateAsymmetricEncryptionKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricEncryptionKeyCreateOperation) Response() *asymmetricencryption.AsymmetricEncryptionKey {
	return o.Operation.Response().(*asymmetricencryption.AsymmetricEncryptionKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricEncryptionKeyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricEncryptionKeyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// Create is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricEncryptionKeyClient) Create(ctx context.Context, in *asymmetricencryption.CreateAsymmetricEncryptionKeyRequest, opts ...grpc.CallOption) (*AsymmetricEncryptionKeyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricencryption.CreateAsymmetricEncryptionKeyMetadata)(nil),
		ResponseType: (*asymmetricencryption.AsymmetricEncryptionKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricEncryptionKeyCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
func (c asymmetricEncryptionKeyClient) Get(ctx context.Context, in *asymmetricencryption.GetAsymmetricEncryptionKeyRequest, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyGet, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
func (c asymmetricEncryptionKeyClient) List(ctx context.Context, in *asymmetricencryption.ListAsymmetricEncryptionKeysRequest, opts ...grpc.CallOption) (*asymmetricencryption.ListAsymmetricEncryptionKeysResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyList, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).List(ctx, in, opts...)
}

// AsymmetricEncryptionKeyUpdateOperation is used to monitor the state of Update operations.
type AsymmetricEncryptionKeyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricEncryptionKeyUpdateOperation) Metadata() *asymmetricencryption.UpdateAsymmetricEncryptionKeyMetadata {
	return o.Operation.Metadata().(*asymmetricencryption.UpdateAsymmetricEncryptionKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricEncryptionKeyUpdateOperation) Response() *asymmetricencryption.AsymmetricEncryptionKey {
	return o.Operation.Response().(*asymmetricencryption.AsymmetricEncryptionKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricEncryptionKeyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricEncryptionKeyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// Update is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricEncryptionKeyClient) Update(ctx context.Context, in *asymmetricencryption.UpdateAsymmetricEncryptionKeyRequest, opts ...grpc.CallOption) (*AsymmetricEncryptionKeyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricencryption.UpdateAsymmetricEncryptionKeyMetadata)(nil),
		ResponseType: (*asymmetricencryption.AsymmetricEncryptionKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricEncryptionKeyUpdateOperation{*op}, nil
}

// AsymmetricEncryptionKeyDeleteOperation is used to monitor the state of Delete operations.
type AsymmetricEncryptionKeyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricEncryptionKeyDeleteOperation) Metadata() *asymmetricencryption.DeleteAsymmetricEncryptionKeyMetadata {
	return o.Operation.Metadata().(*asymmetricencryption.DeleteAsymmetricEncryptionKeyMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricEncryptionKeyDeleteOperation) Response() *asymmetricencryption.AsymmetricEncryptionKey {
	return o.Operation.Response().(*asymmetricencryption.AsymmetricEncryptionKey)
}

// Wait polls the operation until it's done.
func (o *AsymmetricEncryptionKeyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricEncryptionKeyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricEncryptionKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*asymmetricencryption.AsymmetricEncryptionKey)
	return response, err
}

// Delete is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricEncryptionKeyClient) Delete(ctx context.Context, in *asymmetricencryption.DeleteAsymmetricEncryptionKeyRequest, opts ...grpc.CallOption) (*AsymmetricEncryptionKeyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*asymmetricencryption.DeleteAsymmetricEncryptionKeyMetadata)(nil),
		ResponseType: (*asymmetricencryption.AsymmetricEncryptionKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricEncryptionKeyDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
func (c asymmetricEncryptionKeyClient) ListOperations(ctx context.Context, in *asymmetricencryption.ListAsymmetricEncryptionKeyOperationsRequest, opts ...grpc.CallOption) (*asymmetricencryption.ListAsymmetricEncryptionKeyOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
func (c asymmetricEncryptionKeyClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// AsymmetricEncryptionKeySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type AsymmetricEncryptionKeySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricEncryptionKeySetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricEncryptionKeySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AsymmetricEncryptionKeySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricEncryptionKeySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricEncryptionKeyClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*AsymmetricEncryptionKeySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricEncryptionKeySetAccessBindingsOperation{*op}, nil
}

// AsymmetricEncryptionKeyUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type AsymmetricEncryptionKeyUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AsymmetricEncryptionKeyUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *AsymmetricEncryptionKeyUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AsymmetricEncryptionKeyUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AsymmetricEncryptionKeyUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Asymmetricencryption AsymmetricEncryptionKey service.
// It returns an object which should be used to monitor the operation state.
func (c asymmetricEncryptionKeyClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*AsymmetricEncryptionKeyUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := asymmetricencryption.NewAsymmetricEncryptionKeyServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AsymmetricEncryptionKeyUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c asymmetricEncryptionKeyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AsymmetricEncryptionKeyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AsymmetricEncryptionKeyCreate               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.Create")
	AsymmetricEncryptionKeyGet                  = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.Get")
	AsymmetricEncryptionKeyList                 = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.List")
	AsymmetricEncryptionKeyUpdate               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.Update")
	AsymmetricEncryptionKeyDelete               = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.Delete")
	AsymmetricEncryptionKeyListOperations       = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.ListOperations")
	AsymmetricEncryptionKeyListAccessBindings   = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.ListAccessBindings")
	AsymmetricEncryptionKeySetAccessBindings    = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.SetAccessBindings")
	AsymmetricEncryptionKeyUpdateAccessBindings = protoreflect.FullName("yandex.cloud.kms.v1.asymmetricencryption.AsymmetricEncryptionKeyService.UpdateAccessBindings")
	AsymmetricEncryptionKeyOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
