// Code generated by sdkgen-v2. DO NOT EDIT.
package logssdk

import (
	"context"

	logs "github.com/yandex-cloud/go-genproto/yandex/cloud/logs/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// LogEventClient provides methods for managing LogEvent resources of Yandex.Cloud Logs.
type LogEventClient interface {
	Read(context.Context, *logs.ReadLogEventsRequest, ...grpc.CallOption) (*logs.ReadLogEventsResponse, error)
	Write(context.Context, *logs.WriteLogEventsRequest, ...grpc.CallOption) (*logs.WriteLogEventsResponse, error)
}

var _ LogEventClient = logEventClient{}

type logEventClient struct {
	connector transport.Connector
}

// NewLogEventClient returns LogEventClient implementation.
func NewLogEventClient(connector transport.Connector) LogEventClient {
	return logEventClient{connector}
}

// Read is an operation of Yandex.Cloud Logs LogEvent service.
func (c logEventClient) Read(ctx context.Context, in *logs.ReadLogEventsRequest, opts ...grpc.CallOption) (*logs.ReadLogEventsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogEventRead, opts...)
	if err != nil {
		return nil, err
	}
	return logs.NewLogEventServiceClient(connection).Read(ctx, in, opts...)
}

// Write is an operation of Yandex.Cloud Logs LogEvent service.
func (c logEventClient) Write(ctx context.Context, in *logs.WriteLogEventsRequest, opts ...grpc.CallOption) (*logs.WriteLogEventsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogEventWrite, opts...)
	if err != nil {
		return nil, err
	}
	return logs.NewLogEventServiceClient(connection).Write(ctx, in, opts...)
}

var (
	LogEventRead  = protoreflect.FullName("yandex.cloud.logs.v1.LogEventService.Read")
	LogEventWrite = protoreflect.FullName("yandex.cloud.logs.v1.LogEventService.Write")
)
