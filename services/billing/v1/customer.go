// Code generated by sdkgen-v2. DO NOT EDIT.
package billingsdk

import (
	"context"

	billing "github.com/yandex-cloud/go-genproto/yandex/cloud/billing/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// CustomerClient provides methods for managing Customer resources of Yandex.Cloud Billing.
type CustomerClient interface {
	List(context.Context, *billing.ListCustomersRequest, ...grpc.CallOption) (*billing.ListCustomersResponse, error)
	Invite(context.Context, *billing.InviteCustomerRequest, ...grpc.CallOption) (*CustomerInviteOperation, error)
	CreateResellerServed(context.Context, *billing.CreateResellerServedCustomerRequest, ...grpc.CallOption) (*CustomerCreateResellerServedOperation, error)
	Activate(context.Context, *billing.ActivateCustomerRequest, ...grpc.CallOption) (*CustomerActivateOperation, error)
	Suspend(context.Context, *billing.SuspendCustomerRequest, ...grpc.CallOption) (*CustomerSuspendOperation, error)
}

var _ CustomerClient = customerClient{}

type customerClient struct {
	connector transport.Connector
}

// NewCustomerClient returns CustomerClient implementation.
func NewCustomerClient(connector transport.Connector) CustomerClient {
	return customerClient{connector}
}

// List is an operation of Yandex.Cloud Billing Customer service.
func (c customerClient) List(ctx context.Context, in *billing.ListCustomersRequest, opts ...grpc.CallOption) (*billing.ListCustomersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerList, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewCustomerServiceClient(connection).List(ctx, in, opts...)
}

// CustomerInviteOperation is used to monitor the state of Invite operations.
type CustomerInviteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CustomerInviteOperation) Metadata() *billing.CustomerMetadata {
	return o.Operation.Metadata().(*billing.CustomerMetadata)
}

// Response retrieves the operation response.
func (o *CustomerInviteOperation) Response() *billing.Customer {
	return o.Operation.Response().(*billing.Customer)
}

// Wait polls the operation until it's done.
func (o *CustomerInviteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CustomerInviteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// Invite is an operation of Yandex.Cloud Billing Customer service.
// It returns an object which should be used to monitor the operation state.
func (c customerClient) Invite(ctx context.Context, in *billing.InviteCustomerRequest, opts ...grpc.CallOption) (*CustomerInviteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerInvite, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewCustomerServiceClient(connection).Invite(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*billing.CustomerMetadata).GetCustomerId()
		},
		MetadataType: (*billing.CustomerMetadata)(nil),
		ResponseType: (*billing.Customer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CustomerInviteOperation{*op}, nil
}

// CustomerCreateResellerServedOperation is used to monitor the state of CreateResellerServed operations.
type CustomerCreateResellerServedOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CustomerCreateResellerServedOperation) Metadata() *billing.CustomerMetadata {
	return o.Operation.Metadata().(*billing.CustomerMetadata)
}

// Response retrieves the operation response.
func (o *CustomerCreateResellerServedOperation) Response() *billing.Customer {
	return o.Operation.Response().(*billing.Customer)
}

// Wait polls the operation until it's done.
func (o *CustomerCreateResellerServedOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CustomerCreateResellerServedOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// CreateResellerServed is an operation of Yandex.Cloud Billing Customer service.
// It returns an object which should be used to monitor the operation state.
func (c customerClient) CreateResellerServed(ctx context.Context, in *billing.CreateResellerServedCustomerRequest, opts ...grpc.CallOption) (*CustomerCreateResellerServedOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerCreateResellerServed, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewCustomerServiceClient(connection).CreateResellerServed(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*billing.CustomerMetadata).GetCustomerId()
		},
		MetadataType: (*billing.CustomerMetadata)(nil),
		ResponseType: (*billing.Customer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CustomerCreateResellerServedOperation{*op}, nil
}

// CustomerActivateOperation is used to monitor the state of Activate operations.
type CustomerActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CustomerActivateOperation) Metadata() *billing.CustomerMetadata {
	return o.Operation.Metadata().(*billing.CustomerMetadata)
}

// Response retrieves the operation response.
func (o *CustomerActivateOperation) Response() *billing.Customer {
	return o.Operation.Response().(*billing.Customer)
}

// Wait polls the operation until it's done.
func (o *CustomerActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CustomerActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// Activate is an operation of Yandex.Cloud Billing Customer service.
// It returns an object which should be used to monitor the operation state.
func (c customerClient) Activate(ctx context.Context, in *billing.ActivateCustomerRequest, opts ...grpc.CallOption) (*CustomerActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewCustomerServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*billing.CustomerMetadata).GetCustomerId()
		},
		MetadataType: (*billing.CustomerMetadata)(nil),
		ResponseType: (*billing.Customer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CustomerActivateOperation{*op}, nil
}

// CustomerSuspendOperation is used to monitor the state of Suspend operations.
type CustomerSuspendOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CustomerSuspendOperation) Metadata() *billing.CustomerMetadata {
	return o.Operation.Metadata().(*billing.CustomerMetadata)
}

// Response retrieves the operation response.
func (o *CustomerSuspendOperation) Response() *billing.Customer {
	return o.Operation.Response().(*billing.Customer)
}

// Wait polls the operation until it's done.
func (o *CustomerSuspendOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CustomerSuspendOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.Customer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.Customer)
	return response, err
}

// Suspend is an operation of Yandex.Cloud Billing Customer service.
// It returns an object which should be used to monitor the operation state.
func (c customerClient) Suspend(ctx context.Context, in *billing.SuspendCustomerRequest, opts ...grpc.CallOption) (*CustomerSuspendOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerSuspend, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewCustomerServiceClient(connection).Suspend(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*billing.CustomerMetadata).GetCustomerId()
		},
		MetadataType: (*billing.CustomerMetadata)(nil),
		ResponseType: (*billing.Customer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CustomerSuspendOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c customerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CustomerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CustomerList                 = protoreflect.FullName("yandex.cloud.billing.v1.CustomerService.List")
	CustomerInvite               = protoreflect.FullName("yandex.cloud.billing.v1.CustomerService.Invite")
	CustomerCreateResellerServed = protoreflect.FullName("yandex.cloud.billing.v1.CustomerService.CreateResellerServed")
	CustomerActivate             = protoreflect.FullName("yandex.cloud.billing.v1.CustomerService.Activate")
	CustomerSuspend              = protoreflect.FullName("yandex.cloud.billing.v1.CustomerService.Suspend")
	CustomerOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
