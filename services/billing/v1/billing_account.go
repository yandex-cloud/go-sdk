// Code generated by sdkgen-v2. DO NOT EDIT.
package billingsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	billing "github.com/yandex-cloud/go-genproto/yandex/cloud/billing/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BillingAccountClient provides methods for managing BillingAccount resources of Yandex.Cloud Billing.
type BillingAccountClient interface {
	Get(context.Context, *billing.GetBillingAccountRequest, ...grpc.CallOption) (*billing.BillingAccount, error)
	List(context.Context, *billing.ListBillingAccountsRequest, ...grpc.CallOption) (*billing.ListBillingAccountsResponse, error)
	ListBillableObjectBindings(context.Context, *billing.ListBillableObjectBindingsRequest, ...grpc.CallOption) (*billing.ListBillableObjectBindingsResponse, error)
	BindBillableObject(context.Context, *billing.BindBillableObjectRequest, ...grpc.CallOption) (*BillingAccountBindBillableObjectOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*BillingAccountUpdateAccessBindingsOperation, error)
}

var _ BillingAccountClient = billingAccountClient{}

type billingAccountClient struct {
	connector transport.Connector
}

// NewBillingAccountClient returns BillingAccountClient implementation.
func NewBillingAccountClient(connector transport.Connector) BillingAccountClient {
	return billingAccountClient{connector}
}

// Get is an operation of Yandex.Cloud Billing BillingAccount service.
func (c billingAccountClient) Get(ctx context.Context, in *billing.GetBillingAccountRequest, opts ...grpc.CallOption) (*billing.BillingAccount, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountGet, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBillingAccountServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Billing BillingAccount service.
func (c billingAccountClient) List(ctx context.Context, in *billing.ListBillingAccountsRequest, opts ...grpc.CallOption) (*billing.ListBillingAccountsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountList, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBillingAccountServiceClient(connection).List(ctx, in, opts...)
}

// ListBillableObjectBindings is an operation of Yandex.Cloud Billing BillingAccount service.
func (c billingAccountClient) ListBillableObjectBindings(ctx context.Context, in *billing.ListBillableObjectBindingsRequest, opts ...grpc.CallOption) (*billing.ListBillableObjectBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountListBillableObjectBindings, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBillingAccountServiceClient(connection).ListBillableObjectBindings(ctx, in, opts...)
}

// BillingAccountBindBillableObjectOperation is used to monitor the state of BindBillableObject operations.
type BillingAccountBindBillableObjectOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BillingAccountBindBillableObjectOperation) Metadata() *billing.BindBillableObjectMetadata {
	return o.Operation.Metadata().(*billing.BindBillableObjectMetadata)
}

// Response retrieves the operation response.
func (o *BillingAccountBindBillableObjectOperation) Response() *billing.BillableObjectBinding {
	return o.Operation.Response().(*billing.BillableObjectBinding)
}

// Wait polls the operation until it's done.
func (o *BillingAccountBindBillableObjectOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.BillableObjectBinding, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.BillableObjectBinding)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BillingAccountBindBillableObjectOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.BillableObjectBinding, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.BillableObjectBinding)
	return response, err
}

// BindBillableObject is an operation of Yandex.Cloud Billing BillingAccount service.
// It returns an object which should be used to monitor the operation state.
func (c billingAccountClient) BindBillableObject(ctx context.Context, in *billing.BindBillableObjectRequest, opts ...grpc.CallOption) (*BillingAccountBindBillableObjectOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountBindBillableObject, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewBillingAccountServiceClient(connection).BindBillableObject(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*billing.BindBillableObjectMetadata)(nil),
		ResponseType: (*billing.BillableObjectBinding)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BillingAccountBindBillableObjectOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Billing BillingAccount service.
func (c billingAccountClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBillingAccountServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// BillingAccountUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type BillingAccountUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *BillingAccountUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BillingAccountUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BillingAccountUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Billing BillingAccount service.
// It returns an object which should be used to monitor the operation state.
func (c billingAccountClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*BillingAccountUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewBillingAccountServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BillingAccountUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c billingAccountClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BillingAccountOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BillingAccountGet                        = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.Get")
	BillingAccountList                       = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.List")
	BillingAccountListBillableObjectBindings = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.ListBillableObjectBindings")
	BillingAccountBindBillableObject         = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.BindBillableObject")
	BillingAccountListAccessBindings         = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.ListAccessBindings")
	BillingAccountUpdateAccessBindings       = protoreflect.FullName("yandex.cloud.billing.v1.BillingAccountService.UpdateAccessBindings")
	BillingAccountOperationPoller            = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
