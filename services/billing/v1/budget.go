// Code generated by sdkgen-v2. DO NOT EDIT.
package billingsdk

import (
	"context"

	billing "github.com/yandex-cloud/go-genproto/yandex/cloud/billing/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// BudgetClient provides methods for managing Budget resources of Yandex.Cloud Billing.
type BudgetClient interface {
	Get(context.Context, *billing.GetBudgetRequest, ...grpc.CallOption) (*billing.Budget, error)
	List(context.Context, *billing.ListBudgetsRequest, ...grpc.CallOption) (*billing.ListBudgetsResponse, error)
	Create(context.Context, *billing.CreateBudgetRequest, ...grpc.CallOption) (*BudgetCreateOperation, error)
}

var _ BudgetClient = budgetClient{}

type budgetClient struct {
	connector transport.Connector
}

// NewBudgetClient returns BudgetClient implementation.
func NewBudgetClient(connector transport.Connector) BudgetClient {
	return budgetClient{connector}
}

// Get is an operation of Yandex.Cloud Billing Budget service.
func (c budgetClient) Get(ctx context.Context, in *billing.GetBudgetRequest, opts ...grpc.CallOption) (*billing.Budget, error) {
	connection, err := c.connector.GetConnection(ctx, BudgetGet, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBudgetServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Billing Budget service.
func (c budgetClient) List(ctx context.Context, in *billing.ListBudgetsRequest, opts ...grpc.CallOption) (*billing.ListBudgetsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BudgetList, opts...)
	if err != nil {
		return nil, err
	}
	return billing.NewBudgetServiceClient(connection).List(ctx, in, opts...)
}

// BudgetCreateOperation is used to monitor the state of Create operations.
type BudgetCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BudgetCreateOperation) Metadata() *billing.CreateBudgetMetadata {
	return o.Operation.Metadata().(*billing.CreateBudgetMetadata)
}

// Response retrieves the operation response.
func (o *BudgetCreateOperation) Response() *billing.Budget {
	return o.Operation.Response().(*billing.Budget)
}

// Wait polls the operation until it's done.
func (o *BudgetCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*billing.Budget, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*billing.Budget)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BudgetCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*billing.Budget, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*billing.Budget)
	return response, err
}

// Create is an operation of Yandex.Cloud Billing Budget service.
// It returns an object which should be used to monitor the operation state.
func (c budgetClient) Create(ctx context.Context, in *billing.CreateBudgetRequest, opts ...grpc.CallOption) (*BudgetCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BudgetCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := billing.NewBudgetServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*billing.CreateBudgetMetadata).GetBudgetId()
		},
		MetadataType: (*billing.CreateBudgetMetadata)(nil),
		ResponseType: (*billing.Budget)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BudgetCreateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c budgetClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BudgetOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BudgetGet             = protoreflect.FullName("yandex.cloud.billing.v1.BudgetService.Get")
	BudgetList            = protoreflect.FullName("yandex.cloud.billing.v1.BudgetService.List")
	BudgetCreate          = protoreflect.FullName("yandex.cloud.billing.v1.BudgetService.Create")
	BudgetOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
