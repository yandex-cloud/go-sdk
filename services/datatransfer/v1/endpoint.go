// Code generated by sdkgen-v2. DO NOT EDIT.
package datatransfersdk

import (
	"context"

	datatransfer "github.com/yandex-cloud/go-genproto/yandex/cloud/datatransfer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// EndpointClient provides methods for managing Endpoint resources of Yandex.Cloud Datatransfer.
type EndpointClient interface {
	Get(context.Context, *datatransfer.GetEndpointRequest, ...grpc.CallOption) (*datatransfer.Endpoint, error)
	List(context.Context, *datatransfer.ListEndpointsRequest, ...grpc.CallOption) (*datatransfer.ListEndpointsResponse, error)
	Create(context.Context, *datatransfer.CreateEndpointRequest, ...grpc.CallOption) (*EndpointCreateOperation, error)
	Update(context.Context, *datatransfer.UpdateEndpointRequest, ...grpc.CallOption) (*EndpointUpdateOperation, error)
	Delete(context.Context, *datatransfer.DeleteEndpointRequest, ...grpc.CallOption) (*EndpointDeleteOperation, error)
}

var _ EndpointClient = endpointClient{}

type endpointClient struct {
	connector transport.Connector
}

// NewEndpointClient returns EndpointClient implementation.
func NewEndpointClient(connector transport.Connector) EndpointClient {
	return endpointClient{connector}
}

// Get is an operation of Yandex.Cloud Datatransfer Endpoint service.
func (c endpointClient) Get(ctx context.Context, in *datatransfer.GetEndpointRequest, opts ...grpc.CallOption) (*datatransfer.Endpoint, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointGet, opts...)
	if err != nil {
		return nil, err
	}
	return datatransfer.NewEndpointServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Datatransfer Endpoint service.
func (c endpointClient) List(ctx context.Context, in *datatransfer.ListEndpointsRequest, opts ...grpc.CallOption) (*datatransfer.ListEndpointsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointList, opts...)
	if err != nil {
		return nil, err
	}
	return datatransfer.NewEndpointServiceClient(connection).List(ctx, in, opts...)
}

// EndpointCreateOperation is used to monitor the state of Create operations.
type EndpointCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *EndpointCreateOperation) Metadata() *datatransfer.CreateEndpointMetadata {
	return o.Operation.Metadata().(*datatransfer.CreateEndpointMetadata)
}

// Response retrieves the operation response.
func (o *EndpointCreateOperation) Response() *datatransfer.Endpoint {
	return o.Operation.Response().(*datatransfer.Endpoint)
}

// Wait polls the operation until it's done.
func (o *EndpointCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datatransfer.Endpoint, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datatransfer.Endpoint)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *EndpointCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datatransfer.Endpoint, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datatransfer.Endpoint)
	return response, err
}

// Create is an operation of Yandex.Cloud Datatransfer Endpoint service.
// It returns an object which should be used to monitor the operation state.
func (c endpointClient) Create(ctx context.Context, in *datatransfer.CreateEndpointRequest, opts ...grpc.CallOption) (*EndpointCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewEndpointServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.CreateEndpointMetadata).GetEndpointId()
		},
		MetadataType: (*datatransfer.CreateEndpointMetadata)(nil),
		ResponseType: (*datatransfer.Endpoint)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &EndpointCreateOperation{*op}, nil
}

// EndpointUpdateOperation is used to monitor the state of Update operations.
type EndpointUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *EndpointUpdateOperation) Metadata() *datatransfer.UpdateEndpointMetadata {
	return o.Operation.Metadata().(*datatransfer.UpdateEndpointMetadata)
}

// Response retrieves the operation response.
func (o *EndpointUpdateOperation) Response() *datatransfer.Endpoint {
	return o.Operation.Response().(*datatransfer.Endpoint)
}

// Wait polls the operation until it's done.
func (o *EndpointUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datatransfer.Endpoint, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datatransfer.Endpoint)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *EndpointUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datatransfer.Endpoint, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datatransfer.Endpoint)
	return response, err
}

// Update is an operation of Yandex.Cloud Datatransfer Endpoint service.
// It returns an object which should be used to monitor the operation state.
func (c endpointClient) Update(ctx context.Context, in *datatransfer.UpdateEndpointRequest, opts ...grpc.CallOption) (*EndpointUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewEndpointServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.UpdateEndpointMetadata).GetEndpointId()
		},
		MetadataType: (*datatransfer.UpdateEndpointMetadata)(nil),
		ResponseType: (*datatransfer.Endpoint)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &EndpointUpdateOperation{*op}, nil
}

// EndpointDeleteOperation is used to monitor the state of Delete operations.
type EndpointDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *EndpointDeleteOperation) Metadata() *datatransfer.DeleteEndpointMetadata {
	return o.Operation.Metadata().(*datatransfer.DeleteEndpointMetadata)
}

// Response retrieves the operation response.
func (o *EndpointDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *EndpointDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *EndpointDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Datatransfer Endpoint service.
// It returns an object which should be used to monitor the operation state.
func (c endpointClient) Delete(ctx context.Context, in *datatransfer.DeleteEndpointRequest, opts ...grpc.CallOption) (*EndpointDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewEndpointServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.DeleteEndpointMetadata).GetEndpointId()
		},
		MetadataType: (*datatransfer.DeleteEndpointMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &EndpointDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c endpointClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, EndpointOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	EndpointGet             = protoreflect.FullName("yandex.cloud.datatransfer.v1.EndpointService.Get")
	EndpointList            = protoreflect.FullName("yandex.cloud.datatransfer.v1.EndpointService.List")
	EndpointCreate          = protoreflect.FullName("yandex.cloud.datatransfer.v1.EndpointService.Create")
	EndpointUpdate          = protoreflect.FullName("yandex.cloud.datatransfer.v1.EndpointService.Update")
	EndpointDelete          = protoreflect.FullName("yandex.cloud.datatransfer.v1.EndpointService.Delete")
	EndpointOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
