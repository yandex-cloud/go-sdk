// Code generated by sdkgen-v2. DO NOT EDIT.
package datatransfersdk

import (
	"context"

	datatransfer "github.com/yandex-cloud/go-genproto/yandex/cloud/datatransfer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TransferClient provides methods for managing Transfer resources of Yandex.Cloud Datatransfer.
type TransferClient interface {
	Create(context.Context, *datatransfer.CreateTransferRequest, ...grpc.CallOption) (*TransferCreateOperation, error)
	Update(context.Context, *datatransfer.UpdateTransferRequest, ...grpc.CallOption) (*TransferUpdateOperation, error)
	Delete(context.Context, *datatransfer.DeleteTransferRequest, ...grpc.CallOption) (*TransferDeleteOperation, error)
	List(context.Context, *datatransfer.ListTransfersRequest, ...grpc.CallOption) (*datatransfer.ListTransfersResponse, error)
	Get(context.Context, *datatransfer.GetTransferRequest, ...grpc.CallOption) (*datatransfer.Transfer, error)
	Deactivate(context.Context, *datatransfer.DeactivateTransferRequest, ...grpc.CallOption) (*TransferDeactivateOperation, error)
	Activate(context.Context, *datatransfer.ActivateTransferRequest, ...grpc.CallOption) (*TransferActivateOperation, error)
}

var _ TransferClient = transferClient{}

type transferClient struct {
	connector transport.Connector
}

// NewTransferClient returns TransferClient implementation.
func NewTransferClient(connector transport.Connector) TransferClient {
	return transferClient{connector}
}

// TransferCreateOperation is used to monitor the state of Create operations.
type TransferCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TransferCreateOperation) Metadata() *datatransfer.CreateTransferMetadata {
	return o.Operation.Metadata().(*datatransfer.CreateTransferMetadata)
}

// Response retrieves the operation response.
func (o *TransferCreateOperation) Response() *datatransfer.Transfer {
	return o.Operation.Response().(*datatransfer.Transfer)
}

// Wait polls the operation until it's done.
func (o *TransferCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datatransfer.Transfer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datatransfer.Transfer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TransferCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datatransfer.Transfer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datatransfer.Transfer)
	return response, err
}

// Create is an operation of Yandex.Cloud Datatransfer Transfer service.
// It returns an object which should be used to monitor the operation state.
func (c transferClient) Create(ctx context.Context, in *datatransfer.CreateTransferRequest, opts ...grpc.CallOption) (*TransferCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewTransferServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.CreateTransferMetadata).GetTransferId()
		},
		MetadataType: (*datatransfer.CreateTransferMetadata)(nil),
		ResponseType: (*datatransfer.Transfer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TransferCreateOperation{*op}, nil
}

// TransferUpdateOperation is used to monitor the state of Update operations.
type TransferUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TransferUpdateOperation) Metadata() *datatransfer.UpdateTransferMetadata {
	return o.Operation.Metadata().(*datatransfer.UpdateTransferMetadata)
}

// Response retrieves the operation response.
func (o *TransferUpdateOperation) Response() *datatransfer.Transfer {
	return o.Operation.Response().(*datatransfer.Transfer)
}

// Wait polls the operation until it's done.
func (o *TransferUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datatransfer.Transfer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datatransfer.Transfer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TransferUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datatransfer.Transfer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datatransfer.Transfer)
	return response, err
}

// Update is an operation of Yandex.Cloud Datatransfer Transfer service.
// It returns an object which should be used to monitor the operation state.
func (c transferClient) Update(ctx context.Context, in *datatransfer.UpdateTransferRequest, opts ...grpc.CallOption) (*TransferUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewTransferServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.UpdateTransferMetadata).GetTransferId()
		},
		MetadataType: (*datatransfer.UpdateTransferMetadata)(nil),
		ResponseType: (*datatransfer.Transfer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TransferUpdateOperation{*op}, nil
}

// TransferDeleteOperation is used to monitor the state of Delete operations.
type TransferDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TransferDeleteOperation) Metadata() *datatransfer.DeleteTransferMetadata {
	return o.Operation.Metadata().(*datatransfer.DeleteTransferMetadata)
}

// Response retrieves the operation response.
func (o *TransferDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TransferDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TransferDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Datatransfer Transfer service.
// It returns an object which should be used to monitor the operation state.
func (c transferClient) Delete(ctx context.Context, in *datatransfer.DeleteTransferRequest, opts ...grpc.CallOption) (*TransferDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewTransferServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.DeleteTransferMetadata).GetTransferId()
		},
		MetadataType: (*datatransfer.DeleteTransferMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TransferDeleteOperation{*op}, nil
}

// List is an operation of Yandex.Cloud Datatransfer Transfer service.
func (c transferClient) List(ctx context.Context, in *datatransfer.ListTransfersRequest, opts ...grpc.CallOption) (*datatransfer.ListTransfersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TransferList, opts...)
	if err != nil {
		return nil, err
	}
	return datatransfer.NewTransferServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Datatransfer Transfer service.
func (c transferClient) Get(ctx context.Context, in *datatransfer.GetTransferRequest, opts ...grpc.CallOption) (*datatransfer.Transfer, error) {
	connection, err := c.connector.GetConnection(ctx, TransferGet, opts...)
	if err != nil {
		return nil, err
	}
	return datatransfer.NewTransferServiceClient(connection).Get(ctx, in, opts...)
}

// TransferDeactivateOperation is used to monitor the state of Deactivate operations.
type TransferDeactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TransferDeactivateOperation) Metadata() *datatransfer.DeactivateTransferMetadata {
	return o.Operation.Metadata().(*datatransfer.DeactivateTransferMetadata)
}

// Response retrieves the operation response.
func (o *TransferDeactivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TransferDeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TransferDeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud Datatransfer Transfer service.
// It returns an object which should be used to monitor the operation state.
func (c transferClient) Deactivate(ctx context.Context, in *datatransfer.DeactivateTransferRequest, opts ...grpc.CallOption) (*TransferDeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferDeactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewTransferServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.DeactivateTransferMetadata).GetTransferId()
		},
		MetadataType: (*datatransfer.DeactivateTransferMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TransferDeactivateOperation{*op}, nil
}

// TransferActivateOperation is used to monitor the state of Activate operations.
type TransferActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TransferActivateOperation) Metadata() *datatransfer.ActivateTransferMetadata {
	return o.Operation.Metadata().(*datatransfer.ActivateTransferMetadata)
}

// Response retrieves the operation response.
func (o *TransferActivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TransferActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TransferActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Activate is an operation of Yandex.Cloud Datatransfer Transfer service.
// It returns an object which should be used to monitor the operation state.
func (c transferClient) Activate(ctx context.Context, in *datatransfer.ActivateTransferRequest, opts ...grpc.CallOption) (*TransferActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datatransfer.NewTransferServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datatransfer.ActivateTransferMetadata).GetTransferId()
		},
		MetadataType: (*datatransfer.ActivateTransferMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TransferActivateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c transferClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TransferOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TransferCreate          = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Create")
	TransferUpdate          = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Update")
	TransferDelete          = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Delete")
	TransferList            = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.List")
	TransferGet             = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Get")
	TransferDeactivate      = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Deactivate")
	TransferActivate        = protoreflect.FullName("yandex.cloud.datatransfer.v1.TransferService.Activate")
	TransferOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
