// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// OsLoginClient provides methods for managing OsLogin resources of Yandex.Cloud OrganizationManager.
type OsLoginClient interface {
	GetSettings(context.Context, *organizationmanager.GetOsLoginSettingsRequest, ...grpc.CallOption) (*organizationmanager.OsLoginSettings, error)
	UpdateSettings(context.Context, *organizationmanager.UpdateOsLoginSettingsRequest, ...grpc.CallOption) (*OsLoginUpdateSettingsOperation, error)
	GetProfile(context.Context, *organizationmanager.GetOsLoginProfileRequest, ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error)
	ListProfiles(context.Context, *organizationmanager.ListOsLoginProfilesRequest, ...grpc.CallOption) (*organizationmanager.ListOsLoginProfilesResponse, error)
	CreateProfile(context.Context, *organizationmanager.CreateOsLoginProfileRequest, ...grpc.CallOption) (*OsLoginCreateProfileOperation, error)
	UpdateProfile(context.Context, *organizationmanager.UpdateOsLoginProfileRequest, ...grpc.CallOption) (*OsLoginUpdateProfileOperation, error)
	SetDefaultProfile(context.Context, *organizationmanager.SetDefaultOsLoginProfileRequest, ...grpc.CallOption) (*OsLoginSetDefaultProfileOperation, error)
	DeleteProfile(context.Context, *organizationmanager.DeleteOsLoginProfileRequest, ...grpc.CallOption) (*OsLoginDeleteProfileOperation, error)
}

var _ OsLoginClient = osLoginClient{}

type osLoginClient struct {
	connector transport.Connector
}

// NewOsLoginClient returns OsLoginClient implementation.
func NewOsLoginClient(connector transport.Connector) OsLoginClient {
	return osLoginClient{connector}
}

// GetSettings is an operation of Yandex.Cloud OrganizationManager OsLogin service.
func (c osLoginClient) GetSettings(ctx context.Context, in *organizationmanager.GetOsLoginSettingsRequest, opts ...grpc.CallOption) (*organizationmanager.OsLoginSettings, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginGetSettings, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOsLoginServiceClient(connection).GetSettings(ctx, in, opts...)
}

// OsLoginUpdateSettingsOperation is used to monitor the state of UpdateSettings operations.
type OsLoginUpdateSettingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OsLoginUpdateSettingsOperation) Metadata() *organizationmanager.UpdateOsLoginSettingsMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateOsLoginSettingsMetadata)
}

// Response retrieves the operation response.
func (o *OsLoginUpdateSettingsOperation) Response() *organizationmanager.OsLoginSettings {
	return o.Operation.Response().(*organizationmanager.OsLoginSettings)
}

// Wait polls the operation until it's done.
func (o *OsLoginUpdateSettingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.OsLoginSettings, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginSettings)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OsLoginUpdateSettingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.OsLoginSettings, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginSettings)
	return response, err
}

// UpdateSettings is an operation of Yandex.Cloud OrganizationManager OsLogin service.
// It returns an object which should be used to monitor the operation state.
func (c osLoginClient) UpdateSettings(ctx context.Context, in *organizationmanager.UpdateOsLoginSettingsRequest, opts ...grpc.CallOption) (*OsLoginUpdateSettingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginUpdateSettings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOsLoginServiceClient(connection).UpdateSettings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.UpdateOsLoginSettingsMetadata)(nil),
		ResponseType: (*organizationmanager.OsLoginSettings)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OsLoginUpdateSettingsOperation{*op}, nil
}

// GetProfile is an operation of Yandex.Cloud OrganizationManager OsLogin service.
func (c osLoginClient) GetProfile(ctx context.Context, in *organizationmanager.GetOsLoginProfileRequest, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginGetProfile, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOsLoginServiceClient(connection).GetProfile(ctx, in, opts...)
}

// ListProfiles is an operation of Yandex.Cloud OrganizationManager OsLogin service.
func (c osLoginClient) ListProfiles(ctx context.Context, in *organizationmanager.ListOsLoginProfilesRequest, opts ...grpc.CallOption) (*organizationmanager.ListOsLoginProfilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginListProfiles, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOsLoginServiceClient(connection).ListProfiles(ctx, in, opts...)
}

// OsLoginCreateProfileOperation is used to monitor the state of CreateProfile operations.
type OsLoginCreateProfileOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OsLoginCreateProfileOperation) Metadata() *organizationmanager.CreateOsLoginProfileMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateOsLoginProfileMetadata)
}

// Response retrieves the operation response.
func (o *OsLoginCreateProfileOperation) Response() *organizationmanager.OsLoginProfile {
	return o.Operation.Response().(*organizationmanager.OsLoginProfile)
}

// Wait polls the operation until it's done.
func (o *OsLoginCreateProfileOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OsLoginCreateProfileOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// CreateProfile is an operation of Yandex.Cloud OrganizationManager OsLogin service.
// It returns an object which should be used to monitor the operation state.
func (c osLoginClient) CreateProfile(ctx context.Context, in *organizationmanager.CreateOsLoginProfileRequest, opts ...grpc.CallOption) (*OsLoginCreateProfileOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginCreateProfile, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOsLoginServiceClient(connection).CreateProfile(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.CreateOsLoginProfileMetadata)(nil),
		ResponseType: (*organizationmanager.OsLoginProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OsLoginCreateProfileOperation{*op}, nil
}

// OsLoginUpdateProfileOperation is used to monitor the state of UpdateProfile operations.
type OsLoginUpdateProfileOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OsLoginUpdateProfileOperation) Metadata() *organizationmanager.UpdateOsLoginProfileMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateOsLoginProfileMetadata)
}

// Response retrieves the operation response.
func (o *OsLoginUpdateProfileOperation) Response() *organizationmanager.OsLoginProfile {
	return o.Operation.Response().(*organizationmanager.OsLoginProfile)
}

// Wait polls the operation until it's done.
func (o *OsLoginUpdateProfileOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OsLoginUpdateProfileOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// UpdateProfile is an operation of Yandex.Cloud OrganizationManager OsLogin service.
// It returns an object which should be used to monitor the operation state.
func (c osLoginClient) UpdateProfile(ctx context.Context, in *organizationmanager.UpdateOsLoginProfileRequest, opts ...grpc.CallOption) (*OsLoginUpdateProfileOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginUpdateProfile, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOsLoginServiceClient(connection).UpdateProfile(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.UpdateOsLoginProfileMetadata)(nil),
		ResponseType: (*organizationmanager.OsLoginProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OsLoginUpdateProfileOperation{*op}, nil
}

// OsLoginSetDefaultProfileOperation is used to monitor the state of SetDefaultProfile operations.
type OsLoginSetDefaultProfileOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OsLoginSetDefaultProfileOperation) Metadata() *organizationmanager.SetDefaultOsLoginProfileMetadata {
	return o.Operation.Metadata().(*organizationmanager.SetDefaultOsLoginProfileMetadata)
}

// Response retrieves the operation response.
func (o *OsLoginSetDefaultProfileOperation) Response() *organizationmanager.OsLoginProfile {
	return o.Operation.Response().(*organizationmanager.OsLoginProfile)
}

// Wait polls the operation until it's done.
func (o *OsLoginSetDefaultProfileOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OsLoginSetDefaultProfileOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.OsLoginProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.OsLoginProfile)
	return response, err
}

// SetDefaultProfile is an operation of Yandex.Cloud OrganizationManager OsLogin service.
// It returns an object which should be used to monitor the operation state.
func (c osLoginClient) SetDefaultProfile(ctx context.Context, in *organizationmanager.SetDefaultOsLoginProfileRequest, opts ...grpc.CallOption) (*OsLoginSetDefaultProfileOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginSetDefaultProfile, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOsLoginServiceClient(connection).SetDefaultProfile(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.SetDefaultOsLoginProfileMetadata)(nil),
		ResponseType: (*organizationmanager.OsLoginProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OsLoginSetDefaultProfileOperation{*op}, nil
}

// OsLoginDeleteProfileOperation is used to monitor the state of DeleteProfile operations.
type OsLoginDeleteProfileOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OsLoginDeleteProfileOperation) Metadata() *organizationmanager.DeleteOsLoginProfileMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteOsLoginProfileMetadata)
}

// Response retrieves the operation response.
func (o *OsLoginDeleteProfileOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *OsLoginDeleteProfileOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OsLoginDeleteProfileOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteProfile is an operation of Yandex.Cloud OrganizationManager OsLogin service.
// It returns an object which should be used to monitor the operation state.
func (c osLoginClient) DeleteProfile(ctx context.Context, in *organizationmanager.DeleteOsLoginProfileRequest, opts ...grpc.CallOption) (*OsLoginDeleteProfileOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginDeleteProfile, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOsLoginServiceClient(connection).DeleteProfile(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.DeleteOsLoginProfileMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OsLoginDeleteProfileOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c osLoginClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OsLoginOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	OsLoginGetSettings       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.GetSettings")
	OsLoginUpdateSettings    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.UpdateSettings")
	OsLoginGetProfile        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.GetProfile")
	OsLoginListProfiles      = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.ListProfiles")
	OsLoginCreateProfile     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.CreateProfile")
	OsLoginUpdateProfile     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.UpdateProfile")
	OsLoginSetDefaultProfile = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.SetDefaultProfile")
	OsLoginDeleteProfile     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OsLoginService.DeleteProfile")
	OsLoginOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
