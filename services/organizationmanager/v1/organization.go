// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// OrganizationClient provides methods for managing Organization resources of Yandex.Cloud OrganizationManager.
type OrganizationClient interface {
	Get(context.Context, *organizationmanager.GetOrganizationRequest, ...grpc.CallOption) (*organizationmanager.Organization, error)
	List(context.Context, *organizationmanager.ListOrganizationsRequest, ...grpc.CallOption) (*organizationmanager.ListOrganizationsResponse, error)
	Update(context.Context, *organizationmanager.UpdateOrganizationRequest, ...grpc.CallOption) (*OrganizationUpdateOperation, error)
	ListOperations(context.Context, *organizationmanager.ListOrganizationOperationsRequest, ...grpc.CallOption) (*organizationmanager.ListOrganizationOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*OrganizationSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*OrganizationUpdateAccessBindingsOperation, error)
}

var _ OrganizationClient = organizationClient{}

type organizationClient struct {
	connector transport.Connector
}

// NewOrganizationClient returns OrganizationClient implementation.
func NewOrganizationClient(connector transport.Connector) OrganizationClient {
	return organizationClient{connector}
}

// Get is an operation of Yandex.Cloud OrganizationManager Organization service.
func (c organizationClient) Get(ctx context.Context, in *organizationmanager.GetOrganizationRequest, opts ...grpc.CallOption) (*organizationmanager.Organization, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationGet, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOrganizationServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud OrganizationManager Organization service.
func (c organizationClient) List(ctx context.Context, in *organizationmanager.ListOrganizationsRequest, opts ...grpc.CallOption) (*organizationmanager.ListOrganizationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationList, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOrganizationServiceClient(connection).List(ctx, in, opts...)
}

// OrganizationUpdateOperation is used to monitor the state of Update operations.
type OrganizationUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OrganizationUpdateOperation) Metadata() *organizationmanager.UpdateOrganizationMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateOrganizationMetadata)
}

// Response retrieves the operation response.
func (o *OrganizationUpdateOperation) Response() *organizationmanager.Organization {
	return o.Operation.Response().(*organizationmanager.Organization)
}

// Wait polls the operation until it's done.
func (o *OrganizationUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.Organization, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.Organization)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OrganizationUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.Organization, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.Organization)
	return response, err
}

// Update is an operation of Yandex.Cloud OrganizationManager Organization service.
// It returns an object which should be used to monitor the operation state.
func (c organizationClient) Update(ctx context.Context, in *organizationmanager.UpdateOrganizationRequest, opts ...grpc.CallOption) (*OrganizationUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOrganizationServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateOrganizationMetadata).GetOrganizationId()
		},
		MetadataType: (*organizationmanager.UpdateOrganizationMetadata)(nil),
		ResponseType: (*organizationmanager.Organization)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OrganizationUpdateOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud OrganizationManager Organization service.
func (c organizationClient) ListOperations(ctx context.Context, in *organizationmanager.ListOrganizationOperationsRequest, opts ...grpc.CallOption) (*organizationmanager.ListOrganizationOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOrganizationServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud OrganizationManager Organization service.
func (c organizationClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewOrganizationServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// OrganizationSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type OrganizationSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OrganizationSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *OrganizationSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *OrganizationSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OrganizationSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud OrganizationManager Organization service.
// It returns an object which should be used to monitor the operation state.
func (c organizationClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*OrganizationSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOrganizationServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OrganizationSetAccessBindingsOperation{*op}, nil
}

// OrganizationUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type OrganizationUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OrganizationUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *OrganizationUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *OrganizationUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OrganizationUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud OrganizationManager Organization service.
// It returns an object which should be used to monitor the operation state.
func (c organizationClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*OrganizationUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewOrganizationServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OrganizationUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c organizationClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OrganizationOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	OrganizationGet                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.Get")
	OrganizationList                 = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.List")
	OrganizationUpdate               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.Update")
	OrganizationListOperations       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.ListOperations")
	OrganizationListAccessBindings   = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.ListAccessBindings")
	OrganizationSetAccessBindings    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.SetAccessBindings")
	OrganizationUpdateAccessBindings = protoreflect.FullName("yandex.cloud.organizationmanager.v1.OrganizationService.UpdateAccessBindings")
	OrganizationOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
