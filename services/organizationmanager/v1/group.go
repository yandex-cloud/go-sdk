// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GroupClient provides methods for managing Group resources of Yandex.Cloud OrganizationManager.
type GroupClient interface {
	Get(context.Context, *organizationmanager.GetGroupRequest, ...grpc.CallOption) (*organizationmanager.Group, error)
	ResolveExternal(context.Context, *organizationmanager.ResolveExternalGroupRequest, ...grpc.CallOption) (*organizationmanager.Group, error)
	List(context.Context, *organizationmanager.ListGroupsRequest, ...grpc.CallOption) (*organizationmanager.ListGroupsResponse, error)
	ListExternal(context.Context, *organizationmanager.ListExternalGroupsRequest, ...grpc.CallOption) (*organizationmanager.ListExternalGroupsResponse, error)
	Create(context.Context, *organizationmanager.CreateGroupRequest, ...grpc.CallOption) (*GroupCreateOperation, error)
	CreateExternal(context.Context, *organizationmanager.CreateExternalGroupRequest, ...grpc.CallOption) (*GroupCreateExternalOperation, error)
	Update(context.Context, *organizationmanager.UpdateGroupRequest, ...grpc.CallOption) (*GroupUpdateOperation, error)
	ConvertToExternal(context.Context, *organizationmanager.ConvertToExternalGroupRequest, ...grpc.CallOption) (*GroupConvertToExternalOperation, error)
	ConvertAllToBasic(context.Context, *organizationmanager.ConvertAllToBasicGroupsRequest, ...grpc.CallOption) (*GroupConvertAllToBasicOperation, error)
	Delete(context.Context, *organizationmanager.DeleteGroupRequest, ...grpc.CallOption) (*GroupDeleteOperation, error)
	ListOperations(context.Context, *organizationmanager.ListGroupOperationsRequest, ...grpc.CallOption) (*organizationmanager.ListGroupOperationsResponse, error)
	ListMembers(context.Context, *organizationmanager.ListGroupMembersRequest, ...grpc.CallOption) (*organizationmanager.ListGroupMembersResponse, error)
	UpdateMembers(context.Context, *organizationmanager.UpdateGroupMembersRequest, ...grpc.CallOption) (*GroupUpdateMembersOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*GroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*GroupUpdateAccessBindingsOperation, error)
	ListEffective(context.Context, *organizationmanager.ListEffectiveRequest, ...grpc.CallOption) (*organizationmanager.ListEffectiveResponse, error)
}

var _ GroupClient = groupClient{}

type groupClient struct {
	connector transport.Connector
}

// NewGroupClient returns GroupClient implementation.
func NewGroupClient(connector transport.Connector) GroupClient {
	return groupClient{connector}
}

// Get is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) Get(ctx context.Context, in *organizationmanager.GetGroupRequest, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	connection, err := c.connector.GetConnection(ctx, GroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).Get(ctx, in, opts...)
}

// ResolveExternal is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ResolveExternal(ctx context.Context, in *organizationmanager.ResolveExternalGroupRequest, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	connection, err := c.connector.GetConnection(ctx, GroupResolveExternal, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ResolveExternal(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) List(ctx context.Context, in *organizationmanager.ListGroupsRequest, opts ...grpc.CallOption) (*organizationmanager.ListGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupList, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).List(ctx, in, opts...)
}

// ListExternal is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ListExternal(ctx context.Context, in *organizationmanager.ListExternalGroupsRequest, opts ...grpc.CallOption) (*organizationmanager.ListExternalGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupListExternal, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ListExternal(ctx, in, opts...)
}

// GroupCreateOperation is used to monitor the state of Create operations.
type GroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupCreateOperation) Metadata() *organizationmanager.CreateGroupMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateGroupMetadata)
}

// Response retrieves the operation response.
func (o *GroupCreateOperation) Response() *organizationmanager.Group {
	return o.Operation.Response().(*organizationmanager.Group)
}

// Wait polls the operation until it's done.
func (o *GroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// Create is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) Create(ctx context.Context, in *organizationmanager.CreateGroupRequest, opts ...grpc.CallOption) (*GroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.CreateGroupMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.CreateGroupMetadata)(nil),
		ResponseType: (*organizationmanager.Group)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupCreateOperation{*op}, nil
}

// GroupCreateExternalOperation is used to monitor the state of CreateExternal operations.
type GroupCreateExternalOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupCreateExternalOperation) Metadata() *organizationmanager.CreateExternalGroupMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateExternalGroupMetadata)
}

// Response retrieves the operation response.
func (o *GroupCreateExternalOperation) Response() *organizationmanager.Group {
	return o.Operation.Response().(*organizationmanager.Group)
}

// Wait polls the operation until it's done.
func (o *GroupCreateExternalOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupCreateExternalOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// CreateExternal is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) CreateExternal(ctx context.Context, in *organizationmanager.CreateExternalGroupRequest, opts ...grpc.CallOption) (*GroupCreateExternalOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupCreateExternal, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).CreateExternal(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.CreateExternalGroupMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.CreateExternalGroupMetadata)(nil),
		ResponseType: (*organizationmanager.Group)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupCreateExternalOperation{*op}, nil
}

// GroupUpdateOperation is used to monitor the state of Update operations.
type GroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupUpdateOperation) Metadata() *organizationmanager.UpdateGroupMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateGroupMetadata)
}

// Response retrieves the operation response.
func (o *GroupUpdateOperation) Response() *organizationmanager.Group {
	return o.Operation.Response().(*organizationmanager.Group)
}

// Wait polls the operation until it's done.
func (o *GroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// Update is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) Update(ctx context.Context, in *organizationmanager.UpdateGroupRequest, opts ...grpc.CallOption) (*GroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateGroupMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.UpdateGroupMetadata)(nil),
		ResponseType: (*organizationmanager.Group)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupUpdateOperation{*op}, nil
}

// GroupConvertToExternalOperation is used to monitor the state of ConvertToExternal operations.
type GroupConvertToExternalOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupConvertToExternalOperation) Metadata() *organizationmanager.ConvertToExternalGroupMetadata {
	return o.Operation.Metadata().(*organizationmanager.ConvertToExternalGroupMetadata)
}

// Response retrieves the operation response.
func (o *GroupConvertToExternalOperation) Response() *organizationmanager.Group {
	return o.Operation.Response().(*organizationmanager.Group)
}

// Wait polls the operation until it's done.
func (o *GroupConvertToExternalOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupConvertToExternalOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.Group, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.Group)
	return response, err
}

// ConvertToExternal is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) ConvertToExternal(ctx context.Context, in *organizationmanager.ConvertToExternalGroupRequest, opts ...grpc.CallOption) (*GroupConvertToExternalOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupConvertToExternal, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).ConvertToExternal(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.ConvertToExternalGroupMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.ConvertToExternalGroupMetadata)(nil),
		ResponseType: (*organizationmanager.Group)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupConvertToExternalOperation{*op}, nil
}

// GroupConvertAllToBasicOperation is used to monitor the state of ConvertAllToBasic operations.
type GroupConvertAllToBasicOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupConvertAllToBasicOperation) Metadata() *organizationmanager.ConvertAllToBasicGroupsMetadata {
	return o.Operation.Metadata().(*organizationmanager.ConvertAllToBasicGroupsMetadata)
}

// Response retrieves the operation response.
func (o *GroupConvertAllToBasicOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GroupConvertAllToBasicOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupConvertAllToBasicOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// ConvertAllToBasic is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) ConvertAllToBasic(ctx context.Context, in *organizationmanager.ConvertAllToBasicGroupsRequest, opts ...grpc.CallOption) (*GroupConvertAllToBasicOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupConvertAllToBasic, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).ConvertAllToBasic(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.ConvertAllToBasicGroupsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupConvertAllToBasicOperation{*op}, nil
}

// GroupDeleteOperation is used to monitor the state of Delete operations.
type GroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupDeleteOperation) Metadata() *organizationmanager.DeleteGroupMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteGroupMetadata)
}

// Response retrieves the operation response.
func (o *GroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) Delete(ctx context.Context, in *organizationmanager.DeleteGroupRequest, opts ...grpc.CallOption) (*GroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.DeleteGroupMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.DeleteGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ListOperations(ctx context.Context, in *organizationmanager.ListGroupOperationsRequest, opts ...grpc.CallOption) (*organizationmanager.ListGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListMembers is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ListMembers(ctx context.Context, in *organizationmanager.ListGroupMembersRequest, opts ...grpc.CallOption) (*organizationmanager.ListGroupMembersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupListMembers, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ListMembers(ctx, in, opts...)
}

// GroupUpdateMembersOperation is used to monitor the state of UpdateMembers operations.
type GroupUpdateMembersOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupUpdateMembersOperation) Metadata() *organizationmanager.UpdateGroupMembersMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateGroupMembersMetadata)
}

// Response retrieves the operation response.
func (o *GroupUpdateMembersOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GroupUpdateMembersOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupUpdateMembersOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateMembers is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) UpdateMembers(ctx context.Context, in *organizationmanager.UpdateGroupMembersRequest, opts ...grpc.CallOption) (*GroupUpdateMembersOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupUpdateMembers, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).UpdateMembers(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateGroupMembersMetadata).GetGroupId()
		},
		MetadataType: (*organizationmanager.UpdateGroupMembersMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupUpdateMembersOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// GroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type GroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *GroupSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *GroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*GroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupSetAccessBindingsOperation{*op}, nil
}

// GroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type GroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *GroupUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *GroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud OrganizationManager Group service.
// It returns an object which should be used to monitor the operation state.
func (c groupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*GroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupUpdateAccessBindingsOperation{*op}, nil
}

// ListEffective is an operation of Yandex.Cloud OrganizationManager Group service.
func (c groupClient) ListEffective(ctx context.Context, in *organizationmanager.ListEffectiveRequest, opts ...grpc.CallOption) (*organizationmanager.ListEffectiveResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupListEffective, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupServiceClient(connection).ListEffective(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c groupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	GroupGet                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.Get")
	GroupResolveExternal      = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ResolveExternal")
	GroupList                 = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.List")
	GroupListExternal         = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ListExternal")
	GroupCreate               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.Create")
	GroupCreateExternal       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.CreateExternal")
	GroupUpdate               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.Update")
	GroupConvertToExternal    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ConvertToExternal")
	GroupConvertAllToBasic    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ConvertAllToBasic")
	GroupDelete               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.Delete")
	GroupListOperations       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ListOperations")
	GroupListMembers          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ListMembers")
	GroupUpdateMembers        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.UpdateMembers")
	GroupListAccessBindings   = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ListAccessBindings")
	GroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.SetAccessBindings")
	GroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.UpdateAccessBindings")
	GroupListEffective        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupService.ListEffective")
	GroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
