// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MfaEnforcementClient provides methods for managing MfaEnforcement resources of Yandex.Cloud OrganizationManager.
type MfaEnforcementClient interface {
	Create(context.Context, *organizationmanager.CreateMfaEnforcementRequest, ...grpc.CallOption) (*MfaEnforcementCreateOperation, error)
	Update(context.Context, *organizationmanager.UpdateMfaEnforcementRequest, ...grpc.CallOption) (*MfaEnforcementUpdateOperation, error)
	Activate(context.Context, *organizationmanager.ActivateMfaEnforcementRequest, ...grpc.CallOption) (*MfaEnforcementActivateOperation, error)
	Deactivate(context.Context, *organizationmanager.DeactivateMfaEnforcementRequest, ...grpc.CallOption) (*MfaEnforcementDeactivateOperation, error)
	Delete(context.Context, *organizationmanager.DeleteMfaEnforcementRequest, ...grpc.CallOption) (*MfaEnforcementDeleteOperation, error)
	Get(context.Context, *organizationmanager.GetMfaEnforcementRequest, ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error)
	List(context.Context, *organizationmanager.ListMfaEnforcementsRequest, ...grpc.CallOption) (*organizationmanager.ListMfaEnforcementsResponse, error)
	UpdateAudience(context.Context, *organizationmanager.UpdateAudienceRequest, ...grpc.CallOption) (*MfaEnforcementUpdateAudienceOperation, error)
	ListAudience(context.Context, *organizationmanager.ListAudienceRequest, ...grpc.CallOption) (*organizationmanager.ListAudienceResponse, error)
}

var _ MfaEnforcementClient = mfaEnforcementClient{}

type mfaEnforcementClient struct {
	connector transport.Connector
}

// NewMfaEnforcementClient returns MfaEnforcementClient implementation.
func NewMfaEnforcementClient(connector transport.Connector) MfaEnforcementClient {
	return mfaEnforcementClient{connector}
}

// MfaEnforcementCreateOperation is used to monitor the state of Create operations.
type MfaEnforcementCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementCreateOperation) Metadata() *organizationmanager.CreateMfaEnforcementMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateMfaEnforcementMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementCreateOperation) Response() *organizationmanager.MfaEnforcement {
	return o.Operation.Response().(*organizationmanager.MfaEnforcement)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// Create is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) Create(ctx context.Context, in *organizationmanager.CreateMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcementCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.CreateMfaEnforcementMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.CreateMfaEnforcementMetadata)(nil),
		ResponseType: (*organizationmanager.MfaEnforcement)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementCreateOperation{*op}, nil
}

// MfaEnforcementUpdateOperation is used to monitor the state of Update operations.
type MfaEnforcementUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementUpdateOperation) Metadata() *organizationmanager.UpdateMfaEnforcementMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateMfaEnforcementMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementUpdateOperation) Response() *organizationmanager.MfaEnforcement {
	return o.Operation.Response().(*organizationmanager.MfaEnforcement)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// Update is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) Update(ctx context.Context, in *organizationmanager.UpdateMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcementUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateMfaEnforcementMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.UpdateMfaEnforcementMetadata)(nil),
		ResponseType: (*organizationmanager.MfaEnforcement)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementUpdateOperation{*op}, nil
}

// MfaEnforcementActivateOperation is used to monitor the state of Activate operations.
type MfaEnforcementActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementActivateOperation) Metadata() *organizationmanager.ActivateMfaEnforcementMetadata {
	return o.Operation.Metadata().(*organizationmanager.ActivateMfaEnforcementMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementActivateOperation) Response() *organizationmanager.MfaEnforcement {
	return o.Operation.Response().(*organizationmanager.MfaEnforcement)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// Activate is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) Activate(ctx context.Context, in *organizationmanager.ActivateMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcementActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.ActivateMfaEnforcementMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.ActivateMfaEnforcementMetadata)(nil),
		ResponseType: (*organizationmanager.MfaEnforcement)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementActivateOperation{*op}, nil
}

// MfaEnforcementDeactivateOperation is used to monitor the state of Deactivate operations.
type MfaEnforcementDeactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementDeactivateOperation) Metadata() *organizationmanager.DeactivateMfaEnforcementMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeactivateMfaEnforcementMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementDeactivateOperation) Response() *organizationmanager.MfaEnforcement {
	return o.Operation.Response().(*organizationmanager.MfaEnforcement)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementDeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementDeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.MfaEnforcement)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) Deactivate(ctx context.Context, in *organizationmanager.DeactivateMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcementDeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementDeactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.DeactivateMfaEnforcementMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.DeactivateMfaEnforcementMetadata)(nil),
		ResponseType: (*organizationmanager.MfaEnforcement)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementDeactivateOperation{*op}, nil
}

// MfaEnforcementDeleteOperation is used to monitor the state of Delete operations.
type MfaEnforcementDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementDeleteOperation) Metadata() *organizationmanager.DeleteMfaEnforcementMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteMfaEnforcementMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) Delete(ctx context.Context, in *organizationmanager.DeleteMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcementDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.DeleteMfaEnforcementMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.DeleteMfaEnforcementMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
func (c mfaEnforcementClient) Get(ctx context.Context, in *organizationmanager.GetMfaEnforcementRequest, opts ...grpc.CallOption) (*organizationmanager.MfaEnforcement, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementGet, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewMfaEnforcementServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
func (c mfaEnforcementClient) List(ctx context.Context, in *organizationmanager.ListMfaEnforcementsRequest, opts ...grpc.CallOption) (*organizationmanager.ListMfaEnforcementsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementList, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewMfaEnforcementServiceClient(connection).List(ctx, in, opts...)
}

// MfaEnforcementUpdateAudienceOperation is used to monitor the state of UpdateAudience operations.
type MfaEnforcementUpdateAudienceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MfaEnforcementUpdateAudienceOperation) Metadata() *organizationmanager.UpdateAudienceMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateAudienceMetadata)
}

// Response retrieves the operation response.
func (o *MfaEnforcementUpdateAudienceOperation) Response() *organizationmanager.UpdateAudienceResponse {
	return o.Operation.Response().(*organizationmanager.UpdateAudienceResponse)
}

// Wait polls the operation until it's done.
func (o *MfaEnforcementUpdateAudienceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.UpdateAudienceResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.UpdateAudienceResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MfaEnforcementUpdateAudienceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.UpdateAudienceResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.UpdateAudienceResponse)
	return response, err
}

// UpdateAudience is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
// It returns an object which should be used to monitor the operation state.
func (c mfaEnforcementClient) UpdateAudience(ctx context.Context, in *organizationmanager.UpdateAudienceRequest, opts ...grpc.CallOption) (*MfaEnforcementUpdateAudienceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementUpdateAudience, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewMfaEnforcementServiceClient(connection).UpdateAudience(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateAudienceMetadata).GetMfaEnforcementId()
		},
		MetadataType: (*organizationmanager.UpdateAudienceMetadata)(nil),
		ResponseType: (*organizationmanager.UpdateAudienceResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MfaEnforcementUpdateAudienceOperation{*op}, nil
}

// ListAudience is an operation of Yandex.Cloud OrganizationManager MfaEnforcement service.
func (c mfaEnforcementClient) ListAudience(ctx context.Context, in *organizationmanager.ListAudienceRequest, opts ...grpc.CallOption) (*organizationmanager.ListAudienceResponse, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementListAudience, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewMfaEnforcementServiceClient(connection).ListAudience(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c mfaEnforcementClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MfaEnforcementOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	MfaEnforcementCreate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Create")
	MfaEnforcementUpdate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Update")
	MfaEnforcementActivate        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Activate")
	MfaEnforcementDeactivate      = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Deactivate")
	MfaEnforcementDelete          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Delete")
	MfaEnforcementGet             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.Get")
	MfaEnforcementList            = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.List")
	MfaEnforcementUpdateAudience  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.UpdateAudience")
	MfaEnforcementListAudience    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.MfaEnforcementService.ListAudience")
	MfaEnforcementOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
