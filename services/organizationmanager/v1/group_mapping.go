// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GroupMappingClient provides methods for managing GroupMapping resources of Yandex.Cloud OrganizationManager.
type GroupMappingClient interface {
	Get(context.Context, *organizationmanager.GetGroupMappingRequest, ...grpc.CallOption) (*organizationmanager.GetGroupMappingResponse, error)
	Create(context.Context, *organizationmanager.CreateGroupMappingRequest, ...grpc.CallOption) (*GroupMappingCreateOperation, error)
	Update(context.Context, *organizationmanager.UpdateGroupMappingRequest, ...grpc.CallOption) (*GroupMappingUpdateOperation, error)
	Delete(context.Context, *organizationmanager.DeleteGroupMappingRequest, ...grpc.CallOption) (*GroupMappingDeleteOperation, error)
	ListItems(context.Context, *organizationmanager.ListGroupMappingItemsRequest, ...grpc.CallOption) (*organizationmanager.ListGroupMappingItemsResponse, error)
	UpdateItems(context.Context, *organizationmanager.UpdateGroupMappingItemsRequest, ...grpc.CallOption) (*GroupMappingUpdateItemsOperation, error)
}

var _ GroupMappingClient = groupMappingClient{}

type groupMappingClient struct {
	connector transport.Connector
}

// NewGroupMappingClient returns GroupMappingClient implementation.
func NewGroupMappingClient(connector transport.Connector) GroupMappingClient {
	return groupMappingClient{connector}
}

// Get is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
func (c groupMappingClient) Get(ctx context.Context, in *organizationmanager.GetGroupMappingRequest, opts ...grpc.CallOption) (*organizationmanager.GetGroupMappingResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingGet, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupMappingServiceClient(connection).Get(ctx, in, opts...)
}

// GroupMappingCreateOperation is used to monitor the state of Create operations.
type GroupMappingCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupMappingCreateOperation) Metadata() *organizationmanager.CreateGroupMappingMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateGroupMappingMetadata)
}

// Response retrieves the operation response.
func (o *GroupMappingCreateOperation) Response() *organizationmanager.GroupMapping {
	return o.Operation.Response().(*organizationmanager.GroupMapping)
}

// Wait polls the operation until it's done.
func (o *GroupMappingCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.GroupMapping, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.GroupMapping)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupMappingCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.GroupMapping, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.GroupMapping)
	return response, err
}

// Create is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
// It returns an object which should be used to monitor the operation state.
func (c groupMappingClient) Create(ctx context.Context, in *organizationmanager.CreateGroupMappingRequest, opts ...grpc.CallOption) (*GroupMappingCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupMappingServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.CreateGroupMappingMetadata)(nil),
		ResponseType: (*organizationmanager.GroupMapping)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupMappingCreateOperation{*op}, nil
}

// GroupMappingUpdateOperation is used to monitor the state of Update operations.
type GroupMappingUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupMappingUpdateOperation) Metadata() *organizationmanager.UpdateGroupMappingMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateGroupMappingMetadata)
}

// Response retrieves the operation response.
func (o *GroupMappingUpdateOperation) Response() *organizationmanager.GroupMapping {
	return o.Operation.Response().(*organizationmanager.GroupMapping)
}

// Wait polls the operation until it's done.
func (o *GroupMappingUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.GroupMapping, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.GroupMapping)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupMappingUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.GroupMapping, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.GroupMapping)
	return response, err
}

// Update is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
// It returns an object which should be used to monitor the operation state.
func (c groupMappingClient) Update(ctx context.Context, in *organizationmanager.UpdateGroupMappingRequest, opts ...grpc.CallOption) (*GroupMappingUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupMappingServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.UpdateGroupMappingMetadata)(nil),
		ResponseType: (*organizationmanager.GroupMapping)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupMappingUpdateOperation{*op}, nil
}

// GroupMappingDeleteOperation is used to monitor the state of Delete operations.
type GroupMappingDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupMappingDeleteOperation) Metadata() *organizationmanager.DeleteGroupMappingMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteGroupMappingMetadata)
}

// Response retrieves the operation response.
func (o *GroupMappingDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GroupMappingDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupMappingDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
// It returns an object which should be used to monitor the operation state.
func (c groupMappingClient) Delete(ctx context.Context, in *organizationmanager.DeleteGroupMappingRequest, opts ...grpc.CallOption) (*GroupMappingDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupMappingServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.DeleteGroupMappingMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupMappingDeleteOperation{*op}, nil
}

// ListItems is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
func (c groupMappingClient) ListItems(ctx context.Context, in *organizationmanager.ListGroupMappingItemsRequest, opts ...grpc.CallOption) (*organizationmanager.ListGroupMappingItemsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingListItems, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewGroupMappingServiceClient(connection).ListItems(ctx, in, opts...)
}

// GroupMappingUpdateItemsOperation is used to monitor the state of UpdateItems operations.
type GroupMappingUpdateItemsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GroupMappingUpdateItemsOperation) Metadata() *organizationmanager.UpdateGroupMappingItemsMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateGroupMappingItemsMetadata)
}

// Response retrieves the operation response.
func (o *GroupMappingUpdateItemsOperation) Response() *organizationmanager.UpdateGroupMappingItemsResponse {
	return o.Operation.Response().(*organizationmanager.UpdateGroupMappingItemsResponse)
}

// Wait polls the operation until it's done.
func (o *GroupMappingUpdateItemsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.UpdateGroupMappingItemsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.UpdateGroupMappingItemsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GroupMappingUpdateItemsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.UpdateGroupMappingItemsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.UpdateGroupMappingItemsResponse)
	return response, err
}

// UpdateItems is an operation of Yandex.Cloud OrganizationManager GroupMapping service.
// It returns an object which should be used to monitor the operation state.
func (c groupMappingClient) UpdateItems(ctx context.Context, in *organizationmanager.UpdateGroupMappingItemsRequest, opts ...grpc.CallOption) (*GroupMappingUpdateItemsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingUpdateItems, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewGroupMappingServiceClient(connection).UpdateItems(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.UpdateGroupMappingItemsMetadata)(nil),
		ResponseType: (*organizationmanager.UpdateGroupMappingItemsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GroupMappingUpdateItemsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c groupMappingClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GroupMappingOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	GroupMappingGet             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.Get")
	GroupMappingCreate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.Create")
	GroupMappingUpdate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.Update")
	GroupMappingDelete          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.Delete")
	GroupMappingListItems       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.ListItems")
	GroupMappingUpdateItems     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.GroupMappingService.UpdateItems")
	GroupMappingOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
