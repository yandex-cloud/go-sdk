// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// UserClient provides methods for managing User resources of Yandex.Cloud OrganizationManager.
type UserClient interface {
	ListMembers(context.Context, *organizationmanager.ListMembersRequest, ...grpc.CallOption) (*organizationmanager.ListMembersResponse, error)
	DeleteMembership(context.Context, *organizationmanager.DeleteMembershipRequest, ...grpc.CallOption) (*UserDeleteMembershipOperation, error)
}

var _ UserClient = userClient{}

type userClient struct {
	connector transport.Connector
}

// NewUserClient returns UserClient implementation.
func NewUserClient(connector transport.Connector) UserClient {
	return userClient{connector}
}

// ListMembers is an operation of Yandex.Cloud OrganizationManager User service.
func (c userClient) ListMembers(ctx context.Context, in *organizationmanager.ListMembersRequest, opts ...grpc.CallOption) (*organizationmanager.ListMembersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserListMembers, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewUserServiceClient(connection).ListMembers(ctx, in, opts...)
}

// UserDeleteMembershipOperation is used to monitor the state of DeleteMembership operations.
type UserDeleteMembershipOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserDeleteMembershipOperation) Metadata() *organizationmanager.DeleteMembershipMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteMembershipMetadata)
}

// Response retrieves the operation response.
func (o *UserDeleteMembershipOperation) Response() *organizationmanager.DeleteMembershipResponse {
	return o.Operation.Response().(*organizationmanager.DeleteMembershipResponse)
}

// Wait polls the operation until it's done.
func (o *UserDeleteMembershipOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.DeleteMembershipResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.DeleteMembershipResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserDeleteMembershipOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.DeleteMembershipResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.DeleteMembershipResponse)
	return response, err
}

// DeleteMembership is an operation of Yandex.Cloud OrganizationManager User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) DeleteMembership(ctx context.Context, in *organizationmanager.DeleteMembershipRequest, opts ...grpc.CallOption) (*UserDeleteMembershipOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserDeleteMembership, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewUserServiceClient(connection).DeleteMembership(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*organizationmanager.DeleteMembershipMetadata)(nil),
		ResponseType: (*organizationmanager.DeleteMembershipResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserDeleteMembershipOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c userClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserListMembers      = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserService.ListMembers")
	UserDeleteMembership = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserService.DeleteMembership")
	UserOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
