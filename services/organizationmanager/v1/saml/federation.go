// Code generated by sdkgen-v2. DO NOT EDIT.
package samlsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	saml "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/saml"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// FederationClient provides methods for managing Federation resources of Yandex.Cloud Saml.
type FederationClient interface {
	Get(context.Context, *saml.GetFederationRequest, ...grpc.CallOption) (*saml.Federation, error)
	List(context.Context, *saml.ListFederationsRequest, ...grpc.CallOption) (*saml.ListFederationsResponse, error)
	Create(context.Context, *saml.CreateFederationRequest, ...grpc.CallOption) (*FederationCreateOperation, error)
	Update(context.Context, *saml.UpdateFederationRequest, ...grpc.CallOption) (*FederationUpdateOperation, error)
	Delete(context.Context, *saml.DeleteFederationRequest, ...grpc.CallOption) (*FederationDeleteOperation, error)
	AddUserAccounts(context.Context, *saml.AddFederatedUserAccountsRequest, ...grpc.CallOption) (*FederationAddUserAccountsOperation, error)
	DeleteUserAccounts(context.Context, *saml.DeleteFederatedUserAccountsRequest, ...grpc.CallOption) (*FederationDeleteUserAccountsOperation, error)
	ListUserAccounts(context.Context, *saml.ListFederatedUserAccountsRequest, ...grpc.CallOption) (*saml.ListFederatedUserAccountsResponse, error)
	ListOperations(context.Context, *saml.ListFederationOperationsRequest, ...grpc.CallOption) (*saml.ListFederationOperationsResponse, error)
	GetDomain(context.Context, *saml.GetFederationDomainRequest, ...grpc.CallOption) (*saml.Domain, error)
	ListDomains(context.Context, *saml.ListFederationDomainsRequest, ...grpc.CallOption) (*saml.ListFederationDomainsResponse, error)
	AddDomain(context.Context, *saml.AddFederationDomainRequest, ...grpc.CallOption) (*FederationAddDomainOperation, error)
	ValidateDomain(context.Context, *saml.ValidateFederationDomainRequest, ...grpc.CallOption) (*FederationValidateDomainOperation, error)
	DeleteDomain(context.Context, *saml.DeleteFederationDomainRequest, ...grpc.CallOption) (*FederationDeleteDomainOperation, error)
}

var _ FederationClient = federationClient{}

type federationClient struct {
	connector transport.Connector
}

// NewFederationClient returns FederationClient implementation.
func NewFederationClient(connector transport.Connector) FederationClient {
	return federationClient{connector}
}

// Get is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) Get(ctx context.Context, in *saml.GetFederationRequest, opts ...grpc.CallOption) (*saml.Federation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationGet, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) List(ctx context.Context, in *saml.ListFederationsRequest, opts ...grpc.CallOption) (*saml.ListFederationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FederationList, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).List(ctx, in, opts...)
}

// FederationCreateOperation is used to monitor the state of Create operations.
type FederationCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationCreateOperation) Metadata() *saml.CreateFederationMetadata {
	return o.Operation.Metadata().(*saml.CreateFederationMetadata)
}

// Response retrieves the operation response.
func (o *FederationCreateOperation) Response() *saml.Federation {
	return o.Operation.Response().(*saml.Federation)
}

// Wait polls the operation until it's done.
func (o *FederationCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Federation, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Federation)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Federation, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Federation)
	return response, err
}

// Create is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) Create(ctx context.Context, in *saml.CreateFederationRequest, opts ...grpc.CallOption) (*FederationCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.CreateFederationMetadata).GetFederationId()
		},
		MetadataType: (*saml.CreateFederationMetadata)(nil),
		ResponseType: (*saml.Federation)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationCreateOperation{*op}, nil
}

// FederationUpdateOperation is used to monitor the state of Update operations.
type FederationUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationUpdateOperation) Metadata() *saml.UpdateFederationMetadata {
	return o.Operation.Metadata().(*saml.UpdateFederationMetadata)
}

// Response retrieves the operation response.
func (o *FederationUpdateOperation) Response() *saml.Federation {
	return o.Operation.Response().(*saml.Federation)
}

// Wait polls the operation until it's done.
func (o *FederationUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Federation, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Federation)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Federation, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Federation)
	return response, err
}

// Update is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) Update(ctx context.Context, in *saml.UpdateFederationRequest, opts ...grpc.CallOption) (*FederationUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.UpdateFederationMetadata).GetFederationId()
		},
		MetadataType: (*saml.UpdateFederationMetadata)(nil),
		ResponseType: (*saml.Federation)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationUpdateOperation{*op}, nil
}

// FederationDeleteOperation is used to monitor the state of Delete operations.
type FederationDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationDeleteOperation) Metadata() *saml.DeleteFederationMetadata {
	return o.Operation.Metadata().(*saml.DeleteFederationMetadata)
}

// Response retrieves the operation response.
func (o *FederationDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FederationDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) Delete(ctx context.Context, in *saml.DeleteFederationRequest, opts ...grpc.CallOption) (*FederationDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.DeleteFederationMetadata).GetFederationId()
		},
		MetadataType: (*saml.DeleteFederationMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationDeleteOperation{*op}, nil
}

// FederationAddUserAccountsOperation is used to monitor the state of AddUserAccounts operations.
type FederationAddUserAccountsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationAddUserAccountsOperation) Metadata() *saml.AddFederatedUserAccountsMetadata {
	return o.Operation.Metadata().(*saml.AddFederatedUserAccountsMetadata)
}

// Response retrieves the operation response.
func (o *FederationAddUserAccountsOperation) Response() *saml.AddFederatedUserAccountsResponse {
	return o.Operation.Response().(*saml.AddFederatedUserAccountsResponse)
}

// Wait polls the operation until it's done.
func (o *FederationAddUserAccountsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.AddFederatedUserAccountsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.AddFederatedUserAccountsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationAddUserAccountsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.AddFederatedUserAccountsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.AddFederatedUserAccountsResponse)
	return response, err
}

// AddUserAccounts is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) AddUserAccounts(ctx context.Context, in *saml.AddFederatedUserAccountsRequest, opts ...grpc.CallOption) (*FederationAddUserAccountsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationAddUserAccounts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).AddUserAccounts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.AddFederatedUserAccountsMetadata).GetFederationId()
		},
		MetadataType: (*saml.AddFederatedUserAccountsMetadata)(nil),
		ResponseType: (*saml.AddFederatedUserAccountsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationAddUserAccountsOperation{*op}, nil
}

// FederationDeleteUserAccountsOperation is used to monitor the state of DeleteUserAccounts operations.
type FederationDeleteUserAccountsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationDeleteUserAccountsOperation) Metadata() *saml.DeleteFederatedUserAccountsMetadata {
	return o.Operation.Metadata().(*saml.DeleteFederatedUserAccountsMetadata)
}

// Response retrieves the operation response.
func (o *FederationDeleteUserAccountsOperation) Response() *saml.DeleteFederatedUserAccountsResponse {
	return o.Operation.Response().(*saml.DeleteFederatedUserAccountsResponse)
}

// Wait polls the operation until it's done.
func (o *FederationDeleteUserAccountsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.DeleteFederatedUserAccountsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.DeleteFederatedUserAccountsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationDeleteUserAccountsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.DeleteFederatedUserAccountsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.DeleteFederatedUserAccountsResponse)
	return response, err
}

// DeleteUserAccounts is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) DeleteUserAccounts(ctx context.Context, in *saml.DeleteFederatedUserAccountsRequest, opts ...grpc.CallOption) (*FederationDeleteUserAccountsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationDeleteUserAccounts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).DeleteUserAccounts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.DeleteFederatedUserAccountsMetadata).GetFederationId()
		},
		MetadataType: (*saml.DeleteFederatedUserAccountsMetadata)(nil),
		ResponseType: (*saml.DeleteFederatedUserAccountsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationDeleteUserAccountsOperation{*op}, nil
}

// ListUserAccounts is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) ListUserAccounts(ctx context.Context, in *saml.ListFederatedUserAccountsRequest, opts ...grpc.CallOption) (*saml.ListFederatedUserAccountsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FederationListUserAccounts, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).ListUserAccounts(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) ListOperations(ctx context.Context, in *saml.ListFederationOperationsRequest, opts ...grpc.CallOption) (*saml.ListFederationOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FederationListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).ListOperations(ctx, in, opts...)
}

// GetDomain is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) GetDomain(ctx context.Context, in *saml.GetFederationDomainRequest, opts ...grpc.CallOption) (*saml.Domain, error) {
	connection, err := c.connector.GetConnection(ctx, FederationGetDomain, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).GetDomain(ctx, in, opts...)
}

// ListDomains is an operation of Yandex.Cloud Saml Federation service.
func (c federationClient) ListDomains(ctx context.Context, in *saml.ListFederationDomainsRequest, opts ...grpc.CallOption) (*saml.ListFederationDomainsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FederationListDomains, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewFederationServiceClient(connection).ListDomains(ctx, in, opts...)
}

// FederationAddDomainOperation is used to monitor the state of AddDomain operations.
type FederationAddDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationAddDomainOperation) Metadata() *saml.AddFederationDomainMetadata {
	return o.Operation.Metadata().(*saml.AddFederationDomainMetadata)
}

// Response retrieves the operation response.
func (o *FederationAddDomainOperation) Response() *saml.Domain {
	return o.Operation.Response().(*saml.Domain)
}

// Wait polls the operation until it's done.
func (o *FederationAddDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Domain, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Domain)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationAddDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Domain, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Domain)
	return response, err
}

// AddDomain is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) AddDomain(ctx context.Context, in *saml.AddFederationDomainRequest, opts ...grpc.CallOption) (*FederationAddDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationAddDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).AddDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.AddFederationDomainMetadata).GetFederationId()
		},
		MetadataType: (*saml.AddFederationDomainMetadata)(nil),
		ResponseType: (*saml.Domain)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationAddDomainOperation{*op}, nil
}

// FederationValidateDomainOperation is used to monitor the state of ValidateDomain operations.
type FederationValidateDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationValidateDomainOperation) Metadata() *saml.ValidateFederationDomainMetadata {
	return o.Operation.Metadata().(*saml.ValidateFederationDomainMetadata)
}

// Response retrieves the operation response.
func (o *FederationValidateDomainOperation) Response() *saml.Domain {
	return o.Operation.Response().(*saml.Domain)
}

// Wait polls the operation until it's done.
func (o *FederationValidateDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Domain, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Domain)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationValidateDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Domain, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Domain)
	return response, err
}

// ValidateDomain is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) ValidateDomain(ctx context.Context, in *saml.ValidateFederationDomainRequest, opts ...grpc.CallOption) (*FederationValidateDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationValidateDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).ValidateDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.ValidateFederationDomainMetadata).GetFederationId()
		},
		MetadataType: (*saml.ValidateFederationDomainMetadata)(nil),
		ResponseType: (*saml.Domain)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationValidateDomainOperation{*op}, nil
}

// FederationDeleteDomainOperation is used to monitor the state of DeleteDomain operations.
type FederationDeleteDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FederationDeleteDomainOperation) Metadata() *saml.DeleteFederationDomainMetadata {
	return o.Operation.Metadata().(*saml.DeleteFederationDomainMetadata)
}

// Response retrieves the operation response.
func (o *FederationDeleteDomainOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FederationDeleteDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FederationDeleteDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteDomain is an operation of Yandex.Cloud Saml Federation service.
// It returns an object which should be used to monitor the operation state.
func (c federationClient) DeleteDomain(ctx context.Context, in *saml.DeleteFederationDomainRequest, opts ...grpc.CallOption) (*FederationDeleteDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationDeleteDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewFederationServiceClient(connection).DeleteDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.DeleteFederationDomainMetadata).GetFederationId()
		},
		MetadataType: (*saml.DeleteFederationDomainMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FederationDeleteDomainOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c federationClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FederationOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	FederationGet                = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.Get")
	FederationList               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.List")
	FederationCreate             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.Create")
	FederationUpdate             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.Update")
	FederationDelete             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.Delete")
	FederationAddUserAccounts    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.AddUserAccounts")
	FederationDeleteUserAccounts = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.DeleteUserAccounts")
	FederationListUserAccounts   = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.ListUserAccounts")
	FederationListOperations     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.ListOperations")
	FederationGetDomain          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.GetDomain")
	FederationListDomains        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.ListDomains")
	FederationAddDomain          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.AddDomain")
	FederationValidateDomain     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.ValidateDomain")
	FederationDeleteDomain       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.FederationService.DeleteDomain")
	FederationOperationPoller    = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
