// Code generated by sdkgen-v2. DO NOT EDIT.
package samlsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	saml "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/saml"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CertificateClient provides methods for managing Certificate resources of Yandex.Cloud Saml.
type CertificateClient interface {
	Get(context.Context, *saml.GetCertificateRequest, ...grpc.CallOption) (*saml.Certificate, error)
	List(context.Context, *saml.ListCertificatesRequest, ...grpc.CallOption) (*saml.ListCertificatesResponse, error)
	Create(context.Context, *saml.CreateCertificateRequest, ...grpc.CallOption) (*CertificateCreateOperation, error)
	Update(context.Context, *saml.UpdateCertificateRequest, ...grpc.CallOption) (*CertificateUpdateOperation, error)
	Delete(context.Context, *saml.DeleteCertificateRequest, ...grpc.CallOption) (*CertificateDeleteOperation, error)
	ListOperations(context.Context, *saml.ListCertificateOperationsRequest, ...grpc.CallOption) (*saml.ListCertificateOperationsResponse, error)
}

var _ CertificateClient = certificateClient{}

type certificateClient struct {
	connector transport.Connector
}

// NewCertificateClient returns CertificateClient implementation.
func NewCertificateClient(connector transport.Connector) CertificateClient {
	return certificateClient{connector}
}

// Get is an operation of Yandex.Cloud Saml Certificate service.
func (c certificateClient) Get(ctx context.Context, in *saml.GetCertificateRequest, opts ...grpc.CallOption) (*saml.Certificate, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateGet, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewCertificateServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Saml Certificate service.
func (c certificateClient) List(ctx context.Context, in *saml.ListCertificatesRequest, opts ...grpc.CallOption) (*saml.ListCertificatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateList, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewCertificateServiceClient(connection).List(ctx, in, opts...)
}

// CertificateCreateOperation is used to monitor the state of Create operations.
type CertificateCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CertificateCreateOperation) Metadata() *saml.CreateCertificateMetadata {
	return o.Operation.Metadata().(*saml.CreateCertificateMetadata)
}

// Response retrieves the operation response.
func (o *CertificateCreateOperation) Response() *saml.Certificate {
	return o.Operation.Response().(*saml.Certificate)
}

// Wait polls the operation until it's done.
func (o *CertificateCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Certificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Certificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CertificateCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Certificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Certificate)
	return response, err
}

// Create is an operation of Yandex.Cloud Saml Certificate service.
// It returns an object which should be used to monitor the operation state.
func (c certificateClient) Create(ctx context.Context, in *saml.CreateCertificateRequest, opts ...grpc.CallOption) (*CertificateCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewCertificateServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.CreateCertificateMetadata).GetCertificateId()
		},
		MetadataType: (*saml.CreateCertificateMetadata)(nil),
		ResponseType: (*saml.Certificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CertificateCreateOperation{*op}, nil
}

// CertificateUpdateOperation is used to monitor the state of Update operations.
type CertificateUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CertificateUpdateOperation) Metadata() *saml.UpdateCertificateMetadata {
	return o.Operation.Metadata().(*saml.UpdateCertificateMetadata)
}

// Response retrieves the operation response.
func (o *CertificateUpdateOperation) Response() *saml.Certificate {
	return o.Operation.Response().(*saml.Certificate)
}

// Wait polls the operation until it's done.
func (o *CertificateUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saml.Certificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saml.Certificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CertificateUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saml.Certificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saml.Certificate)
	return response, err
}

// Update is an operation of Yandex.Cloud Saml Certificate service.
// It returns an object which should be used to monitor the operation state.
func (c certificateClient) Update(ctx context.Context, in *saml.UpdateCertificateRequest, opts ...grpc.CallOption) (*CertificateUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewCertificateServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.UpdateCertificateMetadata).GetCertificateId()
		},
		MetadataType: (*saml.UpdateCertificateMetadata)(nil),
		ResponseType: (*saml.Certificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CertificateUpdateOperation{*op}, nil
}

// CertificateDeleteOperation is used to monitor the state of Delete operations.
type CertificateDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CertificateDeleteOperation) Metadata() *saml.DeleteCertificateMetadata {
	return o.Operation.Metadata().(*saml.DeleteCertificateMetadata)
}

// Response retrieves the operation response.
func (o *CertificateDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CertificateDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CertificateDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Saml Certificate service.
// It returns an object which should be used to monitor the operation state.
func (c certificateClient) Delete(ctx context.Context, in *saml.DeleteCertificateRequest, opts ...grpc.CallOption) (*CertificateDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saml.NewCertificateServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saml.DeleteCertificateMetadata).GetCertificateId()
		},
		MetadataType: (*saml.DeleteCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CertificateDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Saml Certificate service.
func (c certificateClient) ListOperations(ctx context.Context, in *saml.ListCertificateOperationsRequest, opts ...grpc.CallOption) (*saml.ListCertificateOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return saml.NewCertificateServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c certificateClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CertificateOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CertificateGet             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.Get")
	CertificateList            = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.List")
	CertificateCreate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.Create")
	CertificateUpdate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.Update")
	CertificateDelete          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.Delete")
	CertificateListOperations  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.saml.CertificateService.ListOperations")
	CertificateOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
