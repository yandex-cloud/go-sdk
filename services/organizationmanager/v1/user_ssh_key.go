// Code generated by sdkgen-v2. DO NOT EDIT.
package organizationmanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	organizationmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserSshKeyClient provides methods for managing UserSshKey resources of Yandex.Cloud OrganizationManager.
type UserSshKeyClient interface {
	Get(context.Context, *organizationmanager.GetUserSshKeyRequest, ...grpc.CallOption) (*organizationmanager.UserSshKey, error)
	List(context.Context, *organizationmanager.ListUserSshKeysRequest, ...grpc.CallOption) (*organizationmanager.ListUserSshKeysResponse, error)
	Create(context.Context, *organizationmanager.CreateUserSshKeyRequest, ...grpc.CallOption) (*UserSshKeyCreateOperation, error)
	Update(context.Context, *organizationmanager.UpdateUserSshKeyRequest, ...grpc.CallOption) (*UserSshKeyUpdateOperation, error)
	Delete(context.Context, *organizationmanager.DeleteUserSshKeyRequest, ...grpc.CallOption) (*UserSshKeyDeleteOperation, error)
}

var _ UserSshKeyClient = userSshKeyClient{}

type userSshKeyClient struct {
	connector transport.Connector
}

// NewUserSshKeyClient returns UserSshKeyClient implementation.
func NewUserSshKeyClient(connector transport.Connector) UserSshKeyClient {
	return userSshKeyClient{connector}
}

// Get is an operation of Yandex.Cloud OrganizationManager UserSshKey service.
func (c userSshKeyClient) Get(ctx context.Context, in *organizationmanager.GetUserSshKeyRequest, opts ...grpc.CallOption) (*organizationmanager.UserSshKey, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyGet, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewUserSshKeyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud OrganizationManager UserSshKey service.
func (c userSshKeyClient) List(ctx context.Context, in *organizationmanager.ListUserSshKeysRequest, opts ...grpc.CallOption) (*organizationmanager.ListUserSshKeysResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyList, opts...)
	if err != nil {
		return nil, err
	}
	return organizationmanager.NewUserSshKeyServiceClient(connection).List(ctx, in, opts...)
}

// UserSshKeyCreateOperation is used to monitor the state of Create operations.
type UserSshKeyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSshKeyCreateOperation) Metadata() *organizationmanager.CreateUserSshKeyMetadata {
	return o.Operation.Metadata().(*organizationmanager.CreateUserSshKeyMetadata)
}

// Response retrieves the operation response.
func (o *UserSshKeyCreateOperation) Response() *organizationmanager.UserSshKey {
	return o.Operation.Response().(*organizationmanager.UserSshKey)
}

// Wait polls the operation until it's done.
func (o *UserSshKeyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.UserSshKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.UserSshKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSshKeyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.UserSshKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.UserSshKey)
	return response, err
}

// Create is an operation of Yandex.Cloud OrganizationManager UserSshKey service.
// It returns an object which should be used to monitor the operation state.
func (c userSshKeyClient) Create(ctx context.Context, in *organizationmanager.CreateUserSshKeyRequest, opts ...grpc.CallOption) (*UserSshKeyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewUserSshKeyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.CreateUserSshKeyMetadata).GetUserSshKeyId()
		},
		MetadataType: (*organizationmanager.CreateUserSshKeyMetadata)(nil),
		ResponseType: (*organizationmanager.UserSshKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSshKeyCreateOperation{*op}, nil
}

// UserSshKeyUpdateOperation is used to monitor the state of Update operations.
type UserSshKeyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSshKeyUpdateOperation) Metadata() *organizationmanager.UpdateUserSshKeyMetadata {
	return o.Operation.Metadata().(*organizationmanager.UpdateUserSshKeyMetadata)
}

// Response retrieves the operation response.
func (o *UserSshKeyUpdateOperation) Response() *organizationmanager.UserSshKey {
	return o.Operation.Response().(*organizationmanager.UserSshKey)
}

// Wait polls the operation until it's done.
func (o *UserSshKeyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*organizationmanager.UserSshKey, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*organizationmanager.UserSshKey)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSshKeyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*organizationmanager.UserSshKey, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*organizationmanager.UserSshKey)
	return response, err
}

// Update is an operation of Yandex.Cloud OrganizationManager UserSshKey service.
// It returns an object which should be used to monitor the operation state.
func (c userSshKeyClient) Update(ctx context.Context, in *organizationmanager.UpdateUserSshKeyRequest, opts ...grpc.CallOption) (*UserSshKeyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewUserSshKeyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.UpdateUserSshKeyMetadata).GetUserSshKeyId()
		},
		MetadataType: (*organizationmanager.UpdateUserSshKeyMetadata)(nil),
		ResponseType: (*organizationmanager.UserSshKey)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSshKeyUpdateOperation{*op}, nil
}

// UserSshKeyDeleteOperation is used to monitor the state of Delete operations.
type UserSshKeyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSshKeyDeleteOperation) Metadata() *organizationmanager.DeleteUserSshKeyMetadata {
	return o.Operation.Metadata().(*organizationmanager.DeleteUserSshKeyMetadata)
}

// Response retrieves the operation response.
func (o *UserSshKeyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserSshKeyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSshKeyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud OrganizationManager UserSshKey service.
// It returns an object which should be used to monitor the operation state.
func (c userSshKeyClient) Delete(ctx context.Context, in *organizationmanager.DeleteUserSshKeyRequest, opts ...grpc.CallOption) (*UserSshKeyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := organizationmanager.NewUserSshKeyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*organizationmanager.DeleteUserSshKeyMetadata).GetUserSshKeyId()
		},
		MetadataType: (*organizationmanager.DeleteUserSshKeyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSshKeyDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c userSshKeyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSshKeyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserSshKeyGet             = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserSshKeyService.Get")
	UserSshKeyList            = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserSshKeyService.List")
	UserSshKeyCreate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserSshKeyService.Create")
	UserSshKeyUpdate          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserSshKeyService.Update")
	UserSshKeyDelete          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.UserSshKeyService.Delete")
	UserSshKeyOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
