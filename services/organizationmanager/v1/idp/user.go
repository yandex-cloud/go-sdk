// Code generated by sdkgen-v2. DO NOT EDIT.
package idpsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserClient provides methods for managing User resources of Yandex.Cloud Idp.
type UserClient interface {
	Get(context.Context, *idp.GetUserRequest, ...grpc.CallOption) (*idp.User, error)
	List(context.Context, *idp.ListUsersRequest, ...grpc.CallOption) (*idp.ListUsersResponse, error)
	Create(context.Context, *idp.CreateUserRequest, ...grpc.CallOption) (*UserCreateOperation, error)
	Update(context.Context, *idp.UpdateUserRequest, ...grpc.CallOption) (*UserUpdateOperation, error)
	Delete(context.Context, *idp.DeleteUserRequest, ...grpc.CallOption) (*UserDeleteOperation, error)
	SetOwnPassword(context.Context, *idp.SetOwnPasswordRequest, ...grpc.CallOption) (*UserSetOwnPasswordOperation, error)
	SetOthersPassword(context.Context, *idp.SetOthersPasswordRequest, ...grpc.CallOption) (*UserSetOthersPasswordOperation, error)
	Suspend(context.Context, *idp.SuspendUserRequest, ...grpc.CallOption) (*UserSuspendOperation, error)
	Reactivate(context.Context, *idp.ReactivateUserRequest, ...grpc.CallOption) (*UserReactivateOperation, error)
	GeneratePassword(context.Context, *idp.GeneratePasswordRequest, ...grpc.CallOption) (*idp.GeneratePasswordResponse, error)
	GetSelfPasswordMetadata(context.Context, *emptypb.Empty, ...grpc.CallOption) (*idp.PasswordMetadata, error)
	ConvertToExternal(context.Context, *idp.ConvertToExternalUserRequest, ...grpc.CallOption) (*UserConvertToExternalOperation, error)
	SetPasswordHash(context.Context, *idp.SetPasswordHashRequest, ...grpc.CallOption) (*UserSetPasswordHashOperation, error)
	ResolveExternalIds(context.Context, *idp.ResolveExternalIdsRequest, ...grpc.CallOption) (*idp.ResolveExternalIdsResponse, error)
}

var _ UserClient = userClient{}

type userClient struct {
	connector transport.Connector
}

// NewUserClient returns UserClient implementation.
func NewUserClient(connector transport.Connector) UserClient {
	return userClient{connector}
}

// Get is an operation of Yandex.Cloud Idp User service.
func (c userClient) Get(ctx context.Context, in *idp.GetUserRequest, opts ...grpc.CallOption) (*idp.User, error) {
	connection, err := c.connector.GetConnection(ctx, UserGet, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Idp User service.
func (c userClient) List(ctx context.Context, in *idp.ListUsersRequest, opts ...grpc.CallOption) (*idp.ListUsersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserList, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserServiceClient(connection).List(ctx, in, opts...)
}

// UserCreateOperation is used to monitor the state of Create operations.
type UserCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserCreateOperation) Metadata() *idp.CreateUserMetadata {
	return o.Operation.Metadata().(*idp.CreateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserCreateOperation) Response() *idp.User {
	return o.Operation.Response().(*idp.User)
}

// Wait polls the operation until it's done.
func (o *UserCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// Create is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Create(ctx context.Context, in *idp.CreateUserRequest, opts ...grpc.CallOption) (*UserCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.CreateUserMetadata).GetUserId()
		},
		MetadataType: (*idp.CreateUserMetadata)(nil),
		ResponseType: (*idp.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserCreateOperation{*op}, nil
}

// UserUpdateOperation is used to monitor the state of Update operations.
type UserUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserUpdateOperation) Metadata() *idp.UpdateUserMetadata {
	return o.Operation.Metadata().(*idp.UpdateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserUpdateOperation) Response() *idp.User {
	return o.Operation.Response().(*idp.User)
}

// Wait polls the operation until it's done.
func (o *UserUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// Update is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Update(ctx context.Context, in *idp.UpdateUserRequest, opts ...grpc.CallOption) (*UserUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.UpdateUserMetadata).GetUserId()
		},
		MetadataType: (*idp.UpdateUserMetadata)(nil),
		ResponseType: (*idp.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserUpdateOperation{*op}, nil
}

// UserDeleteOperation is used to monitor the state of Delete operations.
type UserDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserDeleteOperation) Metadata() *idp.DeleteUserMetadata {
	return o.Operation.Metadata().(*idp.DeleteUserMetadata)
}

// Response retrieves the operation response.
func (o *UserDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Delete(ctx context.Context, in *idp.DeleteUserRequest, opts ...grpc.CallOption) (*UserDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.DeleteUserMetadata).GetUserId()
		},
		MetadataType: (*idp.DeleteUserMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserDeleteOperation{*op}, nil
}

// UserSetOwnPasswordOperation is used to monitor the state of SetOwnPassword operations.
type UserSetOwnPasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSetOwnPasswordOperation) Metadata() *idp.SetOwnPasswordMetadata {
	return o.Operation.Metadata().(*idp.SetOwnPasswordMetadata)
}

// Response retrieves the operation response.
func (o *UserSetOwnPasswordOperation) Response() *idp.SetOwnPasswordResponse {
	return o.Operation.Response().(*idp.SetOwnPasswordResponse)
}

// Wait polls the operation until it's done.
func (o *UserSetOwnPasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.SetOwnPasswordResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.SetOwnPasswordResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSetOwnPasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.SetOwnPasswordResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.SetOwnPasswordResponse)
	return response, err
}

// SetOwnPassword is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) SetOwnPassword(ctx context.Context, in *idp.SetOwnPasswordRequest, opts ...grpc.CallOption) (*UserSetOwnPasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSetOwnPassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).SetOwnPassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.SetOwnPasswordMetadata).GetUserId()
		},
		MetadataType: (*idp.SetOwnPasswordMetadata)(nil),
		ResponseType: (*idp.SetOwnPasswordResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSetOwnPasswordOperation{*op}, nil
}

// UserSetOthersPasswordOperation is used to monitor the state of SetOthersPassword operations.
type UserSetOthersPasswordOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSetOthersPasswordOperation) Metadata() *idp.SetOthersPasswordMetadata {
	return o.Operation.Metadata().(*idp.SetOthersPasswordMetadata)
}

// Response retrieves the operation response.
func (o *UserSetOthersPasswordOperation) Response() *idp.SetOthersPasswordResponse {
	return o.Operation.Response().(*idp.SetOthersPasswordResponse)
}

// Wait polls the operation until it's done.
func (o *UserSetOthersPasswordOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.SetOthersPasswordResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.SetOthersPasswordResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSetOthersPasswordOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.SetOthersPasswordResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.SetOthersPasswordResponse)
	return response, err
}

// SetOthersPassword is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) SetOthersPassword(ctx context.Context, in *idp.SetOthersPasswordRequest, opts ...grpc.CallOption) (*UserSetOthersPasswordOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSetOthersPassword, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).SetOthersPassword(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.SetOthersPasswordMetadata).GetUserId()
		},
		MetadataType: (*idp.SetOthersPasswordMetadata)(nil),
		ResponseType: (*idp.SetOthersPasswordResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSetOthersPasswordOperation{*op}, nil
}

// UserSuspendOperation is used to monitor the state of Suspend operations.
type UserSuspendOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSuspendOperation) Metadata() *idp.SuspendUserMetadata {
	return o.Operation.Metadata().(*idp.SuspendUserMetadata)
}

// Response retrieves the operation response.
func (o *UserSuspendOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserSuspendOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSuspendOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Suspend is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Suspend(ctx context.Context, in *idp.SuspendUserRequest, opts ...grpc.CallOption) (*UserSuspendOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSuspend, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).Suspend(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.SuspendUserMetadata).GetUserId()
		},
		MetadataType: (*idp.SuspendUserMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSuspendOperation{*op}, nil
}

// UserReactivateOperation is used to monitor the state of Reactivate operations.
type UserReactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserReactivateOperation) Metadata() *idp.ReactivateUserMetadata {
	return o.Operation.Metadata().(*idp.ReactivateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserReactivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserReactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserReactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Reactivate is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Reactivate(ctx context.Context, in *idp.ReactivateUserRequest, opts ...grpc.CallOption) (*UserReactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserReactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).Reactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.ReactivateUserMetadata).GetUserId()
		},
		MetadataType: (*idp.ReactivateUserMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserReactivateOperation{*op}, nil
}

// GeneratePassword is an operation of Yandex.Cloud Idp User service.
func (c userClient) GeneratePassword(ctx context.Context, in *idp.GeneratePasswordRequest, opts ...grpc.CallOption) (*idp.GeneratePasswordResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserGeneratePassword, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserServiceClient(connection).GeneratePassword(ctx, in, opts...)
}

// GetSelfPasswordMetadata is an operation of Yandex.Cloud Idp User service.
func (c userClient) GetSelfPasswordMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*idp.PasswordMetadata, error) {
	connection, err := c.connector.GetConnection(ctx, UserGetSelfPasswordMetadata, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserServiceClient(connection).GetSelfPasswordMetadata(ctx, in, opts...)
}

// UserConvertToExternalOperation is used to monitor the state of ConvertToExternal operations.
type UserConvertToExternalOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserConvertToExternalOperation) Metadata() *idp.ConvertToExternalUserMetadata {
	return o.Operation.Metadata().(*idp.ConvertToExternalUserMetadata)
}

// Response retrieves the operation response.
func (o *UserConvertToExternalOperation) Response() *idp.User {
	return o.Operation.Response().(*idp.User)
}

// Wait polls the operation until it's done.
func (o *UserConvertToExternalOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserConvertToExternalOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.User)
	return response, err
}

// ConvertToExternal is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) ConvertToExternal(ctx context.Context, in *idp.ConvertToExternalUserRequest, opts ...grpc.CallOption) (*UserConvertToExternalOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserConvertToExternal, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).ConvertToExternal(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.ConvertToExternalUserMetadata).GetUserId()
		},
		MetadataType: (*idp.ConvertToExternalUserMetadata)(nil),
		ResponseType: (*idp.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserConvertToExternalOperation{*op}, nil
}

// UserSetPasswordHashOperation is used to monitor the state of SetPasswordHash operations.
type UserSetPasswordHashOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserSetPasswordHashOperation) Metadata() *idp.SetPasswordHashMetadata {
	return o.Operation.Metadata().(*idp.SetPasswordHashMetadata)
}

// Response retrieves the operation response.
func (o *UserSetPasswordHashOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserSetPasswordHashOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserSetPasswordHashOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetPasswordHash is an operation of Yandex.Cloud Idp User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) SetPasswordHash(ctx context.Context, in *idp.SetPasswordHashRequest, opts ...grpc.CallOption) (*UserSetPasswordHashOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserSetPasswordHash, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserServiceClient(connection).SetPasswordHash(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.SetPasswordHashMetadata).GetUserId()
		},
		MetadataType: (*idp.SetPasswordHashMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserSetPasswordHashOperation{*op}, nil
}

// ResolveExternalIds is an operation of Yandex.Cloud Idp User service.
func (c userClient) ResolveExternalIds(ctx context.Context, in *idp.ResolveExternalIdsRequest, opts ...grpc.CallOption) (*idp.ResolveExternalIdsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserResolveExternalIds, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserServiceClient(connection).ResolveExternalIds(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c userClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserGet                     = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Get")
	UserList                    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.List")
	UserCreate                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Create")
	UserUpdate                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Update")
	UserDelete                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Delete")
	UserSetOwnPassword          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.SetOwnPassword")
	UserSetOthersPassword       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.SetOthersPassword")
	UserSuspend                 = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Suspend")
	UserReactivate              = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.Reactivate")
	UserGeneratePassword        = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.GeneratePassword")
	UserGetSelfPasswordMetadata = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.GetSelfPasswordMetadata")
	UserConvertToExternal       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.ConvertToExternal")
	UserSetPasswordHash         = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.SetPasswordHash")
	UserResolveExternalIds      = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserService.ResolveExternalIds")
	UserOperationPoller         = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
