// Code generated by sdkgen-v2. DO NOT EDIT.
package idpsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserpoolClient provides methods for managing Userpool resources of Yandex.Cloud Idp.
type UserpoolClient interface {
	Get(context.Context, *idp.GetUserpoolRequest, ...grpc.CallOption) (*idp.Userpool, error)
	List(context.Context, *idp.ListUserpoolsRequest, ...grpc.CallOption) (*idp.ListUserpoolsResponse, error)
	Create(context.Context, *idp.CreateUserpoolRequest, ...grpc.CallOption) (*UserpoolCreateOperation, error)
	Update(context.Context, *idp.UpdateUserpoolRequest, ...grpc.CallOption) (*UserpoolUpdateOperation, error)
	Delete(context.Context, *idp.DeleteUserpoolRequest, ...grpc.CallOption) (*UserpoolDeleteOperation, error)
	GetDomain(context.Context, *idp.GetUserpoolDomainRequest, ...grpc.CallOption) (*idp.Domain, error)
	ListDomains(context.Context, *idp.ListUserpoolDomainsRequest, ...grpc.CallOption) (*idp.ListUserpoolDomainsResponse, error)
	AddDomain(context.Context, *idp.AddUserpoolDomainRequest, ...grpc.CallOption) (*UserpoolAddDomainOperation, error)
	ValidateDomain(context.Context, *idp.ValidateUserpoolDomainRequest, ...grpc.CallOption) (*UserpoolValidateDomainOperation, error)
	DeleteDomain(context.Context, *idp.DeleteUserpoolDomainRequest, ...grpc.CallOption) (*UserpoolDeleteDomainOperation, error)
	ListOperations(context.Context, *idp.ListUserpoolOperationsRequest, ...grpc.CallOption) (*idp.ListUserpoolOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*UserpoolSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*UserpoolUpdateAccessBindingsOperation, error)
}

var _ UserpoolClient = userpoolClient{}

type userpoolClient struct {
	connector transport.Connector
}

// NewUserpoolClient returns UserpoolClient implementation.
func NewUserpoolClient(connector transport.Connector) UserpoolClient {
	return userpoolClient{connector}
}

// Get is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) Get(ctx context.Context, in *idp.GetUserpoolRequest, opts ...grpc.CallOption) (*idp.Userpool, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolGet, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) List(ctx context.Context, in *idp.ListUserpoolsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolList, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).List(ctx, in, opts...)
}

// UserpoolCreateOperation is used to monitor the state of Create operations.
type UserpoolCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolCreateOperation) Metadata() *idp.CreateUserpoolMetadata {
	return o.Operation.Metadata().(*idp.CreateUserpoolMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolCreateOperation) Response() *idp.Userpool {
	return o.Operation.Response().(*idp.Userpool)
}

// Wait polls the operation until it's done.
func (o *UserpoolCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.Userpool, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.Userpool)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.Userpool, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.Userpool)
	return response, err
}

// Create is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) Create(ctx context.Context, in *idp.CreateUserpoolRequest, opts ...grpc.CallOption) (*UserpoolCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.CreateUserpoolMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.CreateUserpoolMetadata)(nil),
		ResponseType: (*idp.Userpool)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolCreateOperation{*op}, nil
}

// UserpoolUpdateOperation is used to monitor the state of Update operations.
type UserpoolUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolUpdateOperation) Metadata() *idp.UpdateUserpoolMetadata {
	return o.Operation.Metadata().(*idp.UpdateUserpoolMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolUpdateOperation) Response() *idp.Userpool {
	return o.Operation.Response().(*idp.Userpool)
}

// Wait polls the operation until it's done.
func (o *UserpoolUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.Userpool, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.Userpool)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.Userpool, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.Userpool)
	return response, err
}

// Update is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) Update(ctx context.Context, in *idp.UpdateUserpoolRequest, opts ...grpc.CallOption) (*UserpoolUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.UpdateUserpoolMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.UpdateUserpoolMetadata)(nil),
		ResponseType: (*idp.Userpool)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolUpdateOperation{*op}, nil
}

// UserpoolDeleteOperation is used to monitor the state of Delete operations.
type UserpoolDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolDeleteOperation) Metadata() *idp.DeleteUserpoolMetadata {
	return o.Operation.Metadata().(*idp.DeleteUserpoolMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserpoolDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) Delete(ctx context.Context, in *idp.DeleteUserpoolRequest, opts ...grpc.CallOption) (*UserpoolDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.DeleteUserpoolMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.DeleteUserpoolMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolDeleteOperation{*op}, nil
}

// GetDomain is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) GetDomain(ctx context.Context, in *idp.GetUserpoolDomainRequest, opts ...grpc.CallOption) (*idp.Domain, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolGetDomain, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).GetDomain(ctx, in, opts...)
}

// ListDomains is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) ListDomains(ctx context.Context, in *idp.ListUserpoolDomainsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolDomainsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolListDomains, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).ListDomains(ctx, in, opts...)
}

// UserpoolAddDomainOperation is used to monitor the state of AddDomain operations.
type UserpoolAddDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolAddDomainOperation) Metadata() *idp.AddUserpoolDomainMetadata {
	return o.Operation.Metadata().(*idp.AddUserpoolDomainMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolAddDomainOperation) Response() *idp.Domain {
	return o.Operation.Response().(*idp.Domain)
}

// Wait polls the operation until it's done.
func (o *UserpoolAddDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.Domain, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.Domain)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolAddDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.Domain, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.Domain)
	return response, err
}

// AddDomain is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) AddDomain(ctx context.Context, in *idp.AddUserpoolDomainRequest, opts ...grpc.CallOption) (*UserpoolAddDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolAddDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).AddDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.AddUserpoolDomainMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.AddUserpoolDomainMetadata)(nil),
		ResponseType: (*idp.Domain)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolAddDomainOperation{*op}, nil
}

// UserpoolValidateDomainOperation is used to monitor the state of ValidateDomain operations.
type UserpoolValidateDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolValidateDomainOperation) Metadata() *idp.ValidateUserpoolDomainMetadata {
	return o.Operation.Metadata().(*idp.ValidateUserpoolDomainMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolValidateDomainOperation) Response() *idp.Domain {
	return o.Operation.Response().(*idp.Domain)
}

// Wait polls the operation until it's done.
func (o *UserpoolValidateDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*idp.Domain, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*idp.Domain)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolValidateDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*idp.Domain, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*idp.Domain)
	return response, err
}

// ValidateDomain is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) ValidateDomain(ctx context.Context, in *idp.ValidateUserpoolDomainRequest, opts ...grpc.CallOption) (*UserpoolValidateDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolValidateDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).ValidateDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.ValidateUserpoolDomainMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.ValidateUserpoolDomainMetadata)(nil),
		ResponseType: (*idp.Domain)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolValidateDomainOperation{*op}, nil
}

// UserpoolDeleteDomainOperation is used to monitor the state of DeleteDomain operations.
type UserpoolDeleteDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolDeleteDomainOperation) Metadata() *idp.DeleteUserpoolDomainMetadata {
	return o.Operation.Metadata().(*idp.DeleteUserpoolDomainMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolDeleteDomainOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserpoolDeleteDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolDeleteDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteDomain is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) DeleteDomain(ctx context.Context, in *idp.DeleteUserpoolDomainRequest, opts ...grpc.CallOption) (*UserpoolDeleteDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolDeleteDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).DeleteDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*idp.DeleteUserpoolDomainMetadata).GetUserpoolId()
		},
		MetadataType: (*idp.DeleteUserpoolDomainMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolDeleteDomainOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) ListOperations(ctx context.Context, in *idp.ListUserpoolOperationsRequest, opts ...grpc.CallOption) (*idp.ListUserpoolOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Idp Userpool service.
func (c userpoolClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return idp.NewUserpoolServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// UserpoolSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type UserpoolSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *UserpoolSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*UserpoolSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolSetAccessBindingsOperation{*op}, nil
}

// UserpoolUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type UserpoolUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserpoolUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *UserpoolUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *UserpoolUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserpoolUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Idp Userpool service.
// It returns an object which should be used to monitor the operation state.
func (c userpoolClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*UserpoolUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := idp.NewUserpoolServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserpoolUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c userpoolClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserpoolOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserpoolGet                  = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.Get")
	UserpoolList                 = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.List")
	UserpoolCreate               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.Create")
	UserpoolUpdate               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.Update")
	UserpoolDelete               = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.Delete")
	UserpoolGetDomain            = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.GetDomain")
	UserpoolListDomains          = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.ListDomains")
	UserpoolAddDomain            = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.AddDomain")
	UserpoolValidateDomain       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.ValidateDomain")
	UserpoolDeleteDomain         = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.DeleteDomain")
	UserpoolListOperations       = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.ListOperations")
	UserpoolListAccessBindings   = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.ListAccessBindings")
	UserpoolSetAccessBindings    = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.SetAccessBindings")
	UserpoolUpdateAccessBindings = protoreflect.FullName("yandex.cloud.organizationmanager.v1.idp.UserpoolService.UpdateAccessBindings")
	UserpoolOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
