// Code generated by sdkgen-v2. DO NOT EDIT.
package apploadbalancersdk

import (
	"context"

	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BackendGroupClient provides methods for managing BackendGroup resources of Yandex.Cloud Apploadbalancer.
type BackendGroupClient interface {
	Get(context.Context, *apploadbalancer.GetBackendGroupRequest, ...grpc.CallOption) (*apploadbalancer.BackendGroup, error)
	List(context.Context, *apploadbalancer.ListBackendGroupsRequest, ...grpc.CallOption) (*apploadbalancer.ListBackendGroupsResponse, error)
	Create(context.Context, *apploadbalancer.CreateBackendGroupRequest, ...grpc.CallOption) (*BackendGroupCreateOperation, error)
	Update(context.Context, *apploadbalancer.UpdateBackendGroupRequest, ...grpc.CallOption) (*BackendGroupUpdateOperation, error)
	Delete(context.Context, *apploadbalancer.DeleteBackendGroupRequest, ...grpc.CallOption) (*BackendGroupDeleteOperation, error)
	AddBackend(context.Context, *apploadbalancer.AddBackendRequest, ...grpc.CallOption) (*BackendGroupAddBackendOperation, error)
	RemoveBackend(context.Context, *apploadbalancer.RemoveBackendRequest, ...grpc.CallOption) (*BackendGroupRemoveBackendOperation, error)
	UpdateBackend(context.Context, *apploadbalancer.UpdateBackendRequest, ...grpc.CallOption) (*BackendGroupUpdateBackendOperation, error)
	ListOperations(context.Context, *apploadbalancer.ListBackendGroupOperationsRequest, ...grpc.CallOption) (*apploadbalancer.ListBackendGroupOperationsResponse, error)
}

var _ BackendGroupClient = backendGroupClient{}

type backendGroupClient struct {
	connector transport.Connector
}

// NewBackendGroupClient returns BackendGroupClient implementation.
func NewBackendGroupClient(connector transport.Connector) BackendGroupClient {
	return backendGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
func (c backendGroupClient) Get(ctx context.Context, in *apploadbalancer.GetBackendGroupRequest, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewBackendGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
func (c backendGroupClient) List(ctx context.Context, in *apploadbalancer.ListBackendGroupsRequest, opts ...grpc.CallOption) (*apploadbalancer.ListBackendGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewBackendGroupServiceClient(connection).List(ctx, in, opts...)
}

// BackendGroupCreateOperation is used to monitor the state of Create operations.
type BackendGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupCreateOperation) Metadata() *apploadbalancer.CreateBackendGroupMetadata {
	return o.Operation.Metadata().(*apploadbalancer.CreateBackendGroupMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupCreateOperation) Response() *apploadbalancer.BackendGroup {
	return o.Operation.Response().(*apploadbalancer.BackendGroup)
}

// Wait polls the operation until it's done.
func (o *BackendGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) Create(ctx context.Context, in *apploadbalancer.CreateBackendGroupRequest, opts ...grpc.CallOption) (*BackendGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.CreateBackendGroupMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.CreateBackendGroupMetadata)(nil),
		ResponseType: (*apploadbalancer.BackendGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupCreateOperation{*op}, nil
}

// BackendGroupUpdateOperation is used to monitor the state of Update operations.
type BackendGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupUpdateOperation) Metadata() *apploadbalancer.UpdateBackendGroupMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateBackendGroupMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupUpdateOperation) Response() *apploadbalancer.BackendGroup {
	return o.Operation.Response().(*apploadbalancer.BackendGroup)
}

// Wait polls the operation until it's done.
func (o *BackendGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) Update(ctx context.Context, in *apploadbalancer.UpdateBackendGroupRequest, opts ...grpc.CallOption) (*BackendGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateBackendGroupMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.UpdateBackendGroupMetadata)(nil),
		ResponseType: (*apploadbalancer.BackendGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupUpdateOperation{*op}, nil
}

// BackendGroupDeleteOperation is used to monitor the state of Delete operations.
type BackendGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupDeleteOperation) Metadata() *apploadbalancer.DeleteBackendGroupMetadata {
	return o.Operation.Metadata().(*apploadbalancer.DeleteBackendGroupMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackendGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) Delete(ctx context.Context, in *apploadbalancer.DeleteBackendGroupRequest, opts ...grpc.CallOption) (*BackendGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.DeleteBackendGroupMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.DeleteBackendGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupDeleteOperation{*op}, nil
}

// BackendGroupAddBackendOperation is used to monitor the state of AddBackend operations.
type BackendGroupAddBackendOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupAddBackendOperation) Metadata() *apploadbalancer.AddBackendMetadata {
	return o.Operation.Metadata().(*apploadbalancer.AddBackendMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupAddBackendOperation) Response() *apploadbalancer.BackendGroup {
	return o.Operation.Response().(*apploadbalancer.BackendGroup)
}

// Wait polls the operation until it's done.
func (o *BackendGroupAddBackendOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupAddBackendOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// AddBackend is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) AddBackend(ctx context.Context, in *apploadbalancer.AddBackendRequest, opts ...grpc.CallOption) (*BackendGroupAddBackendOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupAddBackend, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).AddBackend(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.AddBackendMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.AddBackendMetadata)(nil),
		ResponseType: (*apploadbalancer.BackendGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupAddBackendOperation{*op}, nil
}

// BackendGroupRemoveBackendOperation is used to monitor the state of RemoveBackend operations.
type BackendGroupRemoveBackendOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupRemoveBackendOperation) Metadata() *apploadbalancer.RemoveBackendMetadata {
	return o.Operation.Metadata().(*apploadbalancer.RemoveBackendMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupRemoveBackendOperation) Response() *apploadbalancer.BackendGroup {
	return o.Operation.Response().(*apploadbalancer.BackendGroup)
}

// Wait polls the operation until it's done.
func (o *BackendGroupRemoveBackendOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupRemoveBackendOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// RemoveBackend is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) RemoveBackend(ctx context.Context, in *apploadbalancer.RemoveBackendRequest, opts ...grpc.CallOption) (*BackendGroupRemoveBackendOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupRemoveBackend, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).RemoveBackend(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.RemoveBackendMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.RemoveBackendMetadata)(nil),
		ResponseType: (*apploadbalancer.BackendGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupRemoveBackendOperation{*op}, nil
}

// BackendGroupUpdateBackendOperation is used to monitor the state of UpdateBackend operations.
type BackendGroupUpdateBackendOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackendGroupUpdateBackendOperation) Metadata() *apploadbalancer.UpdateBackendMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateBackendMetadata)
}

// Response retrieves the operation response.
func (o *BackendGroupUpdateBackendOperation) Response() *apploadbalancer.BackendGroup {
	return o.Operation.Response().(*apploadbalancer.BackendGroup)
}

// Wait polls the operation until it's done.
func (o *BackendGroupUpdateBackendOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackendGroupUpdateBackendOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.BackendGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.BackendGroup)
	return response, err
}

// UpdateBackend is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
// It returns an object which should be used to monitor the operation state.
func (c backendGroupClient) UpdateBackend(ctx context.Context, in *apploadbalancer.UpdateBackendRequest, opts ...grpc.CallOption) (*BackendGroupUpdateBackendOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupUpdateBackend, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewBackendGroupServiceClient(connection).UpdateBackend(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateBackendMetadata).GetBackendGroupId()
		},
		MetadataType: (*apploadbalancer.UpdateBackendMetadata)(nil),
		ResponseType: (*apploadbalancer.BackendGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackendGroupUpdateBackendOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Apploadbalancer BackendGroup service.
func (c backendGroupClient) ListOperations(ctx context.Context, in *apploadbalancer.ListBackendGroupOperationsRequest, opts ...grpc.CallOption) (*apploadbalancer.ListBackendGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewBackendGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c backendGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackendGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BackendGroupGet             = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.Get")
	BackendGroupList            = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.List")
	BackendGroupCreate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.Create")
	BackendGroupUpdate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.Update")
	BackendGroupDelete          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.Delete")
	BackendGroupAddBackend      = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.AddBackend")
	BackendGroupRemoveBackend   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.RemoveBackend")
	BackendGroupUpdateBackend   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.UpdateBackend")
	BackendGroupListOperations  = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.BackendGroupService.ListOperations")
	BackendGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
