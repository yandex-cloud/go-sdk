// Code generated by sdkgen-v2. DO NOT EDIT.
package apploadbalancersdk

import (
	"context"

	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// LoadBalancerClient provides methods for managing LoadBalancer resources of Yandex.Cloud Apploadbalancer.
type LoadBalancerClient interface {
	Get(context.Context, *apploadbalancer.GetLoadBalancerRequest, ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error)
	List(context.Context, *apploadbalancer.ListLoadBalancersRequest, ...grpc.CallOption) (*apploadbalancer.ListLoadBalancersResponse, error)
	Create(context.Context, *apploadbalancer.CreateLoadBalancerRequest, ...grpc.CallOption) (*LoadBalancerCreateOperation, error)
	Update(context.Context, *apploadbalancer.UpdateLoadBalancerRequest, ...grpc.CallOption) (*LoadBalancerUpdateOperation, error)
	Delete(context.Context, *apploadbalancer.DeleteLoadBalancerRequest, ...grpc.CallOption) (*LoadBalancerDeleteOperation, error)
	Start(context.Context, *apploadbalancer.StartLoadBalancerRequest, ...grpc.CallOption) (*LoadBalancerStartOperation, error)
	Stop(context.Context, *apploadbalancer.StopLoadBalancerRequest, ...grpc.CallOption) (*LoadBalancerStopOperation, error)
	AddListener(context.Context, *apploadbalancer.AddListenerRequest, ...grpc.CallOption) (*LoadBalancerAddListenerOperation, error)
	RemoveListener(context.Context, *apploadbalancer.RemoveListenerRequest, ...grpc.CallOption) (*LoadBalancerRemoveListenerOperation, error)
	UpdateListener(context.Context, *apploadbalancer.UpdateListenerRequest, ...grpc.CallOption) (*LoadBalancerUpdateListenerOperation, error)
	AddSniMatch(context.Context, *apploadbalancer.AddSniMatchRequest, ...grpc.CallOption) (*LoadBalancerAddSniMatchOperation, error)
	UpdateSniMatch(context.Context, *apploadbalancer.UpdateSniMatchRequest, ...grpc.CallOption) (*LoadBalancerUpdateSniMatchOperation, error)
	RemoveSniMatch(context.Context, *apploadbalancer.RemoveSniMatchRequest, ...grpc.CallOption) (*LoadBalancerRemoveSniMatchOperation, error)
	GetTargetStates(context.Context, *apploadbalancer.GetTargetStatesRequest, ...grpc.CallOption) (*apploadbalancer.GetTargetStatesResponse, error)
	ListOperations(context.Context, *apploadbalancer.ListLoadBalancerOperationsRequest, ...grpc.CallOption) (*apploadbalancer.ListLoadBalancerOperationsResponse, error)
	StartZonalShift(context.Context, *apploadbalancer.StartZonalShiftRequest, ...grpc.CallOption) (*LoadBalancerStartZonalShiftOperation, error)
	CancelZonalShift(context.Context, *apploadbalancer.CancelZonalShiftRequest, ...grpc.CallOption) (*LoadBalancerCancelZonalShiftOperation, error)
	DisableZones(context.Context, *apploadbalancer.DisableZonesRequest, ...grpc.CallOption) (*LoadBalancerDisableZonesOperation, error)
	EnableZones(context.Context, *apploadbalancer.EnableZonesRequest, ...grpc.CallOption) (*LoadBalancerEnableZonesOperation, error)
}

var _ LoadBalancerClient = loadBalancerClient{}

type loadBalancerClient struct {
	connector transport.Connector
}

// NewLoadBalancerClient returns LoadBalancerClient implementation.
func NewLoadBalancerClient(connector transport.Connector) LoadBalancerClient {
	return loadBalancerClient{connector}
}

// Get is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
func (c loadBalancerClient) Get(ctx context.Context, in *apploadbalancer.GetLoadBalancerRequest, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerGet, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewLoadBalancerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
func (c loadBalancerClient) List(ctx context.Context, in *apploadbalancer.ListLoadBalancersRequest, opts ...grpc.CallOption) (*apploadbalancer.ListLoadBalancersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerList, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewLoadBalancerServiceClient(connection).List(ctx, in, opts...)
}

// LoadBalancerCreateOperation is used to monitor the state of Create operations.
type LoadBalancerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerCreateOperation) Metadata() *apploadbalancer.CreateLoadBalancerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.CreateLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerCreateOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// Create is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) Create(ctx context.Context, in *apploadbalancer.CreateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.CreateLoadBalancerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.CreateLoadBalancerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerCreateOperation{*op}, nil
}

// LoadBalancerUpdateOperation is used to monitor the state of Update operations.
type LoadBalancerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerUpdateOperation) Metadata() *apploadbalancer.UpdateLoadBalancerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerUpdateOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// Update is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) Update(ctx context.Context, in *apploadbalancer.UpdateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateLoadBalancerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.UpdateLoadBalancerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerUpdateOperation{*op}, nil
}

// LoadBalancerDeleteOperation is used to monitor the state of Delete operations.
type LoadBalancerDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerDeleteOperation) Metadata() *apploadbalancer.DeleteLoadBalancerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.DeleteLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) Delete(ctx context.Context, in *apploadbalancer.DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.DeleteLoadBalancerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.DeleteLoadBalancerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerDeleteOperation{*op}, nil
}

// LoadBalancerStartOperation is used to monitor the state of Start operations.
type LoadBalancerStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerStartOperation) Metadata() *apploadbalancer.StartLoadBalancerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.StartLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerStartOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// Start is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) Start(ctx context.Context, in *apploadbalancer.StartLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.StartLoadBalancerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.StartLoadBalancerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerStartOperation{*op}, nil
}

// LoadBalancerStopOperation is used to monitor the state of Stop operations.
type LoadBalancerStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerStopOperation) Metadata() *apploadbalancer.StopLoadBalancerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.StopLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerStopOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// Stop is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) Stop(ctx context.Context, in *apploadbalancer.StopLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.StopLoadBalancerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.StopLoadBalancerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerStopOperation{*op}, nil
}

// LoadBalancerAddListenerOperation is used to monitor the state of AddListener operations.
type LoadBalancerAddListenerOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerAddListenerOperation) Metadata() *apploadbalancer.AddListenerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.AddListenerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerAddListenerOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerAddListenerOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerAddListenerOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// AddListener is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) AddListener(ctx context.Context, in *apploadbalancer.AddListenerRequest, opts ...grpc.CallOption) (*LoadBalancerAddListenerOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerAddListener, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).AddListener(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.AddListenerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.AddListenerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerAddListenerOperation{*op}, nil
}

// LoadBalancerRemoveListenerOperation is used to monitor the state of RemoveListener operations.
type LoadBalancerRemoveListenerOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerRemoveListenerOperation) Metadata() *apploadbalancer.RemoveListenerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.RemoveListenerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerRemoveListenerOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerRemoveListenerOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerRemoveListenerOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// RemoveListener is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) RemoveListener(ctx context.Context, in *apploadbalancer.RemoveListenerRequest, opts ...grpc.CallOption) (*LoadBalancerRemoveListenerOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerRemoveListener, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).RemoveListener(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.RemoveListenerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.RemoveListenerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerRemoveListenerOperation{*op}, nil
}

// LoadBalancerUpdateListenerOperation is used to monitor the state of UpdateListener operations.
type LoadBalancerUpdateListenerOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerUpdateListenerOperation) Metadata() *apploadbalancer.UpdateListenerMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateListenerMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerUpdateListenerOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerUpdateListenerOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerUpdateListenerOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// UpdateListener is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) UpdateListener(ctx context.Context, in *apploadbalancer.UpdateListenerRequest, opts ...grpc.CallOption) (*LoadBalancerUpdateListenerOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerUpdateListener, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).UpdateListener(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateListenerMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.UpdateListenerMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerUpdateListenerOperation{*op}, nil
}

// LoadBalancerAddSniMatchOperation is used to monitor the state of AddSniMatch operations.
type LoadBalancerAddSniMatchOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerAddSniMatchOperation) Metadata() *apploadbalancer.AddSniMatchMetadata {
	return o.Operation.Metadata().(*apploadbalancer.AddSniMatchMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerAddSniMatchOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerAddSniMatchOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerAddSniMatchOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddSniMatch is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) AddSniMatch(ctx context.Context, in *apploadbalancer.AddSniMatchRequest, opts ...grpc.CallOption) (*LoadBalancerAddSniMatchOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerAddSniMatch, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).AddSniMatch(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.AddSniMatchMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.AddSniMatchMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerAddSniMatchOperation{*op}, nil
}

// LoadBalancerUpdateSniMatchOperation is used to monitor the state of UpdateSniMatch operations.
type LoadBalancerUpdateSniMatchOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerUpdateSniMatchOperation) Metadata() *apploadbalancer.UpdateSniMatchMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateSniMatchMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerUpdateSniMatchOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerUpdateSniMatchOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerUpdateSniMatchOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateSniMatch is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) UpdateSniMatch(ctx context.Context, in *apploadbalancer.UpdateSniMatchRequest, opts ...grpc.CallOption) (*LoadBalancerUpdateSniMatchOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerUpdateSniMatch, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).UpdateSniMatch(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateSniMatchMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.UpdateSniMatchMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerUpdateSniMatchOperation{*op}, nil
}

// LoadBalancerRemoveSniMatchOperation is used to monitor the state of RemoveSniMatch operations.
type LoadBalancerRemoveSniMatchOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerRemoveSniMatchOperation) Metadata() *apploadbalancer.RemoveSniMatchMetadata {
	return o.Operation.Metadata().(*apploadbalancer.RemoveSniMatchMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerRemoveSniMatchOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerRemoveSniMatchOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerRemoveSniMatchOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveSniMatch is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) RemoveSniMatch(ctx context.Context, in *apploadbalancer.RemoveSniMatchRequest, opts ...grpc.CallOption) (*LoadBalancerRemoveSniMatchOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerRemoveSniMatch, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).RemoveSniMatch(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.RemoveSniMatchMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.RemoveSniMatchMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerRemoveSniMatchOperation{*op}, nil
}

// GetTargetStates is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
func (c loadBalancerClient) GetTargetStates(ctx context.Context, in *apploadbalancer.GetTargetStatesRequest, opts ...grpc.CallOption) (*apploadbalancer.GetTargetStatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerGetTargetStates, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewLoadBalancerServiceClient(connection).GetTargetStates(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
func (c loadBalancerClient) ListOperations(ctx context.Context, in *apploadbalancer.ListLoadBalancerOperationsRequest, opts ...grpc.CallOption) (*apploadbalancer.ListLoadBalancerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewLoadBalancerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// LoadBalancerStartZonalShiftOperation is used to monitor the state of StartZonalShift operations.
type LoadBalancerStartZonalShiftOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerStartZonalShiftOperation) Metadata() *apploadbalancer.StartZonalShiftMetadata {
	return o.Operation.Metadata().(*apploadbalancer.StartZonalShiftMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerStartZonalShiftOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerStartZonalShiftOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerStartZonalShiftOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// StartZonalShift is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) StartZonalShift(ctx context.Context, in *apploadbalancer.StartZonalShiftRequest, opts ...grpc.CallOption) (*LoadBalancerStartZonalShiftOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerStartZonalShift, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).StartZonalShift(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.StartZonalShiftMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.StartZonalShiftMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerStartZonalShiftOperation{*op}, nil
}

// LoadBalancerCancelZonalShiftOperation is used to monitor the state of CancelZonalShift operations.
type LoadBalancerCancelZonalShiftOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerCancelZonalShiftOperation) Metadata() *apploadbalancer.CancelZonalShiftMetadata {
	return o.Operation.Metadata().(*apploadbalancer.CancelZonalShiftMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerCancelZonalShiftOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerCancelZonalShiftOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerCancelZonalShiftOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// CancelZonalShift is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) CancelZonalShift(ctx context.Context, in *apploadbalancer.CancelZonalShiftRequest, opts ...grpc.CallOption) (*LoadBalancerCancelZonalShiftOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerCancelZonalShift, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).CancelZonalShift(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.CancelZonalShiftMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.CancelZonalShiftMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerCancelZonalShiftOperation{*op}, nil
}

// LoadBalancerDisableZonesOperation is used to monitor the state of DisableZones operations.
type LoadBalancerDisableZonesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerDisableZonesOperation) Metadata() *apploadbalancer.DisableZonesMetadata {
	return o.Operation.Metadata().(*apploadbalancer.DisableZonesMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerDisableZonesOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerDisableZonesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerDisableZonesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// DisableZones is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) DisableZones(ctx context.Context, in *apploadbalancer.DisableZonesRequest, opts ...grpc.CallOption) (*LoadBalancerDisableZonesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerDisableZones, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).DisableZones(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.DisableZonesMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.DisableZonesMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerDisableZonesOperation{*op}, nil
}

// LoadBalancerEnableZonesOperation is used to monitor the state of EnableZones operations.
type LoadBalancerEnableZonesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LoadBalancerEnableZonesOperation) Metadata() *apploadbalancer.EnableZonesMetadata {
	return o.Operation.Metadata().(*apploadbalancer.EnableZonesMetadata)
}

// Response retrieves the operation response.
func (o *LoadBalancerEnableZonesOperation) Response() *apploadbalancer.LoadBalancer {
	return o.Operation.Response().(*apploadbalancer.LoadBalancer)
}

// Wait polls the operation until it's done.
func (o *LoadBalancerEnableZonesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LoadBalancerEnableZonesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.LoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.LoadBalancer)
	return response, err
}

// EnableZones is an operation of Yandex.Cloud Apploadbalancer LoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c loadBalancerClient) EnableZones(ctx context.Context, in *apploadbalancer.EnableZonesRequest, opts ...grpc.CallOption) (*LoadBalancerEnableZonesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerEnableZones, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewLoadBalancerServiceClient(connection).EnableZones(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.EnableZonesMetadata).GetLoadBalancerId()
		},
		MetadataType: (*apploadbalancer.EnableZonesMetadata)(nil),
		ResponseType: (*apploadbalancer.LoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LoadBalancerEnableZonesOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c loadBalancerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LoadBalancerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	LoadBalancerGet              = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Get")
	LoadBalancerList             = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.List")
	LoadBalancerCreate           = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Create")
	LoadBalancerUpdate           = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Update")
	LoadBalancerDelete           = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Delete")
	LoadBalancerStart            = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Start")
	LoadBalancerStop             = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.Stop")
	LoadBalancerAddListener      = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.AddListener")
	LoadBalancerRemoveListener   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.RemoveListener")
	LoadBalancerUpdateListener   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.UpdateListener")
	LoadBalancerAddSniMatch      = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.AddSniMatch")
	LoadBalancerUpdateSniMatch   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.UpdateSniMatch")
	LoadBalancerRemoveSniMatch   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.RemoveSniMatch")
	LoadBalancerGetTargetStates  = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.GetTargetStates")
	LoadBalancerListOperations   = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.ListOperations")
	LoadBalancerStartZonalShift  = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.StartZonalShift")
	LoadBalancerCancelZonalShift = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.CancelZonalShift")
	LoadBalancerDisableZones     = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.DisableZones")
	LoadBalancerEnableZones      = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.LoadBalancerService.EnableZones")
	LoadBalancerOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
