// Code generated by sdkgen-v2. DO NOT EDIT.
package apploadbalancersdk

import (
	"context"

	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// VirtualHostClient provides methods for managing VirtualHost resources of Yandex.Cloud Apploadbalancer.
type VirtualHostClient interface {
	Get(context.Context, *apploadbalancer.GetVirtualHostRequest, ...grpc.CallOption) (*apploadbalancer.VirtualHost, error)
	List(context.Context, *apploadbalancer.ListVirtualHostsRequest, ...grpc.CallOption) (*apploadbalancer.ListVirtualHostsResponse, error)
	Create(context.Context, *apploadbalancer.CreateVirtualHostRequest, ...grpc.CallOption) (*VirtualHostCreateOperation, error)
	Update(context.Context, *apploadbalancer.UpdateVirtualHostRequest, ...grpc.CallOption) (*VirtualHostUpdateOperation, error)
	Delete(context.Context, *apploadbalancer.DeleteVirtualHostRequest, ...grpc.CallOption) (*VirtualHostDeleteOperation, error)
	RemoveRoute(context.Context, *apploadbalancer.RemoveRouteRequest, ...grpc.CallOption) (*VirtualHostRemoveRouteOperation, error)
	UpdateRoute(context.Context, *apploadbalancer.UpdateRouteRequest, ...grpc.CallOption) (*VirtualHostUpdateRouteOperation, error)
}

var _ VirtualHostClient = virtualHostClient{}

type virtualHostClient struct {
	connector transport.Connector
}

// NewVirtualHostClient returns VirtualHostClient implementation.
func NewVirtualHostClient(connector transport.Connector) VirtualHostClient {
	return virtualHostClient{connector}
}

// Get is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
func (c virtualHostClient) Get(ctx context.Context, in *apploadbalancer.GetVirtualHostRequest, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostGet, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewVirtualHostServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
func (c virtualHostClient) List(ctx context.Context, in *apploadbalancer.ListVirtualHostsRequest, opts ...grpc.CallOption) (*apploadbalancer.ListVirtualHostsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostList, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewVirtualHostServiceClient(connection).List(ctx, in, opts...)
}

// VirtualHostCreateOperation is used to monitor the state of Create operations.
type VirtualHostCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VirtualHostCreateOperation) Metadata() *apploadbalancer.CreateVirtualHostMetadata {
	return o.Operation.Metadata().(*apploadbalancer.CreateVirtualHostMetadata)
}

// Response retrieves the operation response.
func (o *VirtualHostCreateOperation) Response() *apploadbalancer.VirtualHost {
	return o.Operation.Response().(*apploadbalancer.VirtualHost)
}

// Wait polls the operation until it's done.
func (o *VirtualHostCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VirtualHostCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// Create is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
// It returns an object which should be used to monitor the operation state.
func (c virtualHostClient) Create(ctx context.Context, in *apploadbalancer.CreateVirtualHostRequest, opts ...grpc.CallOption) (*VirtualHostCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewVirtualHostServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*apploadbalancer.CreateVirtualHostMetadata)(nil),
		ResponseType: (*apploadbalancer.VirtualHost)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VirtualHostCreateOperation{*op}, nil
}

// VirtualHostUpdateOperation is used to monitor the state of Update operations.
type VirtualHostUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VirtualHostUpdateOperation) Metadata() *apploadbalancer.UpdateVirtualHostMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateVirtualHostMetadata)
}

// Response retrieves the operation response.
func (o *VirtualHostUpdateOperation) Response() *apploadbalancer.VirtualHost {
	return o.Operation.Response().(*apploadbalancer.VirtualHost)
}

// Wait polls the operation until it's done.
func (o *VirtualHostUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VirtualHostUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// Update is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
// It returns an object which should be used to monitor the operation state.
func (c virtualHostClient) Update(ctx context.Context, in *apploadbalancer.UpdateVirtualHostRequest, opts ...grpc.CallOption) (*VirtualHostUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewVirtualHostServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*apploadbalancer.UpdateVirtualHostMetadata)(nil),
		ResponseType: (*apploadbalancer.VirtualHost)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VirtualHostUpdateOperation{*op}, nil
}

// VirtualHostDeleteOperation is used to monitor the state of Delete operations.
type VirtualHostDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VirtualHostDeleteOperation) Metadata() *apploadbalancer.DeleteVirtualHostMetadata {
	return o.Operation.Metadata().(*apploadbalancer.DeleteVirtualHostMetadata)
}

// Response retrieves the operation response.
func (o *VirtualHostDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *VirtualHostDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VirtualHostDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
// It returns an object which should be used to monitor the operation state.
func (c virtualHostClient) Delete(ctx context.Context, in *apploadbalancer.DeleteVirtualHostRequest, opts ...grpc.CallOption) (*VirtualHostDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewVirtualHostServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*apploadbalancer.DeleteVirtualHostMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VirtualHostDeleteOperation{*op}, nil
}

// VirtualHostRemoveRouteOperation is used to monitor the state of RemoveRoute operations.
type VirtualHostRemoveRouteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VirtualHostRemoveRouteOperation) Metadata() *apploadbalancer.RemoveRouteMetadata {
	return o.Operation.Metadata().(*apploadbalancer.RemoveRouteMetadata)
}

// Response retrieves the operation response.
func (o *VirtualHostRemoveRouteOperation) Response() *apploadbalancer.VirtualHost {
	return o.Operation.Response().(*apploadbalancer.VirtualHost)
}

// Wait polls the operation until it's done.
func (o *VirtualHostRemoveRouteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VirtualHostRemoveRouteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// RemoveRoute is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
// It returns an object which should be used to monitor the operation state.
func (c virtualHostClient) RemoveRoute(ctx context.Context, in *apploadbalancer.RemoveRouteRequest, opts ...grpc.CallOption) (*VirtualHostRemoveRouteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostRemoveRoute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewVirtualHostServiceClient(connection).RemoveRoute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*apploadbalancer.RemoveRouteMetadata)(nil),
		ResponseType: (*apploadbalancer.VirtualHost)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VirtualHostRemoveRouteOperation{*op}, nil
}

// VirtualHostUpdateRouteOperation is used to monitor the state of UpdateRoute operations.
type VirtualHostUpdateRouteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VirtualHostUpdateRouteOperation) Metadata() *apploadbalancer.UpdateRouteMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateRouteMetadata)
}

// Response retrieves the operation response.
func (o *VirtualHostUpdateRouteOperation) Response() *apploadbalancer.VirtualHost {
	return o.Operation.Response().(*apploadbalancer.VirtualHost)
}

// Wait polls the operation until it's done.
func (o *VirtualHostUpdateRouteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VirtualHostUpdateRouteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.VirtualHost, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.VirtualHost)
	return response, err
}

// UpdateRoute is an operation of Yandex.Cloud Apploadbalancer VirtualHost service.
// It returns an object which should be used to monitor the operation state.
func (c virtualHostClient) UpdateRoute(ctx context.Context, in *apploadbalancer.UpdateRouteRequest, opts ...grpc.CallOption) (*VirtualHostUpdateRouteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostUpdateRoute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewVirtualHostServiceClient(connection).UpdateRoute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*apploadbalancer.UpdateRouteMetadata)(nil),
		ResponseType: (*apploadbalancer.VirtualHost)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VirtualHostUpdateRouteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c virtualHostClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VirtualHostOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	VirtualHostGet             = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.Get")
	VirtualHostList            = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.List")
	VirtualHostCreate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.Create")
	VirtualHostUpdate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.Update")
	VirtualHostDelete          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.Delete")
	VirtualHostRemoveRoute     = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.RemoveRoute")
	VirtualHostUpdateRoute     = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.VirtualHostService.UpdateRoute")
	VirtualHostOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
