// Code generated by sdkgen-v2. DO NOT EDIT.
package apploadbalancersdk

import (
	"context"

	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// HttpRouterClient provides methods for managing HttpRouter resources of Yandex.Cloud Apploadbalancer.
type HttpRouterClient interface {
	Get(context.Context, *apploadbalancer.GetHttpRouterRequest, ...grpc.CallOption) (*apploadbalancer.HttpRouter, error)
	List(context.Context, *apploadbalancer.ListHttpRoutersRequest, ...grpc.CallOption) (*apploadbalancer.ListHttpRoutersResponse, error)
	Create(context.Context, *apploadbalancer.CreateHttpRouterRequest, ...grpc.CallOption) (*HttpRouterCreateOperation, error)
	Update(context.Context, *apploadbalancer.UpdateHttpRouterRequest, ...grpc.CallOption) (*HttpRouterUpdateOperation, error)
	Delete(context.Context, *apploadbalancer.DeleteHttpRouterRequest, ...grpc.CallOption) (*HttpRouterDeleteOperation, error)
	ListOperations(context.Context, *apploadbalancer.ListHttpRouterOperationsRequest, ...grpc.CallOption) (*apploadbalancer.ListHttpRouterOperationsResponse, error)
}

var _ HttpRouterClient = httpRouterClient{}

type httpRouterClient struct {
	connector transport.Connector
}

// NewHttpRouterClient returns HttpRouterClient implementation.
func NewHttpRouterClient(connector transport.Connector) HttpRouterClient {
	return httpRouterClient{connector}
}

// Get is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
func (c httpRouterClient) Get(ctx context.Context, in *apploadbalancer.GetHttpRouterRequest, opts ...grpc.CallOption) (*apploadbalancer.HttpRouter, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterGet, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewHttpRouterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
func (c httpRouterClient) List(ctx context.Context, in *apploadbalancer.ListHttpRoutersRequest, opts ...grpc.CallOption) (*apploadbalancer.ListHttpRoutersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterList, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewHttpRouterServiceClient(connection).List(ctx, in, opts...)
}

// HttpRouterCreateOperation is used to monitor the state of Create operations.
type HttpRouterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HttpRouterCreateOperation) Metadata() *apploadbalancer.CreateHttpRouterMetadata {
	return o.Operation.Metadata().(*apploadbalancer.CreateHttpRouterMetadata)
}

// Response retrieves the operation response.
func (o *HttpRouterCreateOperation) Response() *apploadbalancer.HttpRouter {
	return o.Operation.Response().(*apploadbalancer.HttpRouter)
}

// Wait polls the operation until it's done.
func (o *HttpRouterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.HttpRouter, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.HttpRouter)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HttpRouterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.HttpRouter, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.HttpRouter)
	return response, err
}

// Create is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
// It returns an object which should be used to monitor the operation state.
func (c httpRouterClient) Create(ctx context.Context, in *apploadbalancer.CreateHttpRouterRequest, opts ...grpc.CallOption) (*HttpRouterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewHttpRouterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.CreateHttpRouterMetadata).GetHttpRouterId()
		},
		MetadataType: (*apploadbalancer.CreateHttpRouterMetadata)(nil),
		ResponseType: (*apploadbalancer.HttpRouter)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HttpRouterCreateOperation{*op}, nil
}

// HttpRouterUpdateOperation is used to monitor the state of Update operations.
type HttpRouterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HttpRouterUpdateOperation) Metadata() *apploadbalancer.UpdateHttpRouterMetadata {
	return o.Operation.Metadata().(*apploadbalancer.UpdateHttpRouterMetadata)
}

// Response retrieves the operation response.
func (o *HttpRouterUpdateOperation) Response() *apploadbalancer.HttpRouter {
	return o.Operation.Response().(*apploadbalancer.HttpRouter)
}

// Wait polls the operation until it's done.
func (o *HttpRouterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apploadbalancer.HttpRouter, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apploadbalancer.HttpRouter)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HttpRouterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apploadbalancer.HttpRouter, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apploadbalancer.HttpRouter)
	return response, err
}

// Update is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
// It returns an object which should be used to monitor the operation state.
func (c httpRouterClient) Update(ctx context.Context, in *apploadbalancer.UpdateHttpRouterRequest, opts ...grpc.CallOption) (*HttpRouterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewHttpRouterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.UpdateHttpRouterMetadata).GetHttpRouterId()
		},
		MetadataType: (*apploadbalancer.UpdateHttpRouterMetadata)(nil),
		ResponseType: (*apploadbalancer.HttpRouter)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HttpRouterUpdateOperation{*op}, nil
}

// HttpRouterDeleteOperation is used to monitor the state of Delete operations.
type HttpRouterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HttpRouterDeleteOperation) Metadata() *apploadbalancer.DeleteHttpRouterMetadata {
	return o.Operation.Metadata().(*apploadbalancer.DeleteHttpRouterMetadata)
}

// Response retrieves the operation response.
func (o *HttpRouterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HttpRouterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HttpRouterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
// It returns an object which should be used to monitor the operation state.
func (c httpRouterClient) Delete(ctx context.Context, in *apploadbalancer.DeleteHttpRouterRequest, opts ...grpc.CallOption) (*HttpRouterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apploadbalancer.NewHttpRouterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apploadbalancer.DeleteHttpRouterMetadata).GetHttpRouterId()
		},
		MetadataType: (*apploadbalancer.DeleteHttpRouterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HttpRouterDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Apploadbalancer HttpRouter service.
func (c httpRouterClient) ListOperations(ctx context.Context, in *apploadbalancer.ListHttpRouterOperationsRequest, opts ...grpc.CallOption) (*apploadbalancer.ListHttpRouterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return apploadbalancer.NewHttpRouterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c httpRouterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HttpRouterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	HttpRouterGet             = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.Get")
	HttpRouterList            = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.List")
	HttpRouterCreate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.Create")
	HttpRouterUpdate          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.Update")
	HttpRouterDelete          = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.Delete")
	HttpRouterListOperations  = protoreflect.FullName("yandex.cloud.apploadbalancer.v1.HttpRouterService.ListOperations")
	HttpRouterOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
