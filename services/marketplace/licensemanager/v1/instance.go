// Code generated by sdkgen-v2. DO NOT EDIT.
package licensemanagersdk

import (
	"context"

	licensemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/licensemanager/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// InstanceClient provides methods for managing Instance resources of Yandex.Cloud Licensemanager.
type InstanceClient interface {
	Get(context.Context, *licensemanager.GetInstanceRequest, ...grpc.CallOption) (*licensemanager.Instance, error)
	List(context.Context, *licensemanager.ListInstancesRequest, ...grpc.CallOption) (*licensemanager.ListInstancesResponse, error)
}

var _ InstanceClient = instanceClient{}

type instanceClient struct {
	connector transport.Connector
}

// NewInstanceClient returns InstanceClient implementation.
func NewInstanceClient(connector transport.Connector) InstanceClient {
	return instanceClient{connector}
}

// Get is an operation of Yandex.Cloud Licensemanager Instance service.
func (c instanceClient) Get(ctx context.Context, in *licensemanager.GetInstanceRequest, opts ...grpc.CallOption) (*licensemanager.Instance, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewInstanceServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Licensemanager Instance service.
func (c instanceClient) List(ctx context.Context, in *licensemanager.ListInstancesRequest, opts ...grpc.CallOption) (*licensemanager.ListInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceList, opts...)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewInstanceServiceClient(connection).List(ctx, in, opts...)
}

var (
	InstanceGet  = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.InstanceService.Get")
	InstanceList = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.InstanceService.List")
)
