// Code generated by sdkgen-v2. DO NOT EDIT.
package licensemanagersdk

import (
	"context"

	licensemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/licensemanager/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// LockClient provides methods for managing Lock resources of Yandex.Cloud Licensemanager.
type LockClient interface {
	Get(context.Context, *licensemanager.GetLockRequest, ...grpc.CallOption) (*licensemanager.Lock, error)
	GetByInstanceAndResource(context.Context, *licensemanager.GetLockByInstanceAndResourceRequest, ...grpc.CallOption) (*licensemanager.Lock, error)
	List(context.Context, *licensemanager.ListLocksRequest, ...grpc.CallOption) (*licensemanager.ListLocksResponse, error)
	Create(context.Context, *licensemanager.CreateLockRequest, ...grpc.CallOption) (*LockCreateOperation, error)
	Ensure(context.Context, *licensemanager.EnsureLockRequest, ...grpc.CallOption) (*LockEnsureOperation, error)
	Delete(context.Context, *licensemanager.DeleteLockRequest, ...grpc.CallOption) (*LockDeleteOperation, error)
}

var _ LockClient = lockClient{}

type lockClient struct {
	connector transport.Connector
}

// NewLockClient returns LockClient implementation.
func NewLockClient(connector transport.Connector) LockClient {
	return lockClient{connector}
}

// Get is an operation of Yandex.Cloud Licensemanager Lock service.
func (c lockClient) Get(ctx context.Context, in *licensemanager.GetLockRequest, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	connection, err := c.connector.GetConnection(ctx, LockGet, opts...)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(connection).Get(ctx, in, opts...)
}

// GetByInstanceAndResource is an operation of Yandex.Cloud Licensemanager Lock service.
func (c lockClient) GetByInstanceAndResource(ctx context.Context, in *licensemanager.GetLockByInstanceAndResourceRequest, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	connection, err := c.connector.GetConnection(ctx, LockGetByInstanceAndResource, opts...)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(connection).GetByInstanceAndResource(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Licensemanager Lock service.
func (c lockClient) List(ctx context.Context, in *licensemanager.ListLocksRequest, opts ...grpc.CallOption) (*licensemanager.ListLocksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LockList, opts...)
	if err != nil {
		return nil, err
	}
	return licensemanager.NewLockServiceClient(connection).List(ctx, in, opts...)
}

// LockCreateOperation is used to monitor the state of Create operations.
type LockCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LockCreateOperation) Metadata() *licensemanager.CreateLockMetadata {
	return o.Operation.Metadata().(*licensemanager.CreateLockMetadata)
}

// Response retrieves the operation response.
func (o *LockCreateOperation) Response() *licensemanager.Lock {
	return o.Operation.Response().(*licensemanager.Lock)
}

// Wait polls the operation until it's done.
func (o *LockCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*licensemanager.Lock)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LockCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*licensemanager.Lock)
	return response, err
}

// Create is an operation of Yandex.Cloud Licensemanager Lock service.
// It returns an object which should be used to monitor the operation state.
func (c lockClient) Create(ctx context.Context, in *licensemanager.CreateLockRequest, opts ...grpc.CallOption) (*LockCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LockCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := licensemanager.NewLockServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*licensemanager.CreateLockMetadata).GetLockId()
		},
		MetadataType: (*licensemanager.CreateLockMetadata)(nil),
		ResponseType: (*licensemanager.Lock)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LockCreateOperation{*op}, nil
}

// LockEnsureOperation is used to monitor the state of Ensure operations.
type LockEnsureOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LockEnsureOperation) Metadata() *licensemanager.EnsureLockMetadata {
	return o.Operation.Metadata().(*licensemanager.EnsureLockMetadata)
}

// Response retrieves the operation response.
func (o *LockEnsureOperation) Response() *licensemanager.Lock {
	return o.Operation.Response().(*licensemanager.Lock)
}

// Wait polls the operation until it's done.
func (o *LockEnsureOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*licensemanager.Lock)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LockEnsureOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*licensemanager.Lock, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*licensemanager.Lock)
	return response, err
}

// Ensure is an operation of Yandex.Cloud Licensemanager Lock service.
// It returns an object which should be used to monitor the operation state.
func (c lockClient) Ensure(ctx context.Context, in *licensemanager.EnsureLockRequest, opts ...grpc.CallOption) (*LockEnsureOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LockEnsure, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := licensemanager.NewLockServiceClient(connection).Ensure(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*licensemanager.EnsureLockMetadata).GetLockId()
		},
		MetadataType: (*licensemanager.EnsureLockMetadata)(nil),
		ResponseType: (*licensemanager.Lock)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LockEnsureOperation{*op}, nil
}

// LockDeleteOperation is used to monitor the state of Delete operations.
type LockDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LockDeleteOperation) Metadata() *licensemanager.DeleteLockMetadata {
	return o.Operation.Metadata().(*licensemanager.DeleteLockMetadata)
}

// Response retrieves the operation response.
func (o *LockDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LockDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LockDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Licensemanager Lock service.
// It returns an object which should be used to monitor the operation state.
func (c lockClient) Delete(ctx context.Context, in *licensemanager.DeleteLockRequest, opts ...grpc.CallOption) (*LockDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LockDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := licensemanager.NewLockServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*licensemanager.DeleteLockMetadata).GetLockId()
		},
		MetadataType: (*licensemanager.DeleteLockMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LockDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c lockClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LockOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	LockGet                      = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.Get")
	LockGetByInstanceAndResource = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.GetByInstanceAndResource")
	LockList                     = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.List")
	LockCreate                   = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.Create")
	LockEnsure                   = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.Ensure")
	LockDelete                   = protoreflect.FullName("yandex.cloud.marketplace.licensemanager.v1.LockService.Delete")
	LockOperationPoller          = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
