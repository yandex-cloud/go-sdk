// Code generated by sdkgen-v2. DO NOT EDIT.
package saassdk

import (
	"context"

	saas "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/pim/v1/saas"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// ProductInstanceClient provides methods for managing ProductInstance resources of Yandex.Cloud Saas.
type ProductInstanceClient interface {
	Get(context.Context, *saas.GetProductInstanceRequest, ...grpc.CallOption) (*saas.ProductInstance, error)
	Claim(context.Context, *saas.ClaimProductInstanceRequest, ...grpc.CallOption) (*ProductInstanceClaimOperation, error)
}

var _ ProductInstanceClient = productInstanceClient{}

type productInstanceClient struct {
	connector transport.Connector
}

// NewProductInstanceClient returns ProductInstanceClient implementation.
func NewProductInstanceClient(connector transport.Connector) ProductInstanceClient {
	return productInstanceClient{connector}
}

// Get is an operation of Yandex.Cloud Saas ProductInstance service.
func (c productInstanceClient) Get(ctx context.Context, in *saas.GetProductInstanceRequest, opts ...grpc.CallOption) (*saas.ProductInstance, error) {
	connection, err := c.connector.GetConnection(ctx, ProductInstanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return saas.NewProductInstanceServiceClient(connection).Get(ctx, in, opts...)
}

// ProductInstanceClaimOperation is used to monitor the state of Claim operations.
type ProductInstanceClaimOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProductInstanceClaimOperation) Metadata() *saas.ClaimProductInstanceMetadata {
	return o.Operation.Metadata().(*saas.ClaimProductInstanceMetadata)
}

// Response retrieves the operation response.
func (o *ProductInstanceClaimOperation) Response() *saas.ProductInstance {
	return o.Operation.Response().(*saas.ProductInstance)
}

// Wait polls the operation until it's done.
func (o *ProductInstanceClaimOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*saas.ProductInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*saas.ProductInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProductInstanceClaimOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*saas.ProductInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*saas.ProductInstance)
	return response, err
}

// Claim is an operation of Yandex.Cloud Saas ProductInstance service.
// It returns an object which should be used to monitor the operation state.
func (c productInstanceClient) Claim(ctx context.Context, in *saas.ClaimProductInstanceRequest, opts ...grpc.CallOption) (*ProductInstanceClaimOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProductInstanceClaim, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := saas.NewProductInstanceServiceClient(connection).Claim(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*saas.ClaimProductInstanceMetadata).GetProductInstanceId()
		},
		MetadataType: (*saas.ClaimProductInstanceMetadata)(nil),
		ResponseType: (*saas.ProductInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProductInstanceClaimOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c productInstanceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProductInstanceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ProductInstanceGet             = protoreflect.FullName("yandex.cloud.marketplace.pim.v1.saas.ProductInstanceService.Get")
	ProductInstanceClaim           = protoreflect.FullName("yandex.cloud.marketplace.pim.v1.saas.ProductInstanceService.Claim")
	ProductInstanceOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
