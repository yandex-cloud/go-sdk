// Code generated by sdkgen-v2. DO NOT EDIT.
package cloudroutersdk

import (
	"context"

	cloudrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudrouter/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RoutingInstanceClient provides methods for managing RoutingInstance resources of Yandex.Cloud Cloudrouter.
type RoutingInstanceClient interface {
	Get(context.Context, *cloudrouter.GetRoutingInstanceRequest, ...grpc.CallOption) (*cloudrouter.RoutingInstance, error)
	GetByVpcNetworkId(context.Context, *cloudrouter.GetRoutingInstanceByVpcNetworkIdRequest, ...grpc.CallOption) (*cloudrouter.RoutingInstance, error)
	GetByCicPrivateConnectionId(context.Context, *cloudrouter.GetRoutingInstanceByCicPrivateConnectionIdRequest, ...grpc.CallOption) (*cloudrouter.RoutingInstance, error)
	List(context.Context, *cloudrouter.ListRoutingInstancesRequest, ...grpc.CallOption) (*cloudrouter.ListRoutingInstancesResponse, error)
	Create(context.Context, *cloudrouter.CreateRoutingInstanceRequest, ...grpc.CallOption) (*RoutingInstanceCreateOperation, error)
	Update(context.Context, *cloudrouter.UpdateRoutingInstanceRequest, ...grpc.CallOption) (*RoutingInstanceUpdateOperation, error)
	UpsertPrefixes(context.Context, *cloudrouter.UpsertPrefixesRequest, ...grpc.CallOption) (*RoutingInstanceUpsertPrefixesOperation, error)
	RemovePrefixes(context.Context, *cloudrouter.RemovePrefixesRequest, ...grpc.CallOption) (*RoutingInstanceRemovePrefixesOperation, error)
	MovePrefix(context.Context, *cloudrouter.MovePrefixRequest, ...grpc.CallOption) (*RoutingInstanceMovePrefixOperation, error)
	UpdatePrefixMask(context.Context, *cloudrouter.UpdatePrefixMaskRequest, ...grpc.CallOption) (*RoutingInstanceUpdatePrefixMaskOperation, error)
	AddPrivateConnection(context.Context, *cloudrouter.AddPrivateConnectionRequest, ...grpc.CallOption) (*RoutingInstanceAddPrivateConnectionOperation, error)
	RemovePrivateConnection(context.Context, *cloudrouter.RemovePrivateConnectionRequest, ...grpc.CallOption) (*RoutingInstanceRemovePrivateConnectionOperation, error)
	Delete(context.Context, *cloudrouter.DeleteRoutingInstanceRequest, ...grpc.CallOption) (*RoutingInstanceDeleteOperation, error)
	ListOperations(context.Context, *cloudrouter.ListRoutingInstanceOperationsRequest, ...grpc.CallOption) (*cloudrouter.ListRoutingInstanceOperationsResponse, error)
}

var _ RoutingInstanceClient = routingInstanceClient{}

type routingInstanceClient struct {
	connector transport.Connector
}

// NewRoutingInstanceClient returns RoutingInstanceClient implementation.
func NewRoutingInstanceClient(connector transport.Connector) RoutingInstanceClient {
	return routingInstanceClient{connector}
}

// Get is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
func (c routingInstanceClient) Get(ctx context.Context, in *cloudrouter.GetRoutingInstanceRequest, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return cloudrouter.NewRoutingInstanceServiceClient(connection).Get(ctx, in, opts...)
}

// GetByVpcNetworkId is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
func (c routingInstanceClient) GetByVpcNetworkId(ctx context.Context, in *cloudrouter.GetRoutingInstanceByVpcNetworkIdRequest, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceGetByVpcNetworkId, opts...)
	if err != nil {
		return nil, err
	}
	return cloudrouter.NewRoutingInstanceServiceClient(connection).GetByVpcNetworkId(ctx, in, opts...)
}

// GetByCicPrivateConnectionId is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
func (c routingInstanceClient) GetByCicPrivateConnectionId(ctx context.Context, in *cloudrouter.GetRoutingInstanceByCicPrivateConnectionIdRequest, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceGetByCicPrivateConnectionId, opts...)
	if err != nil {
		return nil, err
	}
	return cloudrouter.NewRoutingInstanceServiceClient(connection).GetByCicPrivateConnectionId(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
func (c routingInstanceClient) List(ctx context.Context, in *cloudrouter.ListRoutingInstancesRequest, opts ...grpc.CallOption) (*cloudrouter.ListRoutingInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceList, opts...)
	if err != nil {
		return nil, err
	}
	return cloudrouter.NewRoutingInstanceServiceClient(connection).List(ctx, in, opts...)
}

// RoutingInstanceCreateOperation is used to monitor the state of Create operations.
type RoutingInstanceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceCreateOperation) Metadata() *cloudrouter.CreateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.CreateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceCreateOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// Create is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) Create(ctx context.Context, in *cloudrouter.CreateRoutingInstanceRequest, opts ...grpc.CallOption) (*RoutingInstanceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.CreateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.CreateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceCreateOperation{*op}, nil
}

// RoutingInstanceUpdateOperation is used to monitor the state of Update operations.
type RoutingInstanceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceUpdateOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceUpdateOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// Update is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) Update(ctx context.Context, in *cloudrouter.UpdateRoutingInstanceRequest, opts ...grpc.CallOption) (*RoutingInstanceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceUpdateOperation{*op}, nil
}

// RoutingInstanceUpsertPrefixesOperation is used to monitor the state of UpsertPrefixes operations.
type RoutingInstanceUpsertPrefixesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceUpsertPrefixesOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceUpsertPrefixesOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceUpsertPrefixesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceUpsertPrefixesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// UpsertPrefixes is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) UpsertPrefixes(ctx context.Context, in *cloudrouter.UpsertPrefixesRequest, opts ...grpc.CallOption) (*RoutingInstanceUpsertPrefixesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceUpsertPrefixes, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).UpsertPrefixes(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceUpsertPrefixesOperation{*op}, nil
}

// RoutingInstanceRemovePrefixesOperation is used to monitor the state of RemovePrefixes operations.
type RoutingInstanceRemovePrefixesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceRemovePrefixesOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceRemovePrefixesOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceRemovePrefixesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceRemovePrefixesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// RemovePrefixes is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) RemovePrefixes(ctx context.Context, in *cloudrouter.RemovePrefixesRequest, opts ...grpc.CallOption) (*RoutingInstanceRemovePrefixesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceRemovePrefixes, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).RemovePrefixes(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceRemovePrefixesOperation{*op}, nil
}

// RoutingInstanceMovePrefixOperation is used to monitor the state of MovePrefix operations.
type RoutingInstanceMovePrefixOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceMovePrefixOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceMovePrefixOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceMovePrefixOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceMovePrefixOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// MovePrefix is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) MovePrefix(ctx context.Context, in *cloudrouter.MovePrefixRequest, opts ...grpc.CallOption) (*RoutingInstanceMovePrefixOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceMovePrefix, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).MovePrefix(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceMovePrefixOperation{*op}, nil
}

// RoutingInstanceUpdatePrefixMaskOperation is used to monitor the state of UpdatePrefixMask operations.
type RoutingInstanceUpdatePrefixMaskOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceUpdatePrefixMaskOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceUpdatePrefixMaskOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceUpdatePrefixMaskOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceUpdatePrefixMaskOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// UpdatePrefixMask is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) UpdatePrefixMask(ctx context.Context, in *cloudrouter.UpdatePrefixMaskRequest, opts ...grpc.CallOption) (*RoutingInstanceUpdatePrefixMaskOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceUpdatePrefixMask, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).UpdatePrefixMask(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceUpdatePrefixMaskOperation{*op}, nil
}

// RoutingInstanceAddPrivateConnectionOperation is used to monitor the state of AddPrivateConnection operations.
type RoutingInstanceAddPrivateConnectionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceAddPrivateConnectionOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceAddPrivateConnectionOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceAddPrivateConnectionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceAddPrivateConnectionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// AddPrivateConnection is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) AddPrivateConnection(ctx context.Context, in *cloudrouter.AddPrivateConnectionRequest, opts ...grpc.CallOption) (*RoutingInstanceAddPrivateConnectionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceAddPrivateConnection, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).AddPrivateConnection(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceAddPrivateConnectionOperation{*op}, nil
}

// RoutingInstanceRemovePrivateConnectionOperation is used to monitor the state of RemovePrivateConnection operations.
type RoutingInstanceRemovePrivateConnectionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceRemovePrivateConnectionOperation) Metadata() *cloudrouter.UpdateRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.UpdateRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceRemovePrivateConnectionOperation) Response() *cloudrouter.RoutingInstance {
	return o.Operation.Response().(*cloudrouter.RoutingInstance)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceRemovePrivateConnectionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceRemovePrivateConnectionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudrouter.RoutingInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudrouter.RoutingInstance)
	return response, err
}

// RemovePrivateConnection is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) RemovePrivateConnection(ctx context.Context, in *cloudrouter.RemovePrivateConnectionRequest, opts ...grpc.CallOption) (*RoutingInstanceRemovePrivateConnectionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceRemovePrivateConnection, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).RemovePrivateConnection(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.UpdateRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.UpdateRoutingInstanceMetadata)(nil),
		ResponseType: (*cloudrouter.RoutingInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceRemovePrivateConnectionOperation{*op}, nil
}

// RoutingInstanceDeleteOperation is used to monitor the state of Delete operations.
type RoutingInstanceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RoutingInstanceDeleteOperation) Metadata() *cloudrouter.DeleteRoutingInstanceMetadata {
	return o.Operation.Metadata().(*cloudrouter.DeleteRoutingInstanceMetadata)
}

// Response retrieves the operation response.
func (o *RoutingInstanceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RoutingInstanceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RoutingInstanceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
// It returns an object which should be used to monitor the operation state.
func (c routingInstanceClient) Delete(ctx context.Context, in *cloudrouter.DeleteRoutingInstanceRequest, opts ...grpc.CallOption) (*RoutingInstanceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudrouter.NewRoutingInstanceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudrouter.DeleteRoutingInstanceMetadata).GetRoutingInstanceId()
		},
		MetadataType: (*cloudrouter.DeleteRoutingInstanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RoutingInstanceDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Cloudrouter RoutingInstance service.
func (c routingInstanceClient) ListOperations(ctx context.Context, in *cloudrouter.ListRoutingInstanceOperationsRequest, opts ...grpc.CallOption) (*cloudrouter.ListRoutingInstanceOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return cloudrouter.NewRoutingInstanceServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c routingInstanceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RoutingInstanceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RoutingInstanceGet                         = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.Get")
	RoutingInstanceGetByVpcNetworkId           = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByVpcNetworkId")
	RoutingInstanceGetByCicPrivateConnectionId = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByCicPrivateConnectionId")
	RoutingInstanceList                        = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.List")
	RoutingInstanceCreate                      = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.Create")
	RoutingInstanceUpdate                      = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.Update")
	RoutingInstanceUpsertPrefixes              = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpsertPrefixes")
	RoutingInstanceRemovePrefixes              = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrefixes")
	RoutingInstanceMovePrefix                  = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.MovePrefix")
	RoutingInstanceUpdatePrefixMask            = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpdatePrefixMask")
	RoutingInstanceAddPrivateConnection        = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.AddPrivateConnection")
	RoutingInstanceRemovePrivateConnection     = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrivateConnection")
	RoutingInstanceDelete                      = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.Delete")
	RoutingInstanceListOperations              = protoreflect.FullName("yandex.cloud.cloudrouter.v1.RoutingInstanceService.ListOperations")
	RoutingInstanceOperationPoller             = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
