// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	maintenance "github.com/yandex-cloud/go-genproto/yandex/cloud/maintenance/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// MaintenanceClient provides methods for managing Maintenance resources of Yandex.Cloud Compute.
type MaintenanceClient interface {
	List(context.Context, *maintenance.ListMaintenancesRequest, ...grpc.CallOption) (*maintenance.ListMaintenancesResponse, error)
	Get(context.Context, *maintenance.GetMaintenanceRequest, ...grpc.CallOption) (*maintenance.Maintenance, error)
	Reschedule(context.Context, *maintenance.RescheduleMaintenanceRequest, ...grpc.CallOption) (*MaintenanceRescheduleOperation, error)
}

var _ MaintenanceClient = maintenanceClient{}

type maintenanceClient struct {
	connector transport.Connector
}

// NewMaintenanceClient returns MaintenanceClient implementation.
func NewMaintenanceClient(connector transport.Connector) MaintenanceClient {
	return maintenanceClient{connector}
}

// List is an operation of Yandex.Cloud Compute Maintenance service.
func (c maintenanceClient) List(ctx context.Context, in *maintenance.ListMaintenancesRequest, opts ...grpc.CallOption) (*maintenance.ListMaintenancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, MaintenanceList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewMaintenanceServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Compute Maintenance service.
func (c maintenanceClient) Get(ctx context.Context, in *maintenance.GetMaintenanceRequest, opts ...grpc.CallOption) (*maintenance.Maintenance, error) {
	connection, err := c.connector.GetConnection(ctx, MaintenanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewMaintenanceServiceClient(connection).Get(ctx, in, opts...)
}

// MaintenanceRescheduleOperation is used to monitor the state of Reschedule operations.
type MaintenanceRescheduleOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *MaintenanceRescheduleOperation) Response() *maintenance.Maintenance {
	return o.Operation.Response().(*maintenance.Maintenance)
}

// Wait polls the operation until it's done.
func (o *MaintenanceRescheduleOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*maintenance.Maintenance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*maintenance.Maintenance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MaintenanceRescheduleOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*maintenance.Maintenance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*maintenance.Maintenance)
	return response, err
}

// Reschedule is an operation of Yandex.Cloud Compute Maintenance service.
// It returns an object which should be used to monitor the operation state.
func (c maintenanceClient) Reschedule(ctx context.Context, in *maintenance.RescheduleMaintenanceRequest, opts ...grpc.CallOption) (*MaintenanceRescheduleOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MaintenanceReschedule, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewMaintenanceServiceClient(connection).Reschedule(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*maintenance.Maintenance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MaintenanceRescheduleOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c maintenanceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MaintenanceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	MaintenanceList            = protoreflect.FullName("yandex.cloud.compute.v1.MaintenanceService.List")
	MaintenanceGet             = protoreflect.FullName("yandex.cloud.compute.v1.MaintenanceService.Get")
	MaintenanceReschedule      = protoreflect.FullName("yandex.cloud.compute.v1.MaintenanceService.Reschedule")
	MaintenanceOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
