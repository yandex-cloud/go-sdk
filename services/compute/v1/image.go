// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ImageClient provides methods for managing Image resources of Yandex.Cloud Compute.
type ImageClient interface {
	Get(context.Context, *compute.GetImageRequest, ...grpc.CallOption) (*compute.Image, error)
	GetLatestByFamily(context.Context, *compute.GetImageLatestByFamilyRequest, ...grpc.CallOption) (*compute.Image, error)
	List(context.Context, *compute.ListImagesRequest, ...grpc.CallOption) (*compute.ListImagesResponse, error)
	Create(context.Context, *compute.CreateImageRequest, ...grpc.CallOption) (*ImageCreateOperation, error)
	Update(context.Context, *compute.UpdateImageRequest, ...grpc.CallOption) (*ImageUpdateOperation, error)
	Delete(context.Context, *compute.DeleteImageRequest, ...grpc.CallOption) (*ImageDeleteOperation, error)
	ListOperations(context.Context, *compute.ListImageOperationsRequest, ...grpc.CallOption) (*compute.ListImageOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ImageSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ImageUpdateAccessBindingsOperation, error)
}

var _ ImageClient = imageClient{}

type imageClient struct {
	connector transport.Connector
}

// NewImageClient returns ImageClient implementation.
func NewImageClient(connector transport.Connector) ImageClient {
	return imageClient{connector}
}

// Get is an operation of Yandex.Cloud Compute Image service.
func (c imageClient) Get(ctx context.Context, in *compute.GetImageRequest, opts ...grpc.CallOption) (*compute.Image, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewImageServiceClient(connection).Get(ctx, in, opts...)
}

// GetLatestByFamily is an operation of Yandex.Cloud Compute Image service.
func (c imageClient) GetLatestByFamily(ctx context.Context, in *compute.GetImageLatestByFamilyRequest, opts ...grpc.CallOption) (*compute.Image, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGetLatestByFamily, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewImageServiceClient(connection).GetLatestByFamily(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute Image service.
func (c imageClient) List(ctx context.Context, in *compute.ListImagesRequest, opts ...grpc.CallOption) (*compute.ListImagesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewImageServiceClient(connection).List(ctx, in, opts...)
}

// ImageCreateOperation is used to monitor the state of Create operations.
type ImageCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageCreateOperation) Metadata() *compute.CreateImageMetadata {
	return o.Operation.Metadata().(*compute.CreateImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageCreateOperation) Response() *compute.Image {
	return o.Operation.Response().(*compute.Image)
}

// Wait polls the operation until it's done.
func (o *ImageCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Image, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Image)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Image, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Image)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Create(ctx context.Context, in *compute.CreateImageRequest, opts ...grpc.CallOption) (*ImageCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewImageServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateImageMetadata).GetImageId()
		},
		MetadataType: (*compute.CreateImageMetadata)(nil),
		ResponseType: (*compute.Image)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageCreateOperation{*op}, nil
}

// ImageUpdateOperation is used to monitor the state of Update operations.
type ImageUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageUpdateOperation) Metadata() *compute.UpdateImageMetadata {
	return o.Operation.Metadata().(*compute.UpdateImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageUpdateOperation) Response() *compute.Image {
	return o.Operation.Response().(*compute.Image)
}

// Wait polls the operation until it's done.
func (o *ImageUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Image, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Image)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Image, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Image)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Update(ctx context.Context, in *compute.UpdateImageRequest, opts ...grpc.CallOption) (*ImageUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewImageServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateImageMetadata).GetImageId()
		},
		MetadataType: (*compute.UpdateImageMetadata)(nil),
		ResponseType: (*compute.Image)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageUpdateOperation{*op}, nil
}

// ImageDeleteOperation is used to monitor the state of Delete operations.
type ImageDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageDeleteOperation) Metadata() *compute.DeleteImageMetadata {
	return o.Operation.Metadata().(*compute.DeleteImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ImageDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Delete(ctx context.Context, in *compute.DeleteImageRequest, opts ...grpc.CallOption) (*ImageDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewImageServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteImageMetadata).GetImageId()
		},
		MetadataType: (*compute.DeleteImageMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute Image service.
func (c imageClient) ListOperations(ctx context.Context, in *compute.ListImageOperationsRequest, opts ...grpc.CallOption) (*compute.ListImageOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewImageServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute Image service.
func (c imageClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewImageServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ImageSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ImageSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ImageSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *ImageSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ImageSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewImageServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageSetAccessBindingsOperation{*op}, nil
}

// ImageUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ImageUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ImageUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *ImageUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ImageUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewImageServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c imageClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ImageGet                  = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.Get")
	ImageGetLatestByFamily    = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.GetLatestByFamily")
	ImageList                 = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.List")
	ImageCreate               = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.Create")
	ImageUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.Update")
	ImageDelete               = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.Delete")
	ImageListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.ListOperations")
	ImageListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.ListAccessBindings")
	ImageSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.SetAccessBindings")
	ImageUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.ImageService.UpdateAccessBindings")
	ImageOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
