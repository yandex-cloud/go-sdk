// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GpuClusterClient provides methods for managing GpuCluster resources of Yandex.Cloud Compute.
type GpuClusterClient interface {
	Get(context.Context, *compute.GetGpuClusterRequest, ...grpc.CallOption) (*compute.GpuCluster, error)
	List(context.Context, *compute.ListGpuClustersRequest, ...grpc.CallOption) (*compute.ListGpuClustersResponse, error)
	Create(context.Context, *compute.CreateGpuClusterRequest, ...grpc.CallOption) (*GpuClusterCreateOperation, error)
	Update(context.Context, *compute.UpdateGpuClusterRequest, ...grpc.CallOption) (*GpuClusterUpdateOperation, error)
	Delete(context.Context, *compute.DeleteGpuClusterRequest, ...grpc.CallOption) (*GpuClusterDeleteOperation, error)
	ListOperations(context.Context, *compute.ListGpuClusterOperationsRequest, ...grpc.CallOption) (*compute.ListGpuClusterOperationsResponse, error)
	ListInstances(context.Context, *compute.ListGpuClusterInstancesRequest, ...grpc.CallOption) (*compute.ListGpuClusterInstancesResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*GpuClusterSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*GpuClusterUpdateAccessBindingsOperation, error)
}

var _ GpuClusterClient = gpuClusterClient{}

type gpuClusterClient struct {
	connector transport.Connector
}

// NewGpuClusterClient returns GpuClusterClient implementation.
func NewGpuClusterClient(connector transport.Connector) GpuClusterClient {
	return gpuClusterClient{connector}
}

// Get is an operation of Yandex.Cloud Compute GpuCluster service.
func (c gpuClusterClient) Get(ctx context.Context, in *compute.GetGpuClusterRequest, opts ...grpc.CallOption) (*compute.GpuCluster, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewGpuClusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute GpuCluster service.
func (c gpuClusterClient) List(ctx context.Context, in *compute.ListGpuClustersRequest, opts ...grpc.CallOption) (*compute.ListGpuClustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewGpuClusterServiceClient(connection).List(ctx, in, opts...)
}

// GpuClusterCreateOperation is used to monitor the state of Create operations.
type GpuClusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GpuClusterCreateOperation) Metadata() *compute.CreateGpuClusterMetadata {
	return o.Operation.Metadata().(*compute.CreateGpuClusterMetadata)
}

// Response retrieves the operation response.
func (o *GpuClusterCreateOperation) Response() *compute.GpuCluster {
	return o.Operation.Response().(*compute.GpuCluster)
}

// Wait polls the operation until it's done.
func (o *GpuClusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.GpuCluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.GpuCluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GpuClusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.GpuCluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.GpuCluster)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute GpuCluster service.
// It returns an object which should be used to monitor the operation state.
func (c gpuClusterClient) Create(ctx context.Context, in *compute.CreateGpuClusterRequest, opts ...grpc.CallOption) (*GpuClusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewGpuClusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateGpuClusterMetadata).GetGpuClusterId()
		},
		MetadataType: (*compute.CreateGpuClusterMetadata)(nil),
		ResponseType: (*compute.GpuCluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GpuClusterCreateOperation{*op}, nil
}

// GpuClusterUpdateOperation is used to monitor the state of Update operations.
type GpuClusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GpuClusterUpdateOperation) Metadata() *compute.UpdateGpuClusterMetadata {
	return o.Operation.Metadata().(*compute.UpdateGpuClusterMetadata)
}

// Response retrieves the operation response.
func (o *GpuClusterUpdateOperation) Response() *compute.GpuCluster {
	return o.Operation.Response().(*compute.GpuCluster)
}

// Wait polls the operation until it's done.
func (o *GpuClusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.GpuCluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.GpuCluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GpuClusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.GpuCluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.GpuCluster)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute GpuCluster service.
// It returns an object which should be used to monitor the operation state.
func (c gpuClusterClient) Update(ctx context.Context, in *compute.UpdateGpuClusterRequest, opts ...grpc.CallOption) (*GpuClusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewGpuClusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateGpuClusterMetadata).GetGpuClusterId()
		},
		MetadataType: (*compute.UpdateGpuClusterMetadata)(nil),
		ResponseType: (*compute.GpuCluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GpuClusterUpdateOperation{*op}, nil
}

// GpuClusterDeleteOperation is used to monitor the state of Delete operations.
type GpuClusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GpuClusterDeleteOperation) Metadata() *compute.DeleteGpuClusterMetadata {
	return o.Operation.Metadata().(*compute.DeleteGpuClusterMetadata)
}

// Response retrieves the operation response.
func (o *GpuClusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GpuClusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GpuClusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute GpuCluster service.
// It returns an object which should be used to monitor the operation state.
func (c gpuClusterClient) Delete(ctx context.Context, in *compute.DeleteGpuClusterRequest, opts ...grpc.CallOption) (*GpuClusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewGpuClusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteGpuClusterMetadata).GetGpuClusterId()
		},
		MetadataType: (*compute.DeleteGpuClusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GpuClusterDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute GpuCluster service.
func (c gpuClusterClient) ListOperations(ctx context.Context, in *compute.ListGpuClusterOperationsRequest, opts ...grpc.CallOption) (*compute.ListGpuClusterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewGpuClusterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListInstances is an operation of Yandex.Cloud Compute GpuCluster service.
func (c gpuClusterClient) ListInstances(ctx context.Context, in *compute.ListGpuClusterInstancesRequest, opts ...grpc.CallOption) (*compute.ListGpuClusterInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterListInstances, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewGpuClusterServiceClient(connection).ListInstances(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute GpuCluster service.
func (c gpuClusterClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewGpuClusterServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// GpuClusterSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type GpuClusterSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GpuClusterSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *GpuClusterSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *GpuClusterSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GpuClusterSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute GpuCluster service.
// It returns an object which should be used to monitor the operation state.
func (c gpuClusterClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*GpuClusterSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewGpuClusterServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GpuClusterSetAccessBindingsOperation{*op}, nil
}

// GpuClusterUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type GpuClusterUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GpuClusterUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *GpuClusterUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *GpuClusterUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GpuClusterUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute GpuCluster service.
// It returns an object which should be used to monitor the operation state.
func (c gpuClusterClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*GpuClusterUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewGpuClusterServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GpuClusterUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c gpuClusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GpuClusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	GpuClusterGet                  = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.Get")
	GpuClusterList                 = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.List")
	GpuClusterCreate               = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.Create")
	GpuClusterUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.Update")
	GpuClusterDelete               = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.Delete")
	GpuClusterListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.ListOperations")
	GpuClusterListInstances        = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.ListInstances")
	GpuClusterListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.ListAccessBindings")
	GpuClusterSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.SetAccessBindings")
	GpuClusterUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.GpuClusterService.UpdateAccessBindings")
	GpuClusterOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
