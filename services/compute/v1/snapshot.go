// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SnapshotClient provides methods for managing Snapshot resources of Yandex.Cloud Compute.
type SnapshotClient interface {
	Get(context.Context, *compute.GetSnapshotRequest, ...grpc.CallOption) (*compute.Snapshot, error)
	List(context.Context, *compute.ListSnapshotsRequest, ...grpc.CallOption) (*compute.ListSnapshotsResponse, error)
	Create(context.Context, *compute.CreateSnapshotRequest, ...grpc.CallOption) (*SnapshotCreateOperation, error)
	Update(context.Context, *compute.UpdateSnapshotRequest, ...grpc.CallOption) (*SnapshotUpdateOperation, error)
	Delete(context.Context, *compute.DeleteSnapshotRequest, ...grpc.CallOption) (*SnapshotDeleteOperation, error)
	ListOperations(context.Context, *compute.ListSnapshotOperationsRequest, ...grpc.CallOption) (*compute.ListSnapshotOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*SnapshotSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*SnapshotUpdateAccessBindingsOperation, error)
}

var _ SnapshotClient = snapshotClient{}

type snapshotClient struct {
	connector transport.Connector
}

// NewSnapshotClient returns SnapshotClient implementation.
func NewSnapshotClient(connector transport.Connector) SnapshotClient {
	return snapshotClient{connector}
}

// Get is an operation of Yandex.Cloud Compute Snapshot service.
func (c snapshotClient) Get(ctx context.Context, in *compute.GetSnapshotRequest, opts ...grpc.CallOption) (*compute.Snapshot, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute Snapshot service.
func (c snapshotClient) List(ctx context.Context, in *compute.ListSnapshotsRequest, opts ...grpc.CallOption) (*compute.ListSnapshotsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotServiceClient(connection).List(ctx, in, opts...)
}

// SnapshotCreateOperation is used to monitor the state of Create operations.
type SnapshotCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotCreateOperation) Metadata() *compute.CreateSnapshotMetadata {
	return o.Operation.Metadata().(*compute.CreateSnapshotMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotCreateOperation) Response() *compute.Snapshot {
	return o.Operation.Response().(*compute.Snapshot)
}

// Wait polls the operation until it's done.
func (o *SnapshotCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Snapshot, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Snapshot)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Snapshot, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Snapshot)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute Snapshot service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotClient) Create(ctx context.Context, in *compute.CreateSnapshotRequest, opts ...grpc.CallOption) (*SnapshotCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateSnapshotMetadata).GetSnapshotId()
		},
		MetadataType: (*compute.CreateSnapshotMetadata)(nil),
		ResponseType: (*compute.Snapshot)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotCreateOperation{*op}, nil
}

// SnapshotUpdateOperation is used to monitor the state of Update operations.
type SnapshotUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotUpdateOperation) Metadata() *compute.UpdateSnapshotMetadata {
	return o.Operation.Metadata().(*compute.UpdateSnapshotMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotUpdateOperation) Response() *compute.Snapshot {
	return o.Operation.Response().(*compute.Snapshot)
}

// Wait polls the operation until it's done.
func (o *SnapshotUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Snapshot, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Snapshot)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Snapshot, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Snapshot)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute Snapshot service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotClient) Update(ctx context.Context, in *compute.UpdateSnapshotRequest, opts ...grpc.CallOption) (*SnapshotUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateSnapshotMetadata).GetSnapshotId()
		},
		MetadataType: (*compute.UpdateSnapshotMetadata)(nil),
		ResponseType: (*compute.Snapshot)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotUpdateOperation{*op}, nil
}

// SnapshotDeleteOperation is used to monitor the state of Delete operations.
type SnapshotDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotDeleteOperation) Metadata() *compute.DeleteSnapshotMetadata {
	return o.Operation.Metadata().(*compute.DeleteSnapshotMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SnapshotDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute Snapshot service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotClient) Delete(ctx context.Context, in *compute.DeleteSnapshotRequest, opts ...grpc.CallOption) (*SnapshotDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteSnapshotMetadata).GetSnapshotId()
		},
		MetadataType: (*compute.DeleteSnapshotMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute Snapshot service.
func (c snapshotClient) ListOperations(ctx context.Context, in *compute.ListSnapshotOperationsRequest, opts ...grpc.CallOption) (*compute.ListSnapshotOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute Snapshot service.
func (c snapshotClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// SnapshotSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type SnapshotSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *SnapshotSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute Snapshot service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*SnapshotSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotSetAccessBindingsOperation{*op}, nil
}

// SnapshotUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type SnapshotUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *SnapshotUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute Snapshot service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*SnapshotUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c snapshotClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SnapshotGet                  = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.Get")
	SnapshotList                 = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.List")
	SnapshotCreate               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.Create")
	SnapshotUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.Update")
	SnapshotDelete               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.Delete")
	SnapshotListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.ListOperations")
	SnapshotListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.ListAccessBindings")
	SnapshotSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.SetAccessBindings")
	SnapshotUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotService.UpdateAccessBindings")
	SnapshotOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
