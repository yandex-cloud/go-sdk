// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// ReservedInstancePoolClient provides methods for managing ReservedInstancePool resources of Yandex.Cloud Compute.
type ReservedInstancePoolClient interface {
	Get(context.Context, *compute.GetReservedInstancePoolRequest, ...grpc.CallOption) (*compute.ReservedInstancePool, error)
	List(context.Context, *compute.ListReservedInstancePoolsRequest, ...grpc.CallOption) (*compute.ListReservedInstancePoolsResponse, error)
	Create(context.Context, *compute.CreateReservedInstancePoolRequest, ...grpc.CallOption) (*ReservedInstancePoolCreateOperation, error)
	Update(context.Context, *compute.UpdateReservedInstancePoolRequest, ...grpc.CallOption) (*ReservedInstancePoolUpdateOperation, error)
	Delete(context.Context, *compute.DeleteReservedInstancePoolRequest, ...grpc.CallOption) (*ReservedInstancePoolDeleteOperation, error)
}

var _ ReservedInstancePoolClient = reservedInstancePoolClient{}

type reservedInstancePoolClient struct {
	connector transport.Connector
}

// NewReservedInstancePoolClient returns ReservedInstancePoolClient implementation.
func NewReservedInstancePoolClient(connector transport.Connector) ReservedInstancePoolClient {
	return reservedInstancePoolClient{connector}
}

// Get is an operation of Yandex.Cloud Compute ReservedInstancePool service.
func (c reservedInstancePoolClient) Get(ctx context.Context, in *compute.GetReservedInstancePoolRequest, opts ...grpc.CallOption) (*compute.ReservedInstancePool, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewReservedInstancePoolServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute ReservedInstancePool service.
func (c reservedInstancePoolClient) List(ctx context.Context, in *compute.ListReservedInstancePoolsRequest, opts ...grpc.CallOption) (*compute.ListReservedInstancePoolsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewReservedInstancePoolServiceClient(connection).List(ctx, in, opts...)
}

// ReservedInstancePoolCreateOperation is used to monitor the state of Create operations.
type ReservedInstancePoolCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ReservedInstancePoolCreateOperation) Metadata() *compute.CreateReservedInstancePoolMetadata {
	return o.Operation.Metadata().(*compute.CreateReservedInstancePoolMetadata)
}

// Response retrieves the operation response.
func (o *ReservedInstancePoolCreateOperation) Response() *compute.ReservedInstancePool {
	return o.Operation.Response().(*compute.ReservedInstancePool)
}

// Wait polls the operation until it's done.
func (o *ReservedInstancePoolCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.ReservedInstancePool, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.ReservedInstancePool)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ReservedInstancePoolCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.ReservedInstancePool, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.ReservedInstancePool)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute ReservedInstancePool service.
// It returns an object which should be used to monitor the operation state.
func (c reservedInstancePoolClient) Create(ctx context.Context, in *compute.CreateReservedInstancePoolRequest, opts ...grpc.CallOption) (*ReservedInstancePoolCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewReservedInstancePoolServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateReservedInstancePoolMetadata).GetReservedInstancePoolId()
		},
		MetadataType: (*compute.CreateReservedInstancePoolMetadata)(nil),
		ResponseType: (*compute.ReservedInstancePool)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ReservedInstancePoolCreateOperation{*op}, nil
}

// ReservedInstancePoolUpdateOperation is used to monitor the state of Update operations.
type ReservedInstancePoolUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ReservedInstancePoolUpdateOperation) Metadata() *compute.UpdateReservedInstancePoolMetadata {
	return o.Operation.Metadata().(*compute.UpdateReservedInstancePoolMetadata)
}

// Response retrieves the operation response.
func (o *ReservedInstancePoolUpdateOperation) Response() *compute.ReservedInstancePool {
	return o.Operation.Response().(*compute.ReservedInstancePool)
}

// Wait polls the operation until it's done.
func (o *ReservedInstancePoolUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.ReservedInstancePool, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.ReservedInstancePool)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ReservedInstancePoolUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.ReservedInstancePool, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.ReservedInstancePool)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute ReservedInstancePool service.
// It returns an object which should be used to monitor the operation state.
func (c reservedInstancePoolClient) Update(ctx context.Context, in *compute.UpdateReservedInstancePoolRequest, opts ...grpc.CallOption) (*ReservedInstancePoolUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewReservedInstancePoolServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateReservedInstancePoolMetadata).GetReservedInstancePoolId()
		},
		MetadataType: (*compute.UpdateReservedInstancePoolMetadata)(nil),
		ResponseType: (*compute.ReservedInstancePool)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ReservedInstancePoolUpdateOperation{*op}, nil
}

// ReservedInstancePoolDeleteOperation is used to monitor the state of Delete operations.
type ReservedInstancePoolDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ReservedInstancePoolDeleteOperation) Metadata() *compute.DeleteReservedInstancePoolMetadata {
	return o.Operation.Metadata().(*compute.DeleteReservedInstancePoolMetadata)
}

// Response retrieves the operation response.
func (o *ReservedInstancePoolDeleteOperation) Response() *compute.DeleteReservedInstancePoolResponse {
	return o.Operation.Response().(*compute.DeleteReservedInstancePoolResponse)
}

// Wait polls the operation until it's done.
func (o *ReservedInstancePoolDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.DeleteReservedInstancePoolResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.DeleteReservedInstancePoolResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ReservedInstancePoolDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.DeleteReservedInstancePoolResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.DeleteReservedInstancePoolResponse)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute ReservedInstancePool service.
// It returns an object which should be used to monitor the operation state.
func (c reservedInstancePoolClient) Delete(ctx context.Context, in *compute.DeleteReservedInstancePoolRequest, opts ...grpc.CallOption) (*ReservedInstancePoolDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewReservedInstancePoolServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteReservedInstancePoolMetadata).GetReservedInstancePoolId()
		},
		MetadataType: (*compute.DeleteReservedInstancePoolMetadata)(nil),
		ResponseType: (*compute.DeleteReservedInstancePoolResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ReservedInstancePoolDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c reservedInstancePoolClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ReservedInstancePoolOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ReservedInstancePoolGet             = protoreflect.FullName("yandex.cloud.compute.v1.ReservedInstancePoolService.Get")
	ReservedInstancePoolList            = protoreflect.FullName("yandex.cloud.compute.v1.ReservedInstancePoolService.List")
	ReservedInstancePoolCreate          = protoreflect.FullName("yandex.cloud.compute.v1.ReservedInstancePoolService.Create")
	ReservedInstancePoolUpdate          = protoreflect.FullName("yandex.cloud.compute.v1.ReservedInstancePoolService.Update")
	ReservedInstancePoolDelete          = protoreflect.FullName("yandex.cloud.compute.v1.ReservedInstancePoolService.Delete")
	ReservedInstancePoolOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
