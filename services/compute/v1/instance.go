// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// InstanceClient provides methods for managing Instance resources of Yandex.Cloud Compute.
type InstanceClient interface {
	Get(context.Context, *compute.GetInstanceRequest, ...grpc.CallOption) (*compute.Instance, error)
	List(context.Context, *compute.ListInstancesRequest, ...grpc.CallOption) (*compute.ListInstancesResponse, error)
	Create(context.Context, *compute.CreateInstanceRequest, ...grpc.CallOption) (*InstanceCreateOperation, error)
	Update(context.Context, *compute.UpdateInstanceRequest, ...grpc.CallOption) (*InstanceUpdateOperation, error)
	Delete(context.Context, *compute.DeleteInstanceRequest, ...grpc.CallOption) (*InstanceDeleteOperation, error)
	UpdateMetadata(context.Context, *compute.UpdateInstanceMetadataRequest, ...grpc.CallOption) (*InstanceUpdateMetadataOperation, error)
	GetSerialPortOutput(context.Context, *compute.GetInstanceSerialPortOutputRequest, ...grpc.CallOption) (*compute.GetInstanceSerialPortOutputResponse, error)
	Stop(context.Context, *compute.StopInstanceRequest, ...grpc.CallOption) (*InstanceStopOperation, error)
	Start(context.Context, *compute.StartInstanceRequest, ...grpc.CallOption) (*InstanceStartOperation, error)
	Restart(context.Context, *compute.RestartInstanceRequest, ...grpc.CallOption) (*InstanceRestartOperation, error)
	AttachDisk(context.Context, *compute.AttachInstanceDiskRequest, ...grpc.CallOption) (*InstanceAttachDiskOperation, error)
	DetachDisk(context.Context, *compute.DetachInstanceDiskRequest, ...grpc.CallOption) (*InstanceDetachDiskOperation, error)
	AttachFilesystem(context.Context, *compute.AttachInstanceFilesystemRequest, ...grpc.CallOption) (*InstanceAttachFilesystemOperation, error)
	DetachFilesystem(context.Context, *compute.DetachInstanceFilesystemRequest, ...grpc.CallOption) (*InstanceDetachFilesystemOperation, error)
	AttachNetworkInterface(context.Context, *compute.AttachInstanceNetworkInterfaceRequest, ...grpc.CallOption) (*InstanceAttachNetworkInterfaceOperation, error)
	DetachNetworkInterface(context.Context, *compute.DetachInstanceNetworkInterfaceRequest, ...grpc.CallOption) (*InstanceDetachNetworkInterfaceOperation, error)
	AddOneToOneNat(context.Context, *compute.AddInstanceOneToOneNatRequest, ...grpc.CallOption) (*InstanceAddOneToOneNatOperation, error)
	RemoveOneToOneNat(context.Context, *compute.RemoveInstanceOneToOneNatRequest, ...grpc.CallOption) (*InstanceRemoveOneToOneNatOperation, error)
	UpdateNetworkInterface(context.Context, *compute.UpdateInstanceNetworkInterfaceRequest, ...grpc.CallOption) (*InstanceUpdateNetworkInterfaceOperation, error)
	ListOperations(context.Context, *compute.ListInstanceOperationsRequest, ...grpc.CallOption) (*compute.ListInstanceOperationsResponse, error)
	Move(context.Context, *compute.MoveInstanceRequest, ...grpc.CallOption) (*InstanceMoveOperation, error)
	Relocate(context.Context, *compute.RelocateInstanceRequest, ...grpc.CallOption) (*InstanceRelocateOperation, error)
	SimulateMaintenanceEvent(context.Context, *compute.SimulateInstanceMaintenanceEventRequest, ...grpc.CallOption) (*InstanceSimulateMaintenanceEventOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*InstanceSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*InstanceUpdateAccessBindingsOperation, error)
}

var _ InstanceClient = instanceClient{}

type instanceClient struct {
	connector transport.Connector
}

// NewInstanceClient returns InstanceClient implementation.
func NewInstanceClient(connector transport.Connector) InstanceClient {
	return instanceClient{connector}
}

// Get is an operation of Yandex.Cloud Compute Instance service.
func (c instanceClient) Get(ctx context.Context, in *compute.GetInstanceRequest, opts ...grpc.CallOption) (*compute.Instance, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewInstanceServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute Instance service.
func (c instanceClient) List(ctx context.Context, in *compute.ListInstancesRequest, opts ...grpc.CallOption) (*compute.ListInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewInstanceServiceClient(connection).List(ctx, in, opts...)
}

// InstanceCreateOperation is used to monitor the state of Create operations.
type InstanceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceCreateOperation) Metadata() *compute.CreateInstanceMetadata {
	return o.Operation.Metadata().(*compute.CreateInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceCreateOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Create(ctx context.Context, in *compute.CreateInstanceRequest, opts ...grpc.CallOption) (*InstanceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.CreateInstanceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceCreateOperation{*op}, nil
}

// InstanceUpdateOperation is used to monitor the state of Update operations.
type InstanceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceUpdateOperation) Metadata() *compute.UpdateInstanceMetadata {
	return o.Operation.Metadata().(*compute.UpdateInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceUpdateOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Update(ctx context.Context, in *compute.UpdateInstanceRequest, opts ...grpc.CallOption) (*InstanceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.UpdateInstanceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceUpdateOperation{*op}, nil
}

// InstanceDeleteOperation is used to monitor the state of Delete operations.
type InstanceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceDeleteOperation) Metadata() *compute.DeleteInstanceMetadata {
	return o.Operation.Metadata().(*compute.DeleteInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Delete(ctx context.Context, in *compute.DeleteInstanceRequest, opts ...grpc.CallOption) (*InstanceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.DeleteInstanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceDeleteOperation{*op}, nil
}

// InstanceUpdateMetadataOperation is used to monitor the state of UpdateMetadata operations.
type InstanceUpdateMetadataOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceUpdateMetadataOperation) Metadata() *compute.UpdateInstanceMetadataMetadata {
	return o.Operation.Metadata().(*compute.UpdateInstanceMetadataMetadata)
}

// Response retrieves the operation response.
func (o *InstanceUpdateMetadataOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceUpdateMetadataOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceUpdateMetadataOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// UpdateMetadata is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) UpdateMetadata(ctx context.Context, in *compute.UpdateInstanceMetadataRequest, opts ...grpc.CallOption) (*InstanceUpdateMetadataOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceUpdateMetadata, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).UpdateMetadata(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateInstanceMetadataMetadata).GetInstanceId()
		},
		MetadataType: (*compute.UpdateInstanceMetadataMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceUpdateMetadataOperation{*op}, nil
}

// GetSerialPortOutput is an operation of Yandex.Cloud Compute Instance service.
func (c instanceClient) GetSerialPortOutput(ctx context.Context, in *compute.GetInstanceSerialPortOutputRequest, opts ...grpc.CallOption) (*compute.GetInstanceSerialPortOutputResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGetSerialPortOutput, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewInstanceServiceClient(connection).GetSerialPortOutput(ctx, in, opts...)
}

// InstanceStopOperation is used to monitor the state of Stop operations.
type InstanceStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceStopOperation) Metadata() *compute.StopInstanceMetadata {
	return o.Operation.Metadata().(*compute.StopInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceStopOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Stop is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Stop(ctx context.Context, in *compute.StopInstanceRequest, opts ...grpc.CallOption) (*InstanceStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.StopInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.StopInstanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceStopOperation{*op}, nil
}

// InstanceStartOperation is used to monitor the state of Start operations.
type InstanceStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceStartOperation) Metadata() *compute.StartInstanceMetadata {
	return o.Operation.Metadata().(*compute.StartInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceStartOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// Start is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Start(ctx context.Context, in *compute.StartInstanceRequest, opts ...grpc.CallOption) (*InstanceStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.StartInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.StartInstanceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceStartOperation{*op}, nil
}

// InstanceRestartOperation is used to monitor the state of Restart operations.
type InstanceRestartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceRestartOperation) Metadata() *compute.RestartInstanceMetadata {
	return o.Operation.Metadata().(*compute.RestartInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceRestartOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceRestartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceRestartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Restart is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Restart(ctx context.Context, in *compute.RestartInstanceRequest, opts ...grpc.CallOption) (*InstanceRestartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceRestart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Restart(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.RestartInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.RestartInstanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceRestartOperation{*op}, nil
}

// InstanceAttachDiskOperation is used to monitor the state of AttachDisk operations.
type InstanceAttachDiskOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceAttachDiskOperation) Metadata() *compute.AttachInstanceDiskMetadata {
	return o.Operation.Metadata().(*compute.AttachInstanceDiskMetadata)
}

// Response retrieves the operation response.
func (o *InstanceAttachDiskOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceAttachDiskOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceAttachDiskOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// AttachDisk is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) AttachDisk(ctx context.Context, in *compute.AttachInstanceDiskRequest, opts ...grpc.CallOption) (*InstanceAttachDiskOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceAttachDisk, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).AttachDisk(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.AttachInstanceDiskMetadata).GetInstanceId()
		},
		MetadataType: (*compute.AttachInstanceDiskMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceAttachDiskOperation{*op}, nil
}

// InstanceDetachDiskOperation is used to monitor the state of DetachDisk operations.
type InstanceDetachDiskOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceDetachDiskOperation) Metadata() *compute.DetachInstanceDiskMetadata {
	return o.Operation.Metadata().(*compute.DetachInstanceDiskMetadata)
}

// Response retrieves the operation response.
func (o *InstanceDetachDiskOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceDetachDiskOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceDetachDiskOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// DetachDisk is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) DetachDisk(ctx context.Context, in *compute.DetachInstanceDiskRequest, opts ...grpc.CallOption) (*InstanceDetachDiskOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceDetachDisk, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).DetachDisk(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DetachInstanceDiskMetadata).GetInstanceId()
		},
		MetadataType: (*compute.DetachInstanceDiskMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceDetachDiskOperation{*op}, nil
}

// InstanceAttachFilesystemOperation is used to monitor the state of AttachFilesystem operations.
type InstanceAttachFilesystemOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceAttachFilesystemOperation) Metadata() *compute.AttachInstanceFilesystemMetadata {
	return o.Operation.Metadata().(*compute.AttachInstanceFilesystemMetadata)
}

// Response retrieves the operation response.
func (o *InstanceAttachFilesystemOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceAttachFilesystemOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceAttachFilesystemOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// AttachFilesystem is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) AttachFilesystem(ctx context.Context, in *compute.AttachInstanceFilesystemRequest, opts ...grpc.CallOption) (*InstanceAttachFilesystemOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceAttachFilesystem, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).AttachFilesystem(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.AttachInstanceFilesystemMetadata).GetInstanceId()
		},
		MetadataType: (*compute.AttachInstanceFilesystemMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceAttachFilesystemOperation{*op}, nil
}

// InstanceDetachFilesystemOperation is used to monitor the state of DetachFilesystem operations.
type InstanceDetachFilesystemOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceDetachFilesystemOperation) Metadata() *compute.DetachInstanceFilesystemMetadata {
	return o.Operation.Metadata().(*compute.DetachInstanceFilesystemMetadata)
}

// Response retrieves the operation response.
func (o *InstanceDetachFilesystemOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceDetachFilesystemOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceDetachFilesystemOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// DetachFilesystem is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) DetachFilesystem(ctx context.Context, in *compute.DetachInstanceFilesystemRequest, opts ...grpc.CallOption) (*InstanceDetachFilesystemOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceDetachFilesystem, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).DetachFilesystem(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DetachInstanceFilesystemMetadata).GetInstanceId()
		},
		MetadataType: (*compute.DetachInstanceFilesystemMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceDetachFilesystemOperation{*op}, nil
}

// InstanceAttachNetworkInterfaceOperation is used to monitor the state of AttachNetworkInterface operations.
type InstanceAttachNetworkInterfaceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceAttachNetworkInterfaceOperation) Metadata() *compute.AttachInstanceNetworkInterfaceMetadata {
	return o.Operation.Metadata().(*compute.AttachInstanceNetworkInterfaceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceAttachNetworkInterfaceOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceAttachNetworkInterfaceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceAttachNetworkInterfaceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// AttachNetworkInterface is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) AttachNetworkInterface(ctx context.Context, in *compute.AttachInstanceNetworkInterfaceRequest, opts ...grpc.CallOption) (*InstanceAttachNetworkInterfaceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceAttachNetworkInterface, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).AttachNetworkInterface(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.AttachInstanceNetworkInterfaceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.AttachInstanceNetworkInterfaceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceAttachNetworkInterfaceOperation{*op}, nil
}

// InstanceDetachNetworkInterfaceOperation is used to monitor the state of DetachNetworkInterface operations.
type InstanceDetachNetworkInterfaceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceDetachNetworkInterfaceOperation) Metadata() *compute.DetachInstanceNetworkInterfaceMetadata {
	return o.Operation.Metadata().(*compute.DetachInstanceNetworkInterfaceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceDetachNetworkInterfaceOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceDetachNetworkInterfaceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceDetachNetworkInterfaceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// DetachNetworkInterface is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) DetachNetworkInterface(ctx context.Context, in *compute.DetachInstanceNetworkInterfaceRequest, opts ...grpc.CallOption) (*InstanceDetachNetworkInterfaceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceDetachNetworkInterface, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).DetachNetworkInterface(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DetachInstanceNetworkInterfaceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.DetachInstanceNetworkInterfaceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceDetachNetworkInterfaceOperation{*op}, nil
}

// InstanceAddOneToOneNatOperation is used to monitor the state of AddOneToOneNat operations.
type InstanceAddOneToOneNatOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceAddOneToOneNatOperation) Metadata() *compute.AddInstanceOneToOneNatMetadata {
	return o.Operation.Metadata().(*compute.AddInstanceOneToOneNatMetadata)
}

// Response retrieves the operation response.
func (o *InstanceAddOneToOneNatOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceAddOneToOneNatOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceAddOneToOneNatOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// AddOneToOneNat is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) AddOneToOneNat(ctx context.Context, in *compute.AddInstanceOneToOneNatRequest, opts ...grpc.CallOption) (*InstanceAddOneToOneNatOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceAddOneToOneNat, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).AddOneToOneNat(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.AddInstanceOneToOneNatMetadata).GetInstanceId()
		},
		MetadataType: (*compute.AddInstanceOneToOneNatMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceAddOneToOneNatOperation{*op}, nil
}

// InstanceRemoveOneToOneNatOperation is used to monitor the state of RemoveOneToOneNat operations.
type InstanceRemoveOneToOneNatOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceRemoveOneToOneNatOperation) Metadata() *compute.RemoveInstanceOneToOneNatMetadata {
	return o.Operation.Metadata().(*compute.RemoveInstanceOneToOneNatMetadata)
}

// Response retrieves the operation response.
func (o *InstanceRemoveOneToOneNatOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceRemoveOneToOneNatOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceRemoveOneToOneNatOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// RemoveOneToOneNat is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) RemoveOneToOneNat(ctx context.Context, in *compute.RemoveInstanceOneToOneNatRequest, opts ...grpc.CallOption) (*InstanceRemoveOneToOneNatOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceRemoveOneToOneNat, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).RemoveOneToOneNat(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.RemoveInstanceOneToOneNatMetadata).GetInstanceId()
		},
		MetadataType: (*compute.RemoveInstanceOneToOneNatMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceRemoveOneToOneNatOperation{*op}, nil
}

// InstanceUpdateNetworkInterfaceOperation is used to monitor the state of UpdateNetworkInterface operations.
type InstanceUpdateNetworkInterfaceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceUpdateNetworkInterfaceOperation) Metadata() *compute.UpdateInstanceNetworkInterfaceMetadata {
	return o.Operation.Metadata().(*compute.UpdateInstanceNetworkInterfaceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceUpdateNetworkInterfaceOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceUpdateNetworkInterfaceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceUpdateNetworkInterfaceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// UpdateNetworkInterface is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) UpdateNetworkInterface(ctx context.Context, in *compute.UpdateInstanceNetworkInterfaceRequest, opts ...grpc.CallOption) (*InstanceUpdateNetworkInterfaceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceUpdateNetworkInterface, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).UpdateNetworkInterface(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateInstanceNetworkInterfaceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.UpdateInstanceNetworkInterfaceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceUpdateNetworkInterfaceOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute Instance service.
func (c instanceClient) ListOperations(ctx context.Context, in *compute.ListInstanceOperationsRequest, opts ...grpc.CallOption) (*compute.ListInstanceOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewInstanceServiceClient(connection).ListOperations(ctx, in, opts...)
}

// InstanceMoveOperation is used to monitor the state of Move operations.
type InstanceMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceMoveOperation) Metadata() *compute.MoveInstanceMetadata {
	return o.Operation.Metadata().(*compute.MoveInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceMoveOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// Move is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Move(ctx context.Context, in *compute.MoveInstanceRequest, opts ...grpc.CallOption) (*InstanceMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.MoveInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.MoveInstanceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceMoveOperation{*op}, nil
}

// InstanceRelocateOperation is used to monitor the state of Relocate operations.
type InstanceRelocateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceRelocateOperation) Metadata() *compute.RelocateInstanceMetadata {
	return o.Operation.Metadata().(*compute.RelocateInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceRelocateOperation) Response() *compute.Instance {
	return o.Operation.Response().(*compute.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceRelocateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceRelocateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Instance)
	return response, err
}

// Relocate is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Relocate(ctx context.Context, in *compute.RelocateInstanceRequest, opts ...grpc.CallOption) (*InstanceRelocateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceRelocate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).Relocate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.RelocateInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*compute.RelocateInstanceMetadata)(nil),
		ResponseType: (*compute.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceRelocateOperation{*op}, nil
}

// InstanceSimulateMaintenanceEventOperation is used to monitor the state of SimulateMaintenanceEvent operations.
type InstanceSimulateMaintenanceEventOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceSimulateMaintenanceEventOperation) Metadata() *compute.SimulateInstanceMaintenanceEventMetadata {
	return o.Operation.Metadata().(*compute.SimulateInstanceMaintenanceEventMetadata)
}

// Response retrieves the operation response.
func (o *InstanceSimulateMaintenanceEventOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceSimulateMaintenanceEventOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceSimulateMaintenanceEventOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SimulateMaintenanceEvent is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) SimulateMaintenanceEvent(ctx context.Context, in *compute.SimulateInstanceMaintenanceEventRequest, opts ...grpc.CallOption) (*InstanceSimulateMaintenanceEventOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceSimulateMaintenanceEvent, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).SimulateMaintenanceEvent(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.SimulateInstanceMaintenanceEventMetadata).GetInstanceId()
		},
		MetadataType: (*compute.SimulateInstanceMaintenanceEventMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceSimulateMaintenanceEventOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Compute Instance service.
func (c instanceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewInstanceServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// InstanceSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type InstanceSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *InstanceSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *InstanceSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*InstanceSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceSetAccessBindingsOperation{*op}, nil
}

// InstanceUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type InstanceUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *InstanceUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *InstanceUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*InstanceUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewInstanceServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c instanceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	InstanceGet                      = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Get")
	InstanceList                     = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.List")
	InstanceCreate                   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Create")
	InstanceUpdate                   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Update")
	InstanceDelete                   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Delete")
	InstanceUpdateMetadata           = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.UpdateMetadata")
	InstanceGetSerialPortOutput      = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.GetSerialPortOutput")
	InstanceStop                     = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Stop")
	InstanceStart                    = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Start")
	InstanceRestart                  = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Restart")
	InstanceAttachDisk               = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.AttachDisk")
	InstanceDetachDisk               = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.DetachDisk")
	InstanceAttachFilesystem         = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.AttachFilesystem")
	InstanceDetachFilesystem         = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.DetachFilesystem")
	InstanceAttachNetworkInterface   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.AttachNetworkInterface")
	InstanceDetachNetworkInterface   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.DetachNetworkInterface")
	InstanceAddOneToOneNat           = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.AddOneToOneNat")
	InstanceRemoveOneToOneNat        = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.RemoveOneToOneNat")
	InstanceUpdateNetworkInterface   = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.UpdateNetworkInterface")
	InstanceListOperations           = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.ListOperations")
	InstanceMove                     = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Move")
	InstanceRelocate                 = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.Relocate")
	InstanceSimulateMaintenanceEvent = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.SimulateMaintenanceEvent")
	InstanceListAccessBindings       = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.ListAccessBindings")
	InstanceSetAccessBindings        = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.SetAccessBindings")
	InstanceUpdateAccessBindings     = protoreflect.FullName("yandex.cloud.compute.v1.InstanceService.UpdateAccessBindings")
	InstanceOperationPoller          = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
