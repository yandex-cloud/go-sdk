// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// FilesystemClient provides methods for managing Filesystem resources of Yandex.Cloud Compute.
type FilesystemClient interface {
	Get(context.Context, *compute.GetFilesystemRequest, ...grpc.CallOption) (*compute.Filesystem, error)
	List(context.Context, *compute.ListFilesystemsRequest, ...grpc.CallOption) (*compute.ListFilesystemsResponse, error)
	Create(context.Context, *compute.CreateFilesystemRequest, ...grpc.CallOption) (*FilesystemCreateOperation, error)
	Update(context.Context, *compute.UpdateFilesystemRequest, ...grpc.CallOption) (*FilesystemUpdateOperation, error)
	Delete(context.Context, *compute.DeleteFilesystemRequest, ...grpc.CallOption) (*FilesystemDeleteOperation, error)
	ListOperations(context.Context, *compute.ListFilesystemOperationsRequest, ...grpc.CallOption) (*compute.ListFilesystemOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*FilesystemSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*FilesystemUpdateAccessBindingsOperation, error)
}

var _ FilesystemClient = filesystemClient{}

type filesystemClient struct {
	connector transport.Connector
}

// NewFilesystemClient returns FilesystemClient implementation.
func NewFilesystemClient(connector transport.Connector) FilesystemClient {
	return filesystemClient{connector}
}

// Get is an operation of Yandex.Cloud Compute Filesystem service.
func (c filesystemClient) Get(ctx context.Context, in *compute.GetFilesystemRequest, opts ...grpc.CallOption) (*compute.Filesystem, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewFilesystemServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute Filesystem service.
func (c filesystemClient) List(ctx context.Context, in *compute.ListFilesystemsRequest, opts ...grpc.CallOption) (*compute.ListFilesystemsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewFilesystemServiceClient(connection).List(ctx, in, opts...)
}

// FilesystemCreateOperation is used to monitor the state of Create operations.
type FilesystemCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FilesystemCreateOperation) Metadata() *compute.CreateFilesystemMetadata {
	return o.Operation.Metadata().(*compute.CreateFilesystemMetadata)
}

// Response retrieves the operation response.
func (o *FilesystemCreateOperation) Response() *compute.Filesystem {
	return o.Operation.Response().(*compute.Filesystem)
}

// Wait polls the operation until it's done.
func (o *FilesystemCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Filesystem, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Filesystem)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FilesystemCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Filesystem, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Filesystem)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute Filesystem service.
// It returns an object which should be used to monitor the operation state.
func (c filesystemClient) Create(ctx context.Context, in *compute.CreateFilesystemRequest, opts ...grpc.CallOption) (*FilesystemCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewFilesystemServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateFilesystemMetadata).GetFilesystemId()
		},
		MetadataType: (*compute.CreateFilesystemMetadata)(nil),
		ResponseType: (*compute.Filesystem)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FilesystemCreateOperation{*op}, nil
}

// FilesystemUpdateOperation is used to monitor the state of Update operations.
type FilesystemUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FilesystemUpdateOperation) Metadata() *compute.UpdateFilesystemMetadata {
	return o.Operation.Metadata().(*compute.UpdateFilesystemMetadata)
}

// Response retrieves the operation response.
func (o *FilesystemUpdateOperation) Response() *compute.Filesystem {
	return o.Operation.Response().(*compute.Filesystem)
}

// Wait polls the operation until it's done.
func (o *FilesystemUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Filesystem, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Filesystem)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FilesystemUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Filesystem, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Filesystem)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute Filesystem service.
// It returns an object which should be used to monitor the operation state.
func (c filesystemClient) Update(ctx context.Context, in *compute.UpdateFilesystemRequest, opts ...grpc.CallOption) (*FilesystemUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewFilesystemServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateFilesystemMetadata).GetFilesystemId()
		},
		MetadataType: (*compute.UpdateFilesystemMetadata)(nil),
		ResponseType: (*compute.Filesystem)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FilesystemUpdateOperation{*op}, nil
}

// FilesystemDeleteOperation is used to monitor the state of Delete operations.
type FilesystemDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FilesystemDeleteOperation) Metadata() *compute.DeleteFilesystemMetadata {
	return o.Operation.Metadata().(*compute.DeleteFilesystemMetadata)
}

// Response retrieves the operation response.
func (o *FilesystemDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FilesystemDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FilesystemDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute Filesystem service.
// It returns an object which should be used to monitor the operation state.
func (c filesystemClient) Delete(ctx context.Context, in *compute.DeleteFilesystemRequest, opts ...grpc.CallOption) (*FilesystemDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewFilesystemServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteFilesystemMetadata).GetFilesystemId()
		},
		MetadataType: (*compute.DeleteFilesystemMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FilesystemDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute Filesystem service.
func (c filesystemClient) ListOperations(ctx context.Context, in *compute.ListFilesystemOperationsRequest, opts ...grpc.CallOption) (*compute.ListFilesystemOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewFilesystemServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute Filesystem service.
func (c filesystemClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewFilesystemServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// FilesystemSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type FilesystemSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *FilesystemSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *FilesystemSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FilesystemSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute Filesystem service.
// It returns an object which should be used to monitor the operation state.
func (c filesystemClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*FilesystemSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewFilesystemServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FilesystemSetAccessBindingsOperation{*op}, nil
}

// FilesystemUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type FilesystemUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *FilesystemUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *FilesystemUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FilesystemUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute Filesystem service.
// It returns an object which should be used to monitor the operation state.
func (c filesystemClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*FilesystemUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewFilesystemServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FilesystemUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c filesystemClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FilesystemOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	FilesystemGet                  = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.Get")
	FilesystemList                 = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.List")
	FilesystemCreate               = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.Create")
	FilesystemUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.Update")
	FilesystemDelete               = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.Delete")
	FilesystemListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.ListOperations")
	FilesystemListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.ListAccessBindings")
	FilesystemSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.SetAccessBindings")
	FilesystemUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.FilesystemService.UpdateAccessBindings")
	FilesystemOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
