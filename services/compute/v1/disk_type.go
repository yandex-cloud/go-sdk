// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// DiskTypeClient provides methods for managing DiskType resources of Yandex.Cloud Compute.
type DiskTypeClient interface {
	Get(context.Context, *compute.GetDiskTypeRequest, ...grpc.CallOption) (*compute.DiskType, error)
	List(context.Context, *compute.ListDiskTypesRequest, ...grpc.CallOption) (*compute.ListDiskTypesResponse, error)
}

var _ DiskTypeClient = diskTypeClient{}

type diskTypeClient struct {
	connector transport.Connector
}

// NewDiskTypeClient returns DiskTypeClient implementation.
func NewDiskTypeClient(connector transport.Connector) DiskTypeClient {
	return diskTypeClient{connector}
}

// Get is an operation of Yandex.Cloud Compute DiskType service.
func (c diskTypeClient) Get(ctx context.Context, in *compute.GetDiskTypeRequest, opts ...grpc.CallOption) (*compute.DiskType, error) {
	connection, err := c.connector.GetConnection(ctx, DiskTypeGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskTypeServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute DiskType service.
func (c diskTypeClient) List(ctx context.Context, in *compute.ListDiskTypesRequest, opts ...grpc.CallOption) (*compute.ListDiskTypesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskTypeList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskTypeServiceClient(connection).List(ctx, in, opts...)
}

var (
	DiskTypeGet  = protoreflect.FullName("yandex.cloud.compute.v1.DiskTypeService.Get")
	DiskTypeList = protoreflect.FullName("yandex.cloud.compute.v1.DiskTypeService.List")
)
