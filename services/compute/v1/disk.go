// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DiskClient provides methods for managing Disk resources of Yandex.Cloud Compute.
type DiskClient interface {
	Get(context.Context, *compute.GetDiskRequest, ...grpc.CallOption) (*compute.Disk, error)
	List(context.Context, *compute.ListDisksRequest, ...grpc.CallOption) (*compute.ListDisksResponse, error)
	Create(context.Context, *compute.CreateDiskRequest, ...grpc.CallOption) (*DiskCreateOperation, error)
	Update(context.Context, *compute.UpdateDiskRequest, ...grpc.CallOption) (*DiskUpdateOperation, error)
	Delete(context.Context, *compute.DeleteDiskRequest, ...grpc.CallOption) (*DiskDeleteOperation, error)
	ListOperations(context.Context, *compute.ListDiskOperationsRequest, ...grpc.CallOption) (*compute.ListDiskOperationsResponse, error)
	Move(context.Context, *compute.MoveDiskRequest, ...grpc.CallOption) (*DiskMoveOperation, error)
	Relocate(context.Context, *compute.RelocateDiskRequest, ...grpc.CallOption) (*DiskRelocateOperation, error)
	ListSnapshotSchedules(context.Context, *compute.ListDiskSnapshotSchedulesRequest, ...grpc.CallOption) (*compute.ListDiskSnapshotSchedulesResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*DiskSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*DiskUpdateAccessBindingsOperation, error)
}

var _ DiskClient = diskClient{}

type diskClient struct {
	connector transport.Connector
}

// NewDiskClient returns DiskClient implementation.
func NewDiskClient(connector transport.Connector) DiskClient {
	return diskClient{connector}
}

// Get is an operation of Yandex.Cloud Compute Disk service.
func (c diskClient) Get(ctx context.Context, in *compute.GetDiskRequest, opts ...grpc.CallOption) (*compute.Disk, error) {
	connection, err := c.connector.GetConnection(ctx, DiskGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute Disk service.
func (c diskClient) List(ctx context.Context, in *compute.ListDisksRequest, opts ...grpc.CallOption) (*compute.ListDisksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskServiceClient(connection).List(ctx, in, opts...)
}

// DiskCreateOperation is used to monitor the state of Create operations.
type DiskCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskCreateOperation) Metadata() *compute.CreateDiskMetadata {
	return o.Operation.Metadata().(*compute.CreateDiskMetadata)
}

// Response retrieves the operation response.
func (o *DiskCreateOperation) Response() *compute.Disk {
	return o.Operation.Response().(*compute.Disk)
}

// Wait polls the operation until it's done.
func (o *DiskCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) Create(ctx context.Context, in *compute.CreateDiskRequest, opts ...grpc.CallOption) (*DiskCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateDiskMetadata).GetDiskId()
		},
		MetadataType: (*compute.CreateDiskMetadata)(nil),
		ResponseType: (*compute.Disk)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskCreateOperation{*op}, nil
}

// DiskUpdateOperation is used to monitor the state of Update operations.
type DiskUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskUpdateOperation) Metadata() *compute.UpdateDiskMetadata {
	return o.Operation.Metadata().(*compute.UpdateDiskMetadata)
}

// Response retrieves the operation response.
func (o *DiskUpdateOperation) Response() *compute.Disk {
	return o.Operation.Response().(*compute.Disk)
}

// Wait polls the operation until it's done.
func (o *DiskUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) Update(ctx context.Context, in *compute.UpdateDiskRequest, opts ...grpc.CallOption) (*DiskUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateDiskMetadata).GetDiskId()
		},
		MetadataType: (*compute.UpdateDiskMetadata)(nil),
		ResponseType: (*compute.Disk)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskUpdateOperation{*op}, nil
}

// DiskDeleteOperation is used to monitor the state of Delete operations.
type DiskDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskDeleteOperation) Metadata() *compute.DeleteDiskMetadata {
	return o.Operation.Metadata().(*compute.DeleteDiskMetadata)
}

// Response retrieves the operation response.
func (o *DiskDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DiskDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) Delete(ctx context.Context, in *compute.DeleteDiskRequest, opts ...grpc.CallOption) (*DiskDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteDiskMetadata).GetDiskId()
		},
		MetadataType: (*compute.DeleteDiskMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute Disk service.
func (c diskClient) ListOperations(ctx context.Context, in *compute.ListDiskOperationsRequest, opts ...grpc.CallOption) (*compute.ListDiskOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskServiceClient(connection).ListOperations(ctx, in, opts...)
}

// DiskMoveOperation is used to monitor the state of Move operations.
type DiskMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskMoveOperation) Metadata() *compute.MoveDiskMetadata {
	return o.Operation.Metadata().(*compute.MoveDiskMetadata)
}

// Response retrieves the operation response.
func (o *DiskMoveOperation) Response() *compute.Disk {
	return o.Operation.Response().(*compute.Disk)
}

// Wait polls the operation until it's done.
func (o *DiskMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// Move is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) Move(ctx context.Context, in *compute.MoveDiskRequest, opts ...grpc.CallOption) (*DiskMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.MoveDiskMetadata).GetDiskId()
		},
		MetadataType: (*compute.MoveDiskMetadata)(nil),
		ResponseType: (*compute.Disk)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskMoveOperation{*op}, nil
}

// DiskRelocateOperation is used to monitor the state of Relocate operations.
type DiskRelocateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskRelocateOperation) Metadata() *compute.RelocateDiskMetadata {
	return o.Operation.Metadata().(*compute.RelocateDiskMetadata)
}

// Response retrieves the operation response.
func (o *DiskRelocateOperation) Response() *compute.Disk {
	return o.Operation.Response().(*compute.Disk)
}

// Wait polls the operation until it's done.
func (o *DiskRelocateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskRelocateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Disk, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Disk)
	return response, err
}

// Relocate is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) Relocate(ctx context.Context, in *compute.RelocateDiskRequest, opts ...grpc.CallOption) (*DiskRelocateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskRelocate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).Relocate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.RelocateDiskMetadata).GetDiskId()
		},
		MetadataType: (*compute.RelocateDiskMetadata)(nil),
		ResponseType: (*compute.Disk)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskRelocateOperation{*op}, nil
}

// ListSnapshotSchedules is an operation of Yandex.Cloud Compute Disk service.
func (c diskClient) ListSnapshotSchedules(ctx context.Context, in *compute.ListDiskSnapshotSchedulesRequest, opts ...grpc.CallOption) (*compute.ListDiskSnapshotSchedulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskListSnapshotSchedules, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskServiceClient(connection).ListSnapshotSchedules(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute Disk service.
func (c diskClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// DiskSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type DiskSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *DiskSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *DiskSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*DiskSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskSetAccessBindingsOperation{*op}, nil
}

// DiskUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type DiskUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *DiskUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *DiskUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute Disk service.
// It returns an object which should be used to monitor the operation state.
func (c diskClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*DiskUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c diskClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DiskGet                   = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Get")
	DiskList                  = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.List")
	DiskCreate                = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Create")
	DiskUpdate                = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Update")
	DiskDelete                = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Delete")
	DiskListOperations        = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.ListOperations")
	DiskMove                  = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Move")
	DiskRelocate              = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.Relocate")
	DiskListSnapshotSchedules = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.ListSnapshotSchedules")
	DiskListAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.ListAccessBindings")
	DiskSetAccessBindings     = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.SetAccessBindings")
	DiskUpdateAccessBindings  = protoreflect.FullName("yandex.cloud.compute.v1.DiskService.UpdateAccessBindings")
	DiskOperationPoller       = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
