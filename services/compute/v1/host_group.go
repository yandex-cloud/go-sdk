// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// HostGroupClient provides methods for managing HostGroup resources of Yandex.Cloud Compute.
type HostGroupClient interface {
	Get(context.Context, *compute.GetHostGroupRequest, ...grpc.CallOption) (*compute.HostGroup, error)
	List(context.Context, *compute.ListHostGroupsRequest, ...grpc.CallOption) (*compute.ListHostGroupsResponse, error)
	Create(context.Context, *compute.CreateHostGroupRequest, ...grpc.CallOption) (*HostGroupCreateOperation, error)
	Update(context.Context, *compute.UpdateHostGroupRequest, ...grpc.CallOption) (*HostGroupUpdateOperation, error)
	Delete(context.Context, *compute.DeleteHostGroupRequest, ...grpc.CallOption) (*HostGroupDeleteOperation, error)
	ListOperations(context.Context, *compute.ListHostGroupOperationsRequest, ...grpc.CallOption) (*compute.ListHostGroupOperationsResponse, error)
	ListInstances(context.Context, *compute.ListHostGroupInstancesRequest, ...grpc.CallOption) (*compute.ListHostGroupInstancesResponse, error)
	ListHosts(context.Context, *compute.ListHostGroupHostsRequest, ...grpc.CallOption) (*compute.ListHostGroupHostsResponse, error)
	UpdateHost(context.Context, *compute.UpdateHostGroupHostRequest, ...grpc.CallOption) (*HostGroupUpdateHostOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*HostGroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*HostGroupUpdateAccessBindingsOperation, error)
}

var _ HostGroupClient = hostGroupClient{}

type hostGroupClient struct {
	connector transport.Connector
}

// NewHostGroupClient returns HostGroupClient implementation.
func NewHostGroupClient(connector transport.Connector) HostGroupClient {
	return hostGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) Get(ctx context.Context, in *compute.GetHostGroupRequest, opts ...grpc.CallOption) (*compute.HostGroup, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) List(ctx context.Context, in *compute.ListHostGroupsRequest, opts ...grpc.CallOption) (*compute.ListHostGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).List(ctx, in, opts...)
}

// HostGroupCreateOperation is used to monitor the state of Create operations.
type HostGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HostGroupCreateOperation) Metadata() *compute.CreateHostGroupMetadata {
	return o.Operation.Metadata().(*compute.CreateHostGroupMetadata)
}

// Response retrieves the operation response.
func (o *HostGroupCreateOperation) Response() *compute.HostGroup {
	return o.Operation.Response().(*compute.HostGroup)
}

// Wait polls the operation until it's done.
func (o *HostGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.HostGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.HostGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.HostGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.HostGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) Create(ctx context.Context, in *compute.CreateHostGroupRequest, opts ...grpc.CallOption) (*HostGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateHostGroupMetadata).GetHostGroupId()
		},
		MetadataType: (*compute.CreateHostGroupMetadata)(nil),
		ResponseType: (*compute.HostGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupCreateOperation{*op}, nil
}

// HostGroupUpdateOperation is used to monitor the state of Update operations.
type HostGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HostGroupUpdateOperation) Metadata() *compute.UpdateHostGroupMetadata {
	return o.Operation.Metadata().(*compute.UpdateHostGroupMetadata)
}

// Response retrieves the operation response.
func (o *HostGroupUpdateOperation) Response() *compute.HostGroup {
	return o.Operation.Response().(*compute.HostGroup)
}

// Wait polls the operation until it's done.
func (o *HostGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.HostGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.HostGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.HostGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.HostGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) Update(ctx context.Context, in *compute.UpdateHostGroupRequest, opts ...grpc.CallOption) (*HostGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateHostGroupMetadata).GetHostGroupId()
		},
		MetadataType: (*compute.UpdateHostGroupMetadata)(nil),
		ResponseType: (*compute.HostGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupUpdateOperation{*op}, nil
}

// HostGroupDeleteOperation is used to monitor the state of Delete operations.
type HostGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HostGroupDeleteOperation) Metadata() *compute.DeleteHostGroupMetadata {
	return o.Operation.Metadata().(*compute.DeleteHostGroupMetadata)
}

// Response retrieves the operation response.
func (o *HostGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HostGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) Delete(ctx context.Context, in *compute.DeleteHostGroupRequest, opts ...grpc.CallOption) (*HostGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteHostGroupMetadata).GetHostGroupId()
		},
		MetadataType: (*compute.DeleteHostGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) ListOperations(ctx context.Context, in *compute.ListHostGroupOperationsRequest, opts ...grpc.CallOption) (*compute.ListHostGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListInstances is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) ListInstances(ctx context.Context, in *compute.ListHostGroupInstancesRequest, opts ...grpc.CallOption) (*compute.ListHostGroupInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupListInstances, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).ListInstances(ctx, in, opts...)
}

// ListHosts is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) ListHosts(ctx context.Context, in *compute.ListHostGroupHostsRequest, opts ...grpc.CallOption) (*compute.ListHostGroupHostsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupListHosts, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).ListHosts(ctx, in, opts...)
}

// HostGroupUpdateHostOperation is used to monitor the state of UpdateHost operations.
type HostGroupUpdateHostOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HostGroupUpdateHostOperation) Metadata() *compute.UpdateHostGroupHostMetadata {
	return o.Operation.Metadata().(*compute.UpdateHostGroupHostMetadata)
}

// Response retrieves the operation response.
func (o *HostGroupUpdateHostOperation) Response() *compute.Host {
	return o.Operation.Response().(*compute.Host)
}

// Wait polls the operation until it's done.
func (o *HostGroupUpdateHostOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.Host, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.Host)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupUpdateHostOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.Host, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.Host)
	return response, err
}

// UpdateHost is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) UpdateHost(ctx context.Context, in *compute.UpdateHostGroupHostRequest, opts ...grpc.CallOption) (*HostGroupUpdateHostOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupUpdateHost, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).UpdateHost(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateHostGroupHostMetadata).GetHostGroupId()
		},
		MetadataType: (*compute.UpdateHostGroupHostMetadata)(nil),
		ResponseType: (*compute.Host)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupUpdateHostOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Compute HostGroup service.
func (c hostGroupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewHostGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// HostGroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type HostGroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *HostGroupSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *HostGroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*HostGroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupSetAccessBindingsOperation{*op}, nil
}

// HostGroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type HostGroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *HostGroupUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *HostGroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HostGroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute HostGroup service.
// It returns an object which should be used to monitor the operation state.
func (c hostGroupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*HostGroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewHostGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HostGroupUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c hostGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HostGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	HostGroupGet                  = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.Get")
	HostGroupList                 = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.List")
	HostGroupCreate               = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.Create")
	HostGroupUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.Update")
	HostGroupDelete               = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.Delete")
	HostGroupListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.ListOperations")
	HostGroupListInstances        = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.ListInstances")
	HostGroupListHosts            = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.ListHosts")
	HostGroupUpdateHost           = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.UpdateHost")
	HostGroupListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.ListAccessBindings")
	HostGroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.SetAccessBindings")
	HostGroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.HostGroupService.UpdateAccessBindings")
	HostGroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
