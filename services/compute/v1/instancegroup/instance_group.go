// Code generated by sdkgen-v2. DO NOT EDIT.
package instancegroupsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	instancegroup "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1/instancegroup"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// InstanceGroupClient provides methods for managing InstanceGroup resources of Yandex.Cloud InstanceGroup.
type InstanceGroupClient interface {
	Get(context.Context, *instancegroup.GetInstanceGroupRequest, ...grpc.CallOption) (*instancegroup.InstanceGroup, error)
	List(context.Context, *instancegroup.ListInstanceGroupsRequest, ...grpc.CallOption) (*instancegroup.ListInstanceGroupsResponse, error)
	Create(context.Context, *instancegroup.CreateInstanceGroupRequest, ...grpc.CallOption) (*InstanceGroupCreateOperation, error)
	CreateFromYaml(context.Context, *instancegroup.CreateInstanceGroupFromYamlRequest, ...grpc.CallOption) (*InstanceGroupCreateFromYamlOperation, error)
	Update(context.Context, *instancegroup.UpdateInstanceGroupRequest, ...grpc.CallOption) (*InstanceGroupUpdateOperation, error)
	UpdateFromYaml(context.Context, *instancegroup.UpdateInstanceGroupFromYamlRequest, ...grpc.CallOption) (*InstanceGroupUpdateFromYamlOperation, error)
	Stop(context.Context, *instancegroup.StopInstanceGroupRequest, ...grpc.CallOption) (*InstanceGroupStopOperation, error)
	RollingRestart(context.Context, *instancegroup.RollingRestartRequest, ...grpc.CallOption) (*InstanceGroupRollingRestartOperation, error)
	RollingRecreate(context.Context, *instancegroup.RollingRecreateRequest, ...grpc.CallOption) (*InstanceGroupRollingRecreateOperation, error)
	Start(context.Context, *instancegroup.StartInstanceGroupRequest, ...grpc.CallOption) (*InstanceGroupStartOperation, error)
	Delete(context.Context, *instancegroup.DeleteInstanceGroupRequest, ...grpc.CallOption) (*InstanceGroupDeleteOperation, error)
	ListInstances(context.Context, *instancegroup.ListInstanceGroupInstancesRequest, ...grpc.CallOption) (*instancegroup.ListInstanceGroupInstancesResponse, error)
	DeleteInstances(context.Context, *instancegroup.DeleteInstancesRequest, ...grpc.CallOption) (*InstanceGroupDeleteInstancesOperation, error)
	StopInstances(context.Context, *instancegroup.StopInstancesRequest, ...grpc.CallOption) (*InstanceGroupStopInstancesOperation, error)
	ListOperations(context.Context, *instancegroup.ListInstanceGroupOperationsRequest, ...grpc.CallOption) (*instancegroup.ListInstanceGroupOperationsResponse, error)
	ListLogRecords(context.Context, *instancegroup.ListInstanceGroupLogRecordsRequest, ...grpc.CallOption) (*instancegroup.ListInstanceGroupLogRecordsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*InstanceGroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*InstanceGroupUpdateAccessBindingsOperation, error)
	ResumeProcesses(context.Context, *instancegroup.ResumeInstanceGroupProcessesRequest, ...grpc.CallOption) (*InstanceGroupResumeProcessesOperation, error)
	PauseProcesses(context.Context, *instancegroup.PauseInstanceGroupProcessesRequest, ...grpc.CallOption) (*InstanceGroupPauseProcessesOperation, error)
}

var _ InstanceGroupClient = instanceGroupClient{}

type instanceGroupClient struct {
	connector transport.Connector
}

// NewInstanceGroupClient returns InstanceGroupClient implementation.
func NewInstanceGroupClient(connector transport.Connector) InstanceGroupClient {
	return instanceGroupClient{connector}
}

// Get is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) Get(ctx context.Context, in *instancegroup.GetInstanceGroupRequest, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) List(ctx context.Context, in *instancegroup.ListInstanceGroupsRequest, opts ...grpc.CallOption) (*instancegroup.ListInstanceGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).List(ctx, in, opts...)
}

// InstanceGroupCreateOperation is used to monitor the state of Create operations.
type InstanceGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupCreateOperation) Metadata() *instancegroup.CreateInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.CreateInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupCreateOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) Create(ctx context.Context, in *instancegroup.CreateInstanceGroupRequest, opts ...grpc.CallOption) (*InstanceGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.CreateInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.CreateInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupCreateOperation{*op}, nil
}

// InstanceGroupCreateFromYamlOperation is used to monitor the state of CreateFromYaml operations.
type InstanceGroupCreateFromYamlOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupCreateFromYamlOperation) Metadata() *instancegroup.CreateInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.CreateInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupCreateFromYamlOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupCreateFromYamlOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupCreateFromYamlOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// CreateFromYaml is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) CreateFromYaml(ctx context.Context, in *instancegroup.CreateInstanceGroupFromYamlRequest, opts ...grpc.CallOption) (*InstanceGroupCreateFromYamlOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupCreateFromYaml, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).CreateFromYaml(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.CreateInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.CreateInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupCreateFromYamlOperation{*op}, nil
}

// InstanceGroupUpdateOperation is used to monitor the state of Update operations.
type InstanceGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupUpdateOperation) Metadata() *instancegroup.UpdateInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.UpdateInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupUpdateOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) Update(ctx context.Context, in *instancegroup.UpdateInstanceGroupRequest, opts ...grpc.CallOption) (*InstanceGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.UpdateInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.UpdateInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupUpdateOperation{*op}, nil
}

// InstanceGroupUpdateFromYamlOperation is used to monitor the state of UpdateFromYaml operations.
type InstanceGroupUpdateFromYamlOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupUpdateFromYamlOperation) Metadata() *instancegroup.UpdateInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.UpdateInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupUpdateFromYamlOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupUpdateFromYamlOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupUpdateFromYamlOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// UpdateFromYaml is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) UpdateFromYaml(ctx context.Context, in *instancegroup.UpdateInstanceGroupFromYamlRequest, opts ...grpc.CallOption) (*InstanceGroupUpdateFromYamlOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupUpdateFromYaml, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).UpdateFromYaml(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.UpdateInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.UpdateInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupUpdateFromYamlOperation{*op}, nil
}

// InstanceGroupStopOperation is used to monitor the state of Stop operations.
type InstanceGroupStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupStopOperation) Metadata() *instancegroup.StopInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.StopInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupStopOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// Stop is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) Stop(ctx context.Context, in *instancegroup.StopInstanceGroupRequest, opts ...grpc.CallOption) (*InstanceGroupStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.StopInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.StopInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupStopOperation{*op}, nil
}

// InstanceGroupRollingRestartOperation is used to monitor the state of RollingRestart operations.
type InstanceGroupRollingRestartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupRollingRestartOperation) Metadata() *instancegroup.RollingRestartMetadata {
	return o.Operation.Metadata().(*instancegroup.RollingRestartMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupRollingRestartOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupRollingRestartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupRollingRestartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// RollingRestart is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) RollingRestart(ctx context.Context, in *instancegroup.RollingRestartRequest, opts ...grpc.CallOption) (*InstanceGroupRollingRestartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupRollingRestart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).RollingRestart(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.RollingRestartMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.RollingRestartMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupRollingRestartOperation{*op}, nil
}

// InstanceGroupRollingRecreateOperation is used to monitor the state of RollingRecreate operations.
type InstanceGroupRollingRecreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupRollingRecreateOperation) Metadata() *instancegroup.RollingRecreateMetadata {
	return o.Operation.Metadata().(*instancegroup.RollingRecreateMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupRollingRecreateOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupRollingRecreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupRollingRecreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// RollingRecreate is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) RollingRecreate(ctx context.Context, in *instancegroup.RollingRecreateRequest, opts ...grpc.CallOption) (*InstanceGroupRollingRecreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupRollingRecreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).RollingRecreate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.RollingRecreateMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.RollingRecreateMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupRollingRecreateOperation{*op}, nil
}

// InstanceGroupStartOperation is used to monitor the state of Start operations.
type InstanceGroupStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupStartOperation) Metadata() *instancegroup.StartInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.StartInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupStartOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// Start is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) Start(ctx context.Context, in *instancegroup.StartInstanceGroupRequest, opts ...grpc.CallOption) (*InstanceGroupStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.StartInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.StartInstanceGroupMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupStartOperation{*op}, nil
}

// InstanceGroupDeleteOperation is used to monitor the state of Delete operations.
type InstanceGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupDeleteOperation) Metadata() *instancegroup.DeleteInstanceGroupMetadata {
	return o.Operation.Metadata().(*instancegroup.DeleteInstanceGroupMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) Delete(ctx context.Context, in *instancegroup.DeleteInstanceGroupRequest, opts ...grpc.CallOption) (*InstanceGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.DeleteInstanceGroupMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.DeleteInstanceGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupDeleteOperation{*op}, nil
}

// ListInstances is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) ListInstances(ctx context.Context, in *instancegroup.ListInstanceGroupInstancesRequest, opts ...grpc.CallOption) (*instancegroup.ListInstanceGroupInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupListInstances, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).ListInstances(ctx, in, opts...)
}

// InstanceGroupDeleteInstancesOperation is used to monitor the state of DeleteInstances operations.
type InstanceGroupDeleteInstancesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupDeleteInstancesOperation) Metadata() *instancegroup.DeleteInstancesMetadata {
	return o.Operation.Metadata().(*instancegroup.DeleteInstancesMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupDeleteInstancesOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupDeleteInstancesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupDeleteInstancesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// DeleteInstances is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) DeleteInstances(ctx context.Context, in *instancegroup.DeleteInstancesRequest, opts ...grpc.CallOption) (*InstanceGroupDeleteInstancesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupDeleteInstances, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).DeleteInstances(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.DeleteInstancesMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.DeleteInstancesMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupDeleteInstancesOperation{*op}, nil
}

// InstanceGroupStopInstancesOperation is used to monitor the state of StopInstances operations.
type InstanceGroupStopInstancesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupStopInstancesOperation) Metadata() *instancegroup.StopInstancesMetadata {
	return o.Operation.Metadata().(*instancegroup.StopInstancesMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupStopInstancesOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupStopInstancesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupStopInstancesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// StopInstances is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) StopInstances(ctx context.Context, in *instancegroup.StopInstancesRequest, opts ...grpc.CallOption) (*InstanceGroupStopInstancesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupStopInstances, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).StopInstances(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.StopInstancesMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.StopInstancesMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupStopInstancesOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) ListOperations(ctx context.Context, in *instancegroup.ListInstanceGroupOperationsRequest, opts ...grpc.CallOption) (*instancegroup.ListInstanceGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListLogRecords is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) ListLogRecords(ctx context.Context, in *instancegroup.ListInstanceGroupLogRecordsRequest, opts ...grpc.CallOption) (*instancegroup.ListInstanceGroupLogRecordsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupListLogRecords, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).ListLogRecords(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
func (c instanceGroupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return instancegroup.NewInstanceGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// InstanceGroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type InstanceGroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *InstanceGroupSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*InstanceGroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupSetAccessBindingsOperation{*op}, nil
}

// InstanceGroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type InstanceGroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *InstanceGroupUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*InstanceGroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupUpdateAccessBindingsOperation{*op}, nil
}

// InstanceGroupResumeProcessesOperation is used to monitor the state of ResumeProcesses operations.
type InstanceGroupResumeProcessesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupResumeProcessesOperation) Metadata() *instancegroup.ResumeInstanceGroupProcessMetadata {
	return o.Operation.Metadata().(*instancegroup.ResumeInstanceGroupProcessMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupResumeProcessesOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupResumeProcessesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupResumeProcessesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// ResumeProcesses is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) ResumeProcesses(ctx context.Context, in *instancegroup.ResumeInstanceGroupProcessesRequest, opts ...grpc.CallOption) (*InstanceGroupResumeProcessesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupResumeProcesses, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).ResumeProcesses(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.ResumeInstanceGroupProcessMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.ResumeInstanceGroupProcessMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupResumeProcessesOperation{*op}, nil
}

// InstanceGroupPauseProcessesOperation is used to monitor the state of PauseProcesses operations.
type InstanceGroupPauseProcessesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceGroupPauseProcessesOperation) Metadata() *instancegroup.PauseInstanceGroupProcessMetadata {
	return o.Operation.Metadata().(*instancegroup.PauseInstanceGroupProcessMetadata)
}

// Response retrieves the operation response.
func (o *InstanceGroupPauseProcessesOperation) Response() *instancegroup.InstanceGroup {
	return o.Operation.Response().(*instancegroup.InstanceGroup)
}

// Wait polls the operation until it's done.
func (o *InstanceGroupPauseProcessesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceGroupPauseProcessesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*instancegroup.InstanceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*instancegroup.InstanceGroup)
	return response, err
}

// PauseProcesses is an operation of Yandex.Cloud InstanceGroup InstanceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c instanceGroupClient) PauseProcesses(ctx context.Context, in *instancegroup.PauseInstanceGroupProcessesRequest, opts ...grpc.CallOption) (*InstanceGroupPauseProcessesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupPauseProcesses, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := instancegroup.NewInstanceGroupServiceClient(connection).PauseProcesses(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*instancegroup.PauseInstanceGroupProcessMetadata).GetInstanceGroupId()
		},
		MetadataType: (*instancegroup.PauseInstanceGroupProcessMetadata)(nil),
		ResponseType: (*instancegroup.InstanceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceGroupPauseProcessesOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c instanceGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	InstanceGroupGet                  = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Get")
	InstanceGroupList                 = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.List")
	InstanceGroupCreate               = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Create")
	InstanceGroupCreateFromYaml       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.CreateFromYaml")
	InstanceGroupUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Update")
	InstanceGroupUpdateFromYaml       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.UpdateFromYaml")
	InstanceGroupStop                 = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Stop")
	InstanceGroupRollingRestart       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.RollingRestart")
	InstanceGroupRollingRecreate      = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.RollingRecreate")
	InstanceGroupStart                = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Start")
	InstanceGroupDelete               = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Delete")
	InstanceGroupListInstances        = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ListInstances")
	InstanceGroupDeleteInstances      = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.DeleteInstances")
	InstanceGroupStopInstances        = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.StopInstances")
	InstanceGroupListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ListOperations")
	InstanceGroupListLogRecords       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ListLogRecords")
	InstanceGroupListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ListAccessBindings")
	InstanceGroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.SetAccessBindings")
	InstanceGroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.UpdateAccessBindings")
	InstanceGroupResumeProcesses      = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ResumeProcesses")
	InstanceGroupPauseProcesses       = protoreflect.FullName("yandex.cloud.compute.v1.instancegroup.InstanceGroupService.PauseProcesses")
	InstanceGroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
