// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SnapshotScheduleClient provides methods for managing SnapshotSchedule resources of Yandex.Cloud Compute.
type SnapshotScheduleClient interface {
	Get(context.Context, *compute.GetSnapshotScheduleRequest, ...grpc.CallOption) (*compute.SnapshotSchedule, error)
	List(context.Context, *compute.ListSnapshotSchedulesRequest, ...grpc.CallOption) (*compute.ListSnapshotSchedulesResponse, error)
	Create(context.Context, *compute.CreateSnapshotScheduleRequest, ...grpc.CallOption) (*SnapshotScheduleCreateOperation, error)
	Update(context.Context, *compute.UpdateSnapshotScheduleRequest, ...grpc.CallOption) (*SnapshotScheduleUpdateOperation, error)
	Delete(context.Context, *compute.DeleteSnapshotScheduleRequest, ...grpc.CallOption) (*SnapshotScheduleDeleteOperation, error)
	UpdateDisks(context.Context, *compute.UpdateSnapshotScheduleDisksRequest, ...grpc.CallOption) (*SnapshotScheduleUpdateDisksOperation, error)
	Disable(context.Context, *compute.DisableSnapshotScheduleRequest, ...grpc.CallOption) (*SnapshotScheduleDisableOperation, error)
	Enable(context.Context, *compute.EnableSnapshotScheduleRequest, ...grpc.CallOption) (*SnapshotScheduleEnableOperation, error)
	ListOperations(context.Context, *compute.ListSnapshotScheduleOperationsRequest, ...grpc.CallOption) (*compute.ListSnapshotScheduleOperationsResponse, error)
	ListSnapshots(context.Context, *compute.ListSnapshotScheduleSnapshotsRequest, ...grpc.CallOption) (*compute.ListSnapshotScheduleSnapshotsResponse, error)
	ListDisks(context.Context, *compute.ListSnapshotScheduleDisksRequest, ...grpc.CallOption) (*compute.ListSnapshotScheduleDisksResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*SnapshotScheduleSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*SnapshotScheduleUpdateAccessBindingsOperation, error)
}

var _ SnapshotScheduleClient = snapshotScheduleClient{}

type snapshotScheduleClient struct {
	connector transport.Connector
}

// NewSnapshotScheduleClient returns SnapshotScheduleClient implementation.
func NewSnapshotScheduleClient(connector transport.Connector) SnapshotScheduleClient {
	return snapshotScheduleClient{connector}
}

// Get is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) Get(ctx context.Context, in *compute.GetSnapshotScheduleRequest, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) List(ctx context.Context, in *compute.ListSnapshotSchedulesRequest, opts ...grpc.CallOption) (*compute.ListSnapshotSchedulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).List(ctx, in, opts...)
}

// SnapshotScheduleCreateOperation is used to monitor the state of Create operations.
type SnapshotScheduleCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleCreateOperation) Metadata() *compute.CreateSnapshotScheduleMetadata {
	return o.Operation.Metadata().(*compute.CreateSnapshotScheduleMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleCreateOperation) Response() *compute.SnapshotSchedule {
	return o.Operation.Response().(*compute.SnapshotSchedule)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) Create(ctx context.Context, in *compute.CreateSnapshotScheduleRequest, opts ...grpc.CallOption) (*SnapshotScheduleCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateSnapshotScheduleMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.CreateSnapshotScheduleMetadata)(nil),
		ResponseType: (*compute.SnapshotSchedule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleCreateOperation{*op}, nil
}

// SnapshotScheduleUpdateOperation is used to monitor the state of Update operations.
type SnapshotScheduleUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleUpdateOperation) Metadata() *compute.UpdateSnapshotScheduleMetadata {
	return o.Operation.Metadata().(*compute.UpdateSnapshotScheduleMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleUpdateOperation) Response() *compute.SnapshotSchedule {
	return o.Operation.Response().(*compute.SnapshotSchedule)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) Update(ctx context.Context, in *compute.UpdateSnapshotScheduleRequest, opts ...grpc.CallOption) (*SnapshotScheduleUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateSnapshotScheduleMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.UpdateSnapshotScheduleMetadata)(nil),
		ResponseType: (*compute.SnapshotSchedule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleUpdateOperation{*op}, nil
}

// SnapshotScheduleDeleteOperation is used to monitor the state of Delete operations.
type SnapshotScheduleDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleDeleteOperation) Metadata() *compute.DeleteSnapshotScheduleMetadata {
	return o.Operation.Metadata().(*compute.DeleteSnapshotScheduleMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) Delete(ctx context.Context, in *compute.DeleteSnapshotScheduleRequest, opts ...grpc.CallOption) (*SnapshotScheduleDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteSnapshotScheduleMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.DeleteSnapshotScheduleMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleDeleteOperation{*op}, nil
}

// SnapshotScheduleUpdateDisksOperation is used to monitor the state of UpdateDisks operations.
type SnapshotScheduleUpdateDisksOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleUpdateDisksOperation) Metadata() *compute.UpdateSnapshotScheduleDisksMetadata {
	return o.Operation.Metadata().(*compute.UpdateSnapshotScheduleDisksMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleUpdateDisksOperation) Response() *compute.SnapshotSchedule {
	return o.Operation.Response().(*compute.SnapshotSchedule)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleUpdateDisksOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleUpdateDisksOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// UpdateDisks is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) UpdateDisks(ctx context.Context, in *compute.UpdateSnapshotScheduleDisksRequest, opts ...grpc.CallOption) (*SnapshotScheduleUpdateDisksOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleUpdateDisks, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).UpdateDisks(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateSnapshotScheduleDisksMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.UpdateSnapshotScheduleDisksMetadata)(nil),
		ResponseType: (*compute.SnapshotSchedule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleUpdateDisksOperation{*op}, nil
}

// SnapshotScheduleDisableOperation is used to monitor the state of Disable operations.
type SnapshotScheduleDisableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleDisableOperation) Metadata() *compute.DisableSnapshotScheduleMetadata {
	return o.Operation.Metadata().(*compute.DisableSnapshotScheduleMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleDisableOperation) Response() *compute.SnapshotSchedule {
	return o.Operation.Response().(*compute.SnapshotSchedule)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleDisableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleDisableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// Disable is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) Disable(ctx context.Context, in *compute.DisableSnapshotScheduleRequest, opts ...grpc.CallOption) (*SnapshotScheduleDisableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleDisable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).Disable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DisableSnapshotScheduleMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.DisableSnapshotScheduleMetadata)(nil),
		ResponseType: (*compute.SnapshotSchedule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleDisableOperation{*op}, nil
}

// SnapshotScheduleEnableOperation is used to monitor the state of Enable operations.
type SnapshotScheduleEnableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SnapshotScheduleEnableOperation) Metadata() *compute.EnableSnapshotScheduleMetadata {
	return o.Operation.Metadata().(*compute.EnableSnapshotScheduleMetadata)
}

// Response retrieves the operation response.
func (o *SnapshotScheduleEnableOperation) Response() *compute.SnapshotSchedule {
	return o.Operation.Response().(*compute.SnapshotSchedule)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleEnableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleEnableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.SnapshotSchedule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.SnapshotSchedule)
	return response, err
}

// Enable is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) Enable(ctx context.Context, in *compute.EnableSnapshotScheduleRequest, opts ...grpc.CallOption) (*SnapshotScheduleEnableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleEnable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).Enable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.EnableSnapshotScheduleMetadata).GetSnapshotScheduleId()
		},
		MetadataType: (*compute.EnableSnapshotScheduleMetadata)(nil),
		ResponseType: (*compute.SnapshotSchedule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleEnableOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) ListOperations(ctx context.Context, in *compute.ListSnapshotScheduleOperationsRequest, opts ...grpc.CallOption) (*compute.ListSnapshotScheduleOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListSnapshots is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) ListSnapshots(ctx context.Context, in *compute.ListSnapshotScheduleSnapshotsRequest, opts ...grpc.CallOption) (*compute.ListSnapshotScheduleSnapshotsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleListSnapshots, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).ListSnapshots(ctx, in, opts...)
}

// ListDisks is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) ListDisks(ctx context.Context, in *compute.ListSnapshotScheduleDisksRequest, opts ...grpc.CallOption) (*compute.ListSnapshotScheduleDisksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleListDisks, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).ListDisks(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute SnapshotSchedule service.
func (c snapshotScheduleClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewSnapshotScheduleServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// SnapshotScheduleSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type SnapshotScheduleSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *SnapshotScheduleSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*SnapshotScheduleSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleSetAccessBindingsOperation{*op}, nil
}

// SnapshotScheduleUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type SnapshotScheduleUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *SnapshotScheduleUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *SnapshotScheduleUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SnapshotScheduleUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute SnapshotSchedule service.
// It returns an object which should be used to monitor the operation state.
func (c snapshotScheduleClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*SnapshotScheduleUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewSnapshotScheduleServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SnapshotScheduleUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c snapshotScheduleClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SnapshotScheduleOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SnapshotScheduleGet                  = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Get")
	SnapshotScheduleList                 = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.List")
	SnapshotScheduleCreate               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Create")
	SnapshotScheduleUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Update")
	SnapshotScheduleDelete               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Delete")
	SnapshotScheduleUpdateDisks          = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.UpdateDisks")
	SnapshotScheduleDisable              = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Disable")
	SnapshotScheduleEnable               = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.Enable")
	SnapshotScheduleListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.ListOperations")
	SnapshotScheduleListSnapshots        = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.ListSnapshots")
	SnapshotScheduleListDisks            = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.ListDisks")
	SnapshotScheduleListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.ListAccessBindings")
	SnapshotScheduleSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.SetAccessBindings")
	SnapshotScheduleUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.SnapshotScheduleService.UpdateAccessBindings")
	SnapshotScheduleOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
