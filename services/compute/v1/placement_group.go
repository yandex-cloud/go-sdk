// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PlacementGroupClient provides methods for managing PlacementGroup resources of Yandex.Cloud Compute.
type PlacementGroupClient interface {
	Get(context.Context, *compute.GetPlacementGroupRequest, ...grpc.CallOption) (*compute.PlacementGroup, error)
	List(context.Context, *compute.ListPlacementGroupsRequest, ...grpc.CallOption) (*compute.ListPlacementGroupsResponse, error)
	Create(context.Context, *compute.CreatePlacementGroupRequest, ...grpc.CallOption) (*PlacementGroupCreateOperation, error)
	Update(context.Context, *compute.UpdatePlacementGroupRequest, ...grpc.CallOption) (*PlacementGroupUpdateOperation, error)
	Delete(context.Context, *compute.DeletePlacementGroupRequest, ...grpc.CallOption) (*PlacementGroupDeleteOperation, error)
	ListInstances(context.Context, *compute.ListPlacementGroupInstancesRequest, ...grpc.CallOption) (*compute.ListPlacementGroupInstancesResponse, error)
	ListOperations(context.Context, *compute.ListPlacementGroupOperationsRequest, ...grpc.CallOption) (*compute.ListPlacementGroupOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*PlacementGroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*PlacementGroupUpdateAccessBindingsOperation, error)
}

var _ PlacementGroupClient = placementGroupClient{}

type placementGroupClient struct {
	connector transport.Connector
}

// NewPlacementGroupClient returns PlacementGroupClient implementation.
func NewPlacementGroupClient(connector transport.Connector) PlacementGroupClient {
	return placementGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Compute PlacementGroup service.
func (c placementGroupClient) Get(ctx context.Context, in *compute.GetPlacementGroupRequest, opts ...grpc.CallOption) (*compute.PlacementGroup, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewPlacementGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute PlacementGroup service.
func (c placementGroupClient) List(ctx context.Context, in *compute.ListPlacementGroupsRequest, opts ...grpc.CallOption) (*compute.ListPlacementGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewPlacementGroupServiceClient(connection).List(ctx, in, opts...)
}

// PlacementGroupCreateOperation is used to monitor the state of Create operations.
type PlacementGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PlacementGroupCreateOperation) Metadata() *compute.CreatePlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.CreatePlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *PlacementGroupCreateOperation) Response() *compute.PlacementGroup {
	return o.Operation.Response().(*compute.PlacementGroup)
}

// Wait polls the operation until it's done.
func (o *PlacementGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.PlacementGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.PlacementGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PlacementGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.PlacementGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.PlacementGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute PlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c placementGroupClient) Create(ctx context.Context, in *compute.CreatePlacementGroupRequest, opts ...grpc.CallOption) (*PlacementGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewPlacementGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreatePlacementGroupMetadata).GetPlacementGroupId()
		},
		MetadataType: (*compute.CreatePlacementGroupMetadata)(nil),
		ResponseType: (*compute.PlacementGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PlacementGroupCreateOperation{*op}, nil
}

// PlacementGroupUpdateOperation is used to monitor the state of Update operations.
type PlacementGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PlacementGroupUpdateOperation) Metadata() *compute.UpdatePlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.UpdatePlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *PlacementGroupUpdateOperation) Response() *compute.PlacementGroup {
	return o.Operation.Response().(*compute.PlacementGroup)
}

// Wait polls the operation until it's done.
func (o *PlacementGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.PlacementGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.PlacementGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PlacementGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.PlacementGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.PlacementGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute PlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c placementGroupClient) Update(ctx context.Context, in *compute.UpdatePlacementGroupRequest, opts ...grpc.CallOption) (*PlacementGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewPlacementGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdatePlacementGroupMetadata).GetPlacementGroupId()
		},
		MetadataType: (*compute.UpdatePlacementGroupMetadata)(nil),
		ResponseType: (*compute.PlacementGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PlacementGroupUpdateOperation{*op}, nil
}

// PlacementGroupDeleteOperation is used to monitor the state of Delete operations.
type PlacementGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PlacementGroupDeleteOperation) Metadata() *compute.DeletePlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.DeletePlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *PlacementGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PlacementGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PlacementGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute PlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c placementGroupClient) Delete(ctx context.Context, in *compute.DeletePlacementGroupRequest, opts ...grpc.CallOption) (*PlacementGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewPlacementGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeletePlacementGroupMetadata).GetPlacementGroupId()
		},
		MetadataType: (*compute.DeletePlacementGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PlacementGroupDeleteOperation{*op}, nil
}

// ListInstances is an operation of Yandex.Cloud Compute PlacementGroup service.
func (c placementGroupClient) ListInstances(ctx context.Context, in *compute.ListPlacementGroupInstancesRequest, opts ...grpc.CallOption) (*compute.ListPlacementGroupInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupListInstances, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewPlacementGroupServiceClient(connection).ListInstances(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Compute PlacementGroup service.
func (c placementGroupClient) ListOperations(ctx context.Context, in *compute.ListPlacementGroupOperationsRequest, opts ...grpc.CallOption) (*compute.ListPlacementGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewPlacementGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute PlacementGroup service.
func (c placementGroupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewPlacementGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// PlacementGroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type PlacementGroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PlacementGroupSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *PlacementGroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PlacementGroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute PlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c placementGroupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*PlacementGroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewPlacementGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PlacementGroupSetAccessBindingsOperation{*op}, nil
}

// PlacementGroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type PlacementGroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PlacementGroupUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *PlacementGroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PlacementGroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute PlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c placementGroupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*PlacementGroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewPlacementGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PlacementGroupUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c placementGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PlacementGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PlacementGroupGet                  = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.Get")
	PlacementGroupList                 = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.List")
	PlacementGroupCreate               = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.Create")
	PlacementGroupUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.Update")
	PlacementGroupDelete               = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.Delete")
	PlacementGroupListInstances        = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.ListInstances")
	PlacementGroupListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.ListOperations")
	PlacementGroupListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.ListAccessBindings")
	PlacementGroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.SetAccessBindings")
	PlacementGroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.PlacementGroupService.UpdateAccessBindings")
	PlacementGroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
