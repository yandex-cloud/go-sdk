// Code generated by sdkgen-v2. DO NOT EDIT.
package computesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DiskPlacementGroupClient provides methods for managing DiskPlacementGroup resources of Yandex.Cloud Compute.
type DiskPlacementGroupClient interface {
	Get(context.Context, *compute.GetDiskPlacementGroupRequest, ...grpc.CallOption) (*compute.DiskPlacementGroup, error)
	List(context.Context, *compute.ListDiskPlacementGroupsRequest, ...grpc.CallOption) (*compute.ListDiskPlacementGroupsResponse, error)
	Create(context.Context, *compute.CreateDiskPlacementGroupRequest, ...grpc.CallOption) (*DiskPlacementGroupCreateOperation, error)
	Update(context.Context, *compute.UpdateDiskPlacementGroupRequest, ...grpc.CallOption) (*DiskPlacementGroupUpdateOperation, error)
	Delete(context.Context, *compute.DeleteDiskPlacementGroupRequest, ...grpc.CallOption) (*DiskPlacementGroupDeleteOperation, error)
	ListDisks(context.Context, *compute.ListDiskPlacementGroupDisksRequest, ...grpc.CallOption) (*compute.ListDiskPlacementGroupDisksResponse, error)
	ListOperations(context.Context, *compute.ListDiskPlacementGroupOperationsRequest, ...grpc.CallOption) (*compute.ListDiskPlacementGroupOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*DiskPlacementGroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*DiskPlacementGroupUpdateAccessBindingsOperation, error)
}

var _ DiskPlacementGroupClient = diskPlacementGroupClient{}

type diskPlacementGroupClient struct {
	connector transport.Connector
}

// NewDiskPlacementGroupClient returns DiskPlacementGroupClient implementation.
func NewDiskPlacementGroupClient(connector transport.Connector) DiskPlacementGroupClient {
	return diskPlacementGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
func (c diskPlacementGroupClient) Get(ctx context.Context, in *compute.GetDiskPlacementGroupRequest, opts ...grpc.CallOption) (*compute.DiskPlacementGroup, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskPlacementGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
func (c diskPlacementGroupClient) List(ctx context.Context, in *compute.ListDiskPlacementGroupsRequest, opts ...grpc.CallOption) (*compute.ListDiskPlacementGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskPlacementGroupServiceClient(connection).List(ctx, in, opts...)
}

// DiskPlacementGroupCreateOperation is used to monitor the state of Create operations.
type DiskPlacementGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskPlacementGroupCreateOperation) Metadata() *compute.CreateDiskPlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.CreateDiskPlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *DiskPlacementGroupCreateOperation) Response() *compute.DiskPlacementGroup {
	return o.Operation.Response().(*compute.DiskPlacementGroup)
}

// Wait polls the operation until it's done.
func (o *DiskPlacementGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.DiskPlacementGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.DiskPlacementGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskPlacementGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.DiskPlacementGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.DiskPlacementGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c diskPlacementGroupClient) Create(ctx context.Context, in *compute.CreateDiskPlacementGroupRequest, opts ...grpc.CallOption) (*DiskPlacementGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskPlacementGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.CreateDiskPlacementGroupMetadata).GetDiskPlacementGroupId()
		},
		MetadataType: (*compute.CreateDiskPlacementGroupMetadata)(nil),
		ResponseType: (*compute.DiskPlacementGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskPlacementGroupCreateOperation{*op}, nil
}

// DiskPlacementGroupUpdateOperation is used to monitor the state of Update operations.
type DiskPlacementGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskPlacementGroupUpdateOperation) Metadata() *compute.UpdateDiskPlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.UpdateDiskPlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *DiskPlacementGroupUpdateOperation) Response() *compute.DiskPlacementGroup {
	return o.Operation.Response().(*compute.DiskPlacementGroup)
}

// Wait polls the operation until it's done.
func (o *DiskPlacementGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*compute.DiskPlacementGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*compute.DiskPlacementGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskPlacementGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*compute.DiskPlacementGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*compute.DiskPlacementGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c diskPlacementGroupClient) Update(ctx context.Context, in *compute.UpdateDiskPlacementGroupRequest, opts ...grpc.CallOption) (*DiskPlacementGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskPlacementGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.UpdateDiskPlacementGroupMetadata).GetDiskPlacementGroupId()
		},
		MetadataType: (*compute.UpdateDiskPlacementGroupMetadata)(nil),
		ResponseType: (*compute.DiskPlacementGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskPlacementGroupUpdateOperation{*op}, nil
}

// DiskPlacementGroupDeleteOperation is used to monitor the state of Delete operations.
type DiskPlacementGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskPlacementGroupDeleteOperation) Metadata() *compute.DeleteDiskPlacementGroupMetadata {
	return o.Operation.Metadata().(*compute.DeleteDiskPlacementGroupMetadata)
}

// Response retrieves the operation response.
func (o *DiskPlacementGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DiskPlacementGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskPlacementGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c diskPlacementGroupClient) Delete(ctx context.Context, in *compute.DeleteDiskPlacementGroupRequest, opts ...grpc.CallOption) (*DiskPlacementGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskPlacementGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*compute.DeleteDiskPlacementGroupMetadata).GetDiskPlacementGroupId()
		},
		MetadataType: (*compute.DeleteDiskPlacementGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskPlacementGroupDeleteOperation{*op}, nil
}

// ListDisks is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
func (c diskPlacementGroupClient) ListDisks(ctx context.Context, in *compute.ListDiskPlacementGroupDisksRequest, opts ...grpc.CallOption) (*compute.ListDiskPlacementGroupDisksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupListDisks, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskPlacementGroupServiceClient(connection).ListDisks(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
func (c diskPlacementGroupClient) ListOperations(ctx context.Context, in *compute.ListDiskPlacementGroupOperationsRequest, opts ...grpc.CallOption) (*compute.ListDiskPlacementGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskPlacementGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
func (c diskPlacementGroupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return compute.NewDiskPlacementGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// DiskPlacementGroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type DiskPlacementGroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskPlacementGroupSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *DiskPlacementGroupSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *DiskPlacementGroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskPlacementGroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c diskPlacementGroupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*DiskPlacementGroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskPlacementGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskPlacementGroupSetAccessBindingsOperation{*op}, nil
}

// DiskPlacementGroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type DiskPlacementGroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DiskPlacementGroupUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *DiskPlacementGroupUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *DiskPlacementGroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DiskPlacementGroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Compute DiskPlacementGroup service.
// It returns an object which should be used to monitor the operation state.
func (c diskPlacementGroupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*DiskPlacementGroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := compute.NewDiskPlacementGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DiskPlacementGroupUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c diskPlacementGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DiskPlacementGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DiskPlacementGroupGet                  = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.Get")
	DiskPlacementGroupList                 = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.List")
	DiskPlacementGroupCreate               = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.Create")
	DiskPlacementGroupUpdate               = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.Update")
	DiskPlacementGroupDelete               = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.Delete")
	DiskPlacementGroupListDisks            = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.ListDisks")
	DiskPlacementGroupListOperations       = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.ListOperations")
	DiskPlacementGroupListAccessBindings   = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.ListAccessBindings")
	DiskPlacementGroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.SetAccessBindings")
	DiskPlacementGroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.compute.v1.DiskPlacementGroupService.UpdateAccessBindings")
	DiskPlacementGroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
