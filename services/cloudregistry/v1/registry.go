// Code generated by sdkgen-v2. DO NOT EDIT.
package cloudregistrysdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RegistryClient provides methods for managing Registry resources of Yandex.Cloud Cloudregistry.
type RegistryClient interface {
	Get(context.Context, *cloudregistry.GetRegistryRequest, ...grpc.CallOption) (*cloudregistry.Registry, error)
	List(context.Context, *cloudregistry.ListRegistriesRequest, ...grpc.CallOption) (*cloudregistry.ListRegistriesResponse, error)
	Create(context.Context, *cloudregistry.CreateRegistryRequest, ...grpc.CallOption) (*RegistryCreateOperation, error)
	Update(context.Context, *cloudregistry.UpdateRegistryRequest, ...grpc.CallOption) (*RegistryUpdateOperation, error)
	Delete(context.Context, *cloudregistry.DeleteRegistryRequest, ...grpc.CallOption) (*RegistryDeleteOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*RegistrySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*RegistryUpdateAccessBindingsOperation, error)
	ListIpPermissions(context.Context, *cloudregistry.ListIpPermissionsRequest, ...grpc.CallOption) (*cloudregistry.ListIpPermissionsResponse, error)
	SetIpPermissions(context.Context, *cloudregistry.SetIpPermissionsRequest, ...grpc.CallOption) (*RegistrySetIpPermissionsOperation, error)
	UpdateIpPermissions(context.Context, *cloudregistry.UpdateIpPermissionsRequest, ...grpc.CallOption) (*RegistryUpdateIpPermissionsOperation, error)
	ListArtifacts(context.Context, *cloudregistry.ListArtifactsRequest, ...grpc.CallOption) (*cloudregistry.ListArtifactsResponse, error)
}

var _ RegistryClient = registryClient{}

type registryClient struct {
	connector transport.Connector
}

// NewRegistryClient returns RegistryClient implementation.
func NewRegistryClient(connector transport.Connector) RegistryClient {
	return registryClient{connector}
}

// Get is an operation of Yandex.Cloud Cloudregistry Registry service.
func (c registryClient) Get(ctx context.Context, in *cloudregistry.GetRegistryRequest, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryGet, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cloudregistry Registry service.
func (c registryClient) List(ctx context.Context, in *cloudregistry.ListRegistriesRequest, opts ...grpc.CallOption) (*cloudregistry.ListRegistriesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryList, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(connection).List(ctx, in, opts...)
}

// RegistryCreateOperation is used to monitor the state of Create operations.
type RegistryCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryCreateOperation) Metadata() *cloudregistry.CreateRegistryMetadata {
	return o.Operation.Metadata().(*cloudregistry.CreateRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryCreateOperation) Response() *cloudregistry.Registry {
	return o.Operation.Response().(*cloudregistry.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudregistry.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudregistry.Registry)
	return response, err
}

// Create is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Create(ctx context.Context, in *cloudregistry.CreateRegistryRequest, opts ...grpc.CallOption) (*RegistryCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.CreateRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*cloudregistry.CreateRegistryMetadata)(nil),
		ResponseType: (*cloudregistry.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryCreateOperation{*op}, nil
}

// RegistryUpdateOperation is used to monitor the state of Update operations.
type RegistryUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryUpdateOperation) Metadata() *cloudregistry.UpdateRegistryMetadata {
	return o.Operation.Metadata().(*cloudregistry.UpdateRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryUpdateOperation) Response() *cloudregistry.Registry {
	return o.Operation.Response().(*cloudregistry.Registry)
}

// Wait polls the operation until it's done.
func (o *RegistryUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudregistry.Registry)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudregistry.Registry, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudregistry.Registry)
	return response, err
}

// Update is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Update(ctx context.Context, in *cloudregistry.UpdateRegistryRequest, opts ...grpc.CallOption) (*RegistryUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.UpdateRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*cloudregistry.UpdateRegistryMetadata)(nil),
		ResponseType: (*cloudregistry.Registry)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryUpdateOperation{*op}, nil
}

// RegistryDeleteOperation is used to monitor the state of Delete operations.
type RegistryDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryDeleteOperation) Metadata() *cloudregistry.DeleteRegistryMetadata {
	return o.Operation.Metadata().(*cloudregistry.DeleteRegistryMetadata)
}

// Response retrieves the operation response.
func (o *RegistryDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) Delete(ctx context.Context, in *cloudregistry.DeleteRegistryRequest, opts ...grpc.CallOption) (*RegistryDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.DeleteRegistryMetadata).GetRegistryId()
		},
		MetadataType: (*cloudregistry.DeleteRegistryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryDeleteOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Cloudregistry Registry service.
func (c registryClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// RegistrySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type RegistrySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RegistrySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistrySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistrySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*RegistrySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistrySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistrySetAccessBindingsOperation{*op}, nil
}

// RegistryUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type RegistryUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RegistryUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*RegistryUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryUpdateAccessBindingsOperation{*op}, nil
}

// ListIpPermissions is an operation of Yandex.Cloud Cloudregistry Registry service.
func (c registryClient) ListIpPermissions(ctx context.Context, in *cloudregistry.ListIpPermissionsRequest, opts ...grpc.CallOption) (*cloudregistry.ListIpPermissionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListIpPermissions, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(connection).ListIpPermissions(ctx, in, opts...)
}

// RegistrySetIpPermissionsOperation is used to monitor the state of SetIpPermissions operations.
type RegistrySetIpPermissionsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistrySetIpPermissionsOperation) Metadata() *cloudregistry.SetIpPermissionsMetadata {
	return o.Operation.Metadata().(*cloudregistry.SetIpPermissionsMetadata)
}

// Response retrieves the operation response.
func (o *RegistrySetIpPermissionsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistrySetIpPermissionsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistrySetIpPermissionsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetIpPermissions is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) SetIpPermissions(ctx context.Context, in *cloudregistry.SetIpPermissionsRequest, opts ...grpc.CallOption) (*RegistrySetIpPermissionsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistrySetIpPermissions, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).SetIpPermissions(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.SetIpPermissionsMetadata).GetRegistryId()
		},
		MetadataType: (*cloudregistry.SetIpPermissionsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistrySetIpPermissionsOperation{*op}, nil
}

// RegistryUpdateIpPermissionsOperation is used to monitor the state of UpdateIpPermissions operations.
type RegistryUpdateIpPermissionsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegistryUpdateIpPermissionsOperation) Metadata() *cloudregistry.UpdateIpPermissionsMetadata {
	return o.Operation.Metadata().(*cloudregistry.UpdateIpPermissionsMetadata)
}

// Response retrieves the operation response.
func (o *RegistryUpdateIpPermissionsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegistryUpdateIpPermissionsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegistryUpdateIpPermissionsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateIpPermissions is an operation of Yandex.Cloud Cloudregistry Registry service.
// It returns an object which should be used to monitor the operation state.
func (c registryClient) UpdateIpPermissions(ctx context.Context, in *cloudregistry.UpdateIpPermissionsRequest, opts ...grpc.CallOption) (*RegistryUpdateIpPermissionsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryUpdateIpPermissions, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewRegistryServiceClient(connection).UpdateIpPermissions(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.UpdateIpPermissionsMetadata).GetRegistryId()
		},
		MetadataType: (*cloudregistry.UpdateIpPermissionsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegistryUpdateIpPermissionsOperation{*op}, nil
}

// ListArtifacts is an operation of Yandex.Cloud Cloudregistry Registry service.
func (c registryClient) ListArtifacts(ctx context.Context, in *cloudregistry.ListArtifactsRequest, opts ...grpc.CallOption) (*cloudregistry.ListArtifactsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryListArtifacts, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewRegistryServiceClient(connection).ListArtifacts(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c registryClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegistryOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RegistryGet                  = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.Get")
	RegistryList                 = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.List")
	RegistryCreate               = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.Create")
	RegistryUpdate               = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.Update")
	RegistryDelete               = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.Delete")
	RegistryListAccessBindings   = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.ListAccessBindings")
	RegistrySetAccessBindings    = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.SetAccessBindings")
	RegistryUpdateAccessBindings = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.UpdateAccessBindings")
	RegistryListIpPermissions    = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.ListIpPermissions")
	RegistrySetIpPermissions     = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.SetIpPermissions")
	RegistryUpdateIpPermissions  = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.UpdateIpPermissions")
	RegistryListArtifacts        = protoreflect.FullName("yandex.cloud.cloudregistry.v1.RegistryService.ListArtifacts")
	RegistryOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
