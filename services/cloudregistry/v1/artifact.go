// Code generated by sdkgen-v2. DO NOT EDIT.
package cloudregistrysdk

import (
	"context"

	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ArtifactClient provides methods for managing Artifact resources of Yandex.Cloud Cloudregistry.
type ArtifactClient interface {
	Get(context.Context, *cloudregistry.GetArtifactRequest, ...grpc.CallOption) (*cloudregistry.Artifact, error)
	Delete(context.Context, *cloudregistry.DeleteArtifactRequest, ...grpc.CallOption) (*ArtifactDeleteOperation, error)
}

var _ ArtifactClient = artifactClient{}

type artifactClient struct {
	connector transport.Connector
}

// NewArtifactClient returns ArtifactClient implementation.
func NewArtifactClient(connector transport.Connector) ArtifactClient {
	return artifactClient{connector}
}

// Get is an operation of Yandex.Cloud Cloudregistry Artifact service.
func (c artifactClient) Get(ctx context.Context, in *cloudregistry.GetArtifactRequest, opts ...grpc.CallOption) (*cloudregistry.Artifact, error) {
	connection, err := c.connector.GetConnection(ctx, ArtifactGet, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewArtifactServiceClient(connection).Get(ctx, in, opts...)
}

// ArtifactDeleteOperation is used to monitor the state of Delete operations.
type ArtifactDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ArtifactDeleteOperation) Metadata() *cloudregistry.DeleteArtifactMetadata {
	return o.Operation.Metadata().(*cloudregistry.DeleteArtifactMetadata)
}

// Response retrieves the operation response.
func (o *ArtifactDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ArtifactDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ArtifactDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cloudregistry Artifact service.
// It returns an object which should be used to monitor the operation state.
func (c artifactClient) Delete(ctx context.Context, in *cloudregistry.DeleteArtifactRequest, opts ...grpc.CallOption) (*ArtifactDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ArtifactDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewArtifactServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cloudregistry.DeleteArtifactMetadata).GetArtifactId()
		},
		MetadataType: (*cloudregistry.DeleteArtifactMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ArtifactDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c artifactClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ArtifactOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ArtifactGet             = protoreflect.FullName("yandex.cloud.cloudregistry.v1.ArtifactService.Get")
	ArtifactDelete          = protoreflect.FullName("yandex.cloud.cloudregistry.v1.ArtifactService.Delete")
	ArtifactOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
