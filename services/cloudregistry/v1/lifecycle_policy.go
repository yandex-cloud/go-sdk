// Code generated by sdkgen-v2. DO NOT EDIT.
package cloudregistrysdk

import (
	"context"

	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// LifecyclePolicyClient provides methods for managing LifecyclePolicy resources of Yandex.Cloud Cloudregistry.
type LifecyclePolicyClient interface {
	Create(context.Context, *cloudregistry.CreateLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyCreateOperation, error)
	Update(context.Context, *cloudregistry.UpdateLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyUpdateOperation, error)
	Delete(context.Context, *cloudregistry.DeleteLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyDeleteOperation, error)
	Get(context.Context, *cloudregistry.GetLifecyclePolicyRequest, ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error)
	List(context.Context, *cloudregistry.ListLifecyclePolicyRequest, ...grpc.CallOption) (*cloudregistry.ListLifecyclePolicyResponse, error)
	ChangeState(context.Context, *cloudregistry.ChangeLifecyclePolicyStateRequest, ...grpc.CallOption) (*emptypb.Empty, error)
}

var _ LifecyclePolicyClient = lifecyclePolicyClient{}

type lifecyclePolicyClient struct {
	connector transport.Connector
}

// NewLifecyclePolicyClient returns LifecyclePolicyClient implementation.
func NewLifecyclePolicyClient(connector transport.Connector) LifecyclePolicyClient {
	return lifecyclePolicyClient{connector}
}

// LifecyclePolicyCreateOperation is used to monitor the state of Create operations.
type LifecyclePolicyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyCreateOperation) Metadata() *cloudregistry.CreateLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*cloudregistry.CreateLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyCreateOperation) Response() *cloudregistry.LifecyclePolicy {
	return o.Operation.Response().(*cloudregistry.LifecyclePolicy)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudregistry.LifecyclePolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudregistry.LifecyclePolicy)
	return response, err
}

// Create is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Create(ctx context.Context, in *cloudregistry.CreateLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewLifecyclePolicyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cloudregistry.CreateLifecyclePolicyMetadata)(nil),
		ResponseType: (*cloudregistry.LifecyclePolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyCreateOperation{*op}, nil
}

// LifecyclePolicyUpdateOperation is used to monitor the state of Update operations.
type LifecyclePolicyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyUpdateOperation) Metadata() *cloudregistry.UpdateLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*cloudregistry.UpdateLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyUpdateOperation) Response() *cloudregistry.LifecyclePolicy {
	return o.Operation.Response().(*cloudregistry.LifecyclePolicy)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cloudregistry.LifecyclePolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cloudregistry.LifecyclePolicy)
	return response, err
}

// Update is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Update(ctx context.Context, in *cloudregistry.UpdateLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewLifecyclePolicyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cloudregistry.UpdateLifecyclePolicyMetadata)(nil),
		ResponseType: (*cloudregistry.LifecyclePolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyUpdateOperation{*op}, nil
}

// LifecyclePolicyDeleteOperation is used to monitor the state of Delete operations.
type LifecyclePolicyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyDeleteOperation) Metadata() *cloudregistry.DeleteLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*cloudregistry.DeleteLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Delete(ctx context.Context, in *cloudregistry.DeleteLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cloudregistry.NewLifecyclePolicyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cloudregistry.DeleteLifecyclePolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
func (c lifecyclePolicyClient) Get(ctx context.Context, in *cloudregistry.GetLifecyclePolicyRequest, opts ...grpc.CallOption) (*cloudregistry.LifecyclePolicy, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyGet, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewLifecyclePolicyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
func (c lifecyclePolicyClient) List(ctx context.Context, in *cloudregistry.ListLifecyclePolicyRequest, opts ...grpc.CallOption) (*cloudregistry.ListLifecyclePolicyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyList, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewLifecyclePolicyServiceClient(connection).List(ctx, in, opts...)
}

// ChangeState is an operation of Yandex.Cloud Cloudregistry LifecyclePolicy service.
func (c lifecyclePolicyClient) ChangeState(ctx context.Context, in *cloudregistry.ChangeLifecyclePolicyStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyChangeState, opts...)
	if err != nil {
		return nil, err
	}
	return cloudregistry.NewLifecyclePolicyServiceClient(connection).ChangeState(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c lifecyclePolicyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	LifecyclePolicyCreate          = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.Create")
	LifecyclePolicyUpdate          = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.Update")
	LifecyclePolicyDelete          = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.Delete")
	LifecyclePolicyGet             = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.Get")
	LifecyclePolicyList            = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.List")
	LifecyclePolicyChangeState     = protoreflect.FullName("yandex.cloud.cloudregistry.v1.LifecyclePolicyService.ChangeState")
	LifecyclePolicyOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
