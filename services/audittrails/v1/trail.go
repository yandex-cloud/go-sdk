// Code generated by sdkgen-v2. DO NOT EDIT.
package audittrailssdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	audittrails "github.com/yandex-cloud/go-genproto/yandex/cloud/audittrails/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TrailClient provides methods for managing Trail resources of Yandex.Cloud Audittrails.
type TrailClient interface {
	Get(context.Context, *audittrails.GetTrailRequest, ...grpc.CallOption) (*audittrails.Trail, error)
	List(context.Context, *audittrails.ListTrailsRequest, ...grpc.CallOption) (*audittrails.ListTrailsResponse, error)
	Create(context.Context, *audittrails.CreateTrailRequest, ...grpc.CallOption) (*TrailCreateOperation, error)
	Update(context.Context, *audittrails.UpdateTrailRequest, ...grpc.CallOption) (*TrailUpdateOperation, error)
	Delete(context.Context, *audittrails.DeleteTrailRequest, ...grpc.CallOption) (*TrailDeleteOperation, error)
	ListOperations(context.Context, *audittrails.ListTrailOperationsRequest, ...grpc.CallOption) (*audittrails.ListTrailOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*TrailSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*TrailUpdateAccessBindingsOperation, error)
}

var _ TrailClient = trailClient{}

type trailClient struct {
	connector transport.Connector
}

// NewTrailClient returns TrailClient implementation.
func NewTrailClient(connector transport.Connector) TrailClient {
	return trailClient{connector}
}

// Get is an operation of Yandex.Cloud Audittrails Trail service.
func (c trailClient) Get(ctx context.Context, in *audittrails.GetTrailRequest, opts ...grpc.CallOption) (*audittrails.Trail, error) {
	connection, err := c.connector.GetConnection(ctx, TrailGet, opts...)
	if err != nil {
		return nil, err
	}
	return audittrails.NewTrailServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Audittrails Trail service.
func (c trailClient) List(ctx context.Context, in *audittrails.ListTrailsRequest, opts ...grpc.CallOption) (*audittrails.ListTrailsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TrailList, opts...)
	if err != nil {
		return nil, err
	}
	return audittrails.NewTrailServiceClient(connection).List(ctx, in, opts...)
}

// TrailCreateOperation is used to monitor the state of Create operations.
type TrailCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrailCreateOperation) Metadata() *audittrails.CreateTrailMetadata {
	return o.Operation.Metadata().(*audittrails.CreateTrailMetadata)
}

// Response retrieves the operation response.
func (o *TrailCreateOperation) Response() *audittrails.Trail {
	return o.Operation.Response().(*audittrails.Trail)
}

// Wait polls the operation until it's done.
func (o *TrailCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*audittrails.Trail, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*audittrails.Trail)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrailCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*audittrails.Trail, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*audittrails.Trail)
	return response, err
}

// Create is an operation of Yandex.Cloud Audittrails Trail service.
// It returns an object which should be used to monitor the operation state.
func (c trailClient) Create(ctx context.Context, in *audittrails.CreateTrailRequest, opts ...grpc.CallOption) (*TrailCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := audittrails.NewTrailServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*audittrails.CreateTrailMetadata).GetTrailId()
		},
		MetadataType: (*audittrails.CreateTrailMetadata)(nil),
		ResponseType: (*audittrails.Trail)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrailCreateOperation{*op}, nil
}

// TrailUpdateOperation is used to monitor the state of Update operations.
type TrailUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrailUpdateOperation) Metadata() *audittrails.UpdateTrailMetadata {
	return o.Operation.Metadata().(*audittrails.UpdateTrailMetadata)
}

// Response retrieves the operation response.
func (o *TrailUpdateOperation) Response() *audittrails.Trail {
	return o.Operation.Response().(*audittrails.Trail)
}

// Wait polls the operation until it's done.
func (o *TrailUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*audittrails.Trail, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*audittrails.Trail)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrailUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*audittrails.Trail, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*audittrails.Trail)
	return response, err
}

// Update is an operation of Yandex.Cloud Audittrails Trail service.
// It returns an object which should be used to monitor the operation state.
func (c trailClient) Update(ctx context.Context, in *audittrails.UpdateTrailRequest, opts ...grpc.CallOption) (*TrailUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := audittrails.NewTrailServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*audittrails.UpdateTrailMetadata).GetTrailId()
		},
		MetadataType: (*audittrails.UpdateTrailMetadata)(nil),
		ResponseType: (*audittrails.Trail)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrailUpdateOperation{*op}, nil
}

// TrailDeleteOperation is used to monitor the state of Delete operations.
type TrailDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrailDeleteOperation) Metadata() *audittrails.DeleteTrailMetadata {
	return o.Operation.Metadata().(*audittrails.DeleteTrailMetadata)
}

// Response retrieves the operation response.
func (o *TrailDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TrailDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrailDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Audittrails Trail service.
// It returns an object which should be used to monitor the operation state.
func (c trailClient) Delete(ctx context.Context, in *audittrails.DeleteTrailRequest, opts ...grpc.CallOption) (*TrailDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := audittrails.NewTrailServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*audittrails.DeleteTrailMetadata).GetTrailId()
		},
		MetadataType: (*audittrails.DeleteTrailMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrailDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Audittrails Trail service.
func (c trailClient) ListOperations(ctx context.Context, in *audittrails.ListTrailOperationsRequest, opts ...grpc.CallOption) (*audittrails.ListTrailOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TrailListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return audittrails.NewTrailServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Audittrails Trail service.
func (c trailClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TrailListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return audittrails.NewTrailServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// TrailSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type TrailSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *TrailSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TrailSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrailSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Audittrails Trail service.
// It returns an object which should be used to monitor the operation state.
func (c trailClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*TrailSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := audittrails.NewTrailServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrailSetAccessBindingsOperation{*op}, nil
}

// TrailUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type TrailUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *TrailUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TrailUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrailUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Audittrails Trail service.
// It returns an object which should be used to monitor the operation state.
func (c trailClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*TrailUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := audittrails.NewTrailServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrailUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c trailClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrailOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TrailGet                  = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.Get")
	TrailList                 = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.List")
	TrailCreate               = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.Create")
	TrailUpdate               = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.Update")
	TrailDelete               = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.Delete")
	TrailListOperations       = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.ListOperations")
	TrailListAccessBindings   = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.ListAccessBindings")
	TrailSetAccessBindings    = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.SetAccessBindings")
	TrailUpdateAccessBindings = protoreflect.FullName("yandex.cloud.audittrails.v1.TrailService.UpdateAccessBindings")
	TrailOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
