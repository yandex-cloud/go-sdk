// Code generated by sdkgen-v2. DO NOT EDIT.
package smartcaptchasdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	smartcaptcha "github.com/yandex-cloud/go-genproto/yandex/cloud/smartcaptcha/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CaptchaClient provides methods for managing Captcha resources of Yandex.Cloud Smartcaptcha.
type CaptchaClient interface {
	Get(context.Context, *smartcaptcha.GetCaptchaRequest, ...grpc.CallOption) (*smartcaptcha.Captcha, error)
	GetSecretKey(context.Context, *smartcaptcha.GetCaptchaRequest, ...grpc.CallOption) (*smartcaptcha.CaptchaSecretKey, error)
	List(context.Context, *smartcaptcha.ListCaptchasRequest, ...grpc.CallOption) (*smartcaptcha.ListCaptchasResponse, error)
	Create(context.Context, *smartcaptcha.CreateCaptchaRequest, ...grpc.CallOption) (*CaptchaCreateOperation, error)
	Update(context.Context, *smartcaptcha.UpdateCaptchaRequest, ...grpc.CallOption) (*CaptchaUpdateOperation, error)
	Delete(context.Context, *smartcaptcha.DeleteCaptchaRequest, ...grpc.CallOption) (*CaptchaDeleteOperation, error)
}

var _ CaptchaClient = captchaClient{}

type captchaClient struct {
	connector transport.Connector
}

// NewCaptchaClient returns CaptchaClient implementation.
func NewCaptchaClient(connector transport.Connector) CaptchaClient {
	return captchaClient{connector}
}

// Get is an operation of Yandex.Cloud Smartcaptcha Captcha service.
func (c captchaClient) Get(ctx context.Context, in *smartcaptcha.GetCaptchaRequest, opts ...grpc.CallOption) (*smartcaptcha.Captcha, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaGet, opts...)
	if err != nil {
		return nil, err
	}
	return smartcaptcha.NewCaptchaServiceClient(connection).Get(ctx, in, opts...)
}

// GetSecretKey is an operation of Yandex.Cloud Smartcaptcha Captcha service.
func (c captchaClient) GetSecretKey(ctx context.Context, in *smartcaptcha.GetCaptchaRequest, opts ...grpc.CallOption) (*smartcaptcha.CaptchaSecretKey, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaGetSecretKey, opts...)
	if err != nil {
		return nil, err
	}
	return smartcaptcha.NewCaptchaServiceClient(connection).GetSecretKey(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Smartcaptcha Captcha service.
func (c captchaClient) List(ctx context.Context, in *smartcaptcha.ListCaptchasRequest, opts ...grpc.CallOption) (*smartcaptcha.ListCaptchasResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaList, opts...)
	if err != nil {
		return nil, err
	}
	return smartcaptcha.NewCaptchaServiceClient(connection).List(ctx, in, opts...)
}

// CaptchaCreateOperation is used to monitor the state of Create operations.
type CaptchaCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CaptchaCreateOperation) Metadata() *smartcaptcha.CreateCaptchaMetadata {
	return o.Operation.Metadata().(*smartcaptcha.CreateCaptchaMetadata)
}

// Response retrieves the operation response.
func (o *CaptchaCreateOperation) Response() *smartcaptcha.Captcha {
	return o.Operation.Response().(*smartcaptcha.Captcha)
}

// Wait polls the operation until it's done.
func (o *CaptchaCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*smartcaptcha.Captcha, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*smartcaptcha.Captcha)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CaptchaCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*smartcaptcha.Captcha, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*smartcaptcha.Captcha)
	return response, err
}

// Create is an operation of Yandex.Cloud Smartcaptcha Captcha service.
// It returns an object which should be used to monitor the operation state.
func (c captchaClient) Create(ctx context.Context, in *smartcaptcha.CreateCaptchaRequest, opts ...grpc.CallOption) (*CaptchaCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartcaptcha.NewCaptchaServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartcaptcha.CreateCaptchaMetadata).GetCaptchaId()
		},
		MetadataType: (*smartcaptcha.CreateCaptchaMetadata)(nil),
		ResponseType: (*smartcaptcha.Captcha)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CaptchaCreateOperation{*op}, nil
}

// CaptchaUpdateOperation is used to monitor the state of Update operations.
type CaptchaUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CaptchaUpdateOperation) Metadata() *smartcaptcha.UpdateCaptchaMetadata {
	return o.Operation.Metadata().(*smartcaptcha.UpdateCaptchaMetadata)
}

// Response retrieves the operation response.
func (o *CaptchaUpdateOperation) Response() *smartcaptcha.Captcha {
	return o.Operation.Response().(*smartcaptcha.Captcha)
}

// Wait polls the operation until it's done.
func (o *CaptchaUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*smartcaptcha.Captcha, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*smartcaptcha.Captcha)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CaptchaUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*smartcaptcha.Captcha, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*smartcaptcha.Captcha)
	return response, err
}

// Update is an operation of Yandex.Cloud Smartcaptcha Captcha service.
// It returns an object which should be used to monitor the operation state.
func (c captchaClient) Update(ctx context.Context, in *smartcaptcha.UpdateCaptchaRequest, opts ...grpc.CallOption) (*CaptchaUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartcaptcha.NewCaptchaServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartcaptcha.UpdateCaptchaMetadata).GetCaptchaId()
		},
		MetadataType: (*smartcaptcha.UpdateCaptchaMetadata)(nil),
		ResponseType: (*smartcaptcha.Captcha)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CaptchaUpdateOperation{*op}, nil
}

// CaptchaDeleteOperation is used to monitor the state of Delete operations.
type CaptchaDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CaptchaDeleteOperation) Metadata() *smartcaptcha.DeleteCaptchaMetadata {
	return o.Operation.Metadata().(*smartcaptcha.DeleteCaptchaMetadata)
}

// Response retrieves the operation response.
func (o *CaptchaDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CaptchaDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CaptchaDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Smartcaptcha Captcha service.
// It returns an object which should be used to monitor the operation state.
func (c captchaClient) Delete(ctx context.Context, in *smartcaptcha.DeleteCaptchaRequest, opts ...grpc.CallOption) (*CaptchaDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartcaptcha.NewCaptchaServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartcaptcha.DeleteCaptchaMetadata).GetCaptchaId()
		},
		MetadataType: (*smartcaptcha.DeleteCaptchaMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CaptchaDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c captchaClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CaptchaOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CaptchaGet             = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.Get")
	CaptchaGetSecretKey    = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.GetSecretKey")
	CaptchaList            = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.List")
	CaptchaCreate          = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.Create")
	CaptchaUpdate          = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.Update")
	CaptchaDelete          = protoreflect.FullName("yandex.cloud.smartcaptcha.v1.CaptchaService.Delete")
	CaptchaOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
