// Code generated by sdkgen-v2. DO NOT EDIT.
package quotamanagersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	quotamanager "github.com/yandex-cloud/go-genproto/yandex/cloud/quotamanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// QuotaRequestClient provides methods for managing QuotaRequest resources of Yandex.Cloud QuotaManager.
type QuotaRequestClient interface {
	Get(context.Context, *quotamanager.GetQuotaRequestRequest, ...grpc.CallOption) (*quotamanager.QuotaRequest, error)
	Create(context.Context, *quotamanager.CreateQuotaRequestRequest, ...grpc.CallOption) (*QuotaRequestCreateOperation, error)
	Cancel(context.Context, *quotamanager.CancelQuotaRequestRequest, ...grpc.CallOption) (*QuotaRequestCancelOperation, error)
	List(context.Context, *quotamanager.ListQuotaRequestRequest, ...grpc.CallOption) (*quotamanager.ListQuotaRequestResponse, error)
	ListOperations(context.Context, *quotamanager.ListQuotaRequestOperationsRequest, ...grpc.CallOption) (*quotamanager.ListQuotaRequestOperationsResponse, error)
}

var _ QuotaRequestClient = quotaRequestClient{}

type quotaRequestClient struct {
	connector transport.Connector
}

// NewQuotaRequestClient returns QuotaRequestClient implementation.
func NewQuotaRequestClient(connector transport.Connector) QuotaRequestClient {
	return quotaRequestClient{connector}
}

// Get is an operation of Yandex.Cloud QuotaManager QuotaRequest service.
func (c quotaRequestClient) Get(ctx context.Context, in *quotamanager.GetQuotaRequestRequest, opts ...grpc.CallOption) (*quotamanager.QuotaRequest, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestGet, opts...)
	if err != nil {
		return nil, err
	}
	return quotamanager.NewQuotaRequestServiceClient(connection).Get(ctx, in, opts...)
}

// QuotaRequestCreateOperation is used to monitor the state of Create operations.
type QuotaRequestCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *QuotaRequestCreateOperation) Metadata() *quotamanager.CreateQuotaRequestMetadata {
	return o.Operation.Metadata().(*quotamanager.CreateQuotaRequestMetadata)
}

// Response retrieves the operation response.
func (o *QuotaRequestCreateOperation) Response() *quotamanager.QuotaRequest {
	return o.Operation.Response().(*quotamanager.QuotaRequest)
}

// Wait polls the operation until it's done.
func (o *QuotaRequestCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*quotamanager.QuotaRequest, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*quotamanager.QuotaRequest)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *QuotaRequestCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*quotamanager.QuotaRequest, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*quotamanager.QuotaRequest)
	return response, err
}

// Create is an operation of Yandex.Cloud QuotaManager QuotaRequest service.
// It returns an object which should be used to monitor the operation state.
func (c quotaRequestClient) Create(ctx context.Context, in *quotamanager.CreateQuotaRequestRequest, opts ...grpc.CallOption) (*QuotaRequestCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := quotamanager.NewQuotaRequestServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*quotamanager.CreateQuotaRequestMetadata).GetQuotaRequestId()
		},
		MetadataType: (*quotamanager.CreateQuotaRequestMetadata)(nil),
		ResponseType: (*quotamanager.QuotaRequest)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &QuotaRequestCreateOperation{*op}, nil
}

// QuotaRequestCancelOperation is used to monitor the state of Cancel operations.
type QuotaRequestCancelOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *QuotaRequestCancelOperation) Metadata() *quotamanager.CancelQuotaRequestMetadata {
	return o.Operation.Metadata().(*quotamanager.CancelQuotaRequestMetadata)
}

// Response retrieves the operation response.
func (o *QuotaRequestCancelOperation) Response() *quotamanager.QuotaRequest {
	return o.Operation.Response().(*quotamanager.QuotaRequest)
}

// Wait polls the operation until it's done.
func (o *QuotaRequestCancelOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*quotamanager.QuotaRequest, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*quotamanager.QuotaRequest)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *QuotaRequestCancelOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*quotamanager.QuotaRequest, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*quotamanager.QuotaRequest)
	return response, err
}

// Cancel is an operation of Yandex.Cloud QuotaManager QuotaRequest service.
// It returns an object which should be used to monitor the operation state.
func (c quotaRequestClient) Cancel(ctx context.Context, in *quotamanager.CancelQuotaRequestRequest, opts ...grpc.CallOption) (*QuotaRequestCancelOperation, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestCancel, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := quotamanager.NewQuotaRequestServiceClient(connection).Cancel(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*quotamanager.CancelQuotaRequestMetadata).GetQuotaRequestId()
		},
		MetadataType: (*quotamanager.CancelQuotaRequestMetadata)(nil),
		ResponseType: (*quotamanager.QuotaRequest)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &QuotaRequestCancelOperation{*op}, nil
}

// List is an operation of Yandex.Cloud QuotaManager QuotaRequest service.
func (c quotaRequestClient) List(ctx context.Context, in *quotamanager.ListQuotaRequestRequest, opts ...grpc.CallOption) (*quotamanager.ListQuotaRequestResponse, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestList, opts...)
	if err != nil {
		return nil, err
	}
	return quotamanager.NewQuotaRequestServiceClient(connection).List(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud QuotaManager QuotaRequest service.
func (c quotaRequestClient) ListOperations(ctx context.Context, in *quotamanager.ListQuotaRequestOperationsRequest, opts ...grpc.CallOption) (*quotamanager.ListQuotaRequestOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return quotamanager.NewQuotaRequestServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c quotaRequestClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, QuotaRequestOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	QuotaRequestGet             = protoreflect.FullName("yandex.cloud.quotamanager.v1.QuotaRequestService.Get")
	QuotaRequestCreate          = protoreflect.FullName("yandex.cloud.quotamanager.v1.QuotaRequestService.Create")
	QuotaRequestCancel          = protoreflect.FullName("yandex.cloud.quotamanager.v1.QuotaRequestService.Cancel")
	QuotaRequestList            = protoreflect.FullName("yandex.cloud.quotamanager.v1.QuotaRequestService.List")
	QuotaRequestListOperations  = protoreflect.FullName("yandex.cloud.quotamanager.v1.QuotaRequestService.ListOperations")
	QuotaRequestOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
