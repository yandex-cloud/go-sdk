// Code generated by sdkgen-v2. DO NOT EDIT.
package marketplacesdk

import (
	"context"

	marketplace "github.com/yandex-cloud/go-genproto/yandex/cloud/k8s/marketplace/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// HelmReleaseClient provides methods for managing HelmRelease resources of Yandex.Cloud Marketplace.
type HelmReleaseClient interface {
	List(context.Context, *marketplace.ListHelmReleasesRequest, ...grpc.CallOption) (*marketplace.ListHelmReleasesResponse, error)
	Get(context.Context, *marketplace.GetHelmReleaseRequest, ...grpc.CallOption) (*marketplace.HelmRelease, error)
	Install(context.Context, *marketplace.InstallHelmReleaseRequest, ...grpc.CallOption) (*HelmReleaseInstallOperation, error)
	Update(context.Context, *marketplace.UpdateHelmReleaseRequest, ...grpc.CallOption) (*HelmReleaseUpdateOperation, error)
	Uninstall(context.Context, *marketplace.UninstallHelmReleaseRequest, ...grpc.CallOption) (*HelmReleaseUninstallOperation, error)
}

var _ HelmReleaseClient = helmReleaseClient{}

type helmReleaseClient struct {
	connector transport.Connector
}

// NewHelmReleaseClient returns HelmReleaseClient implementation.
func NewHelmReleaseClient(connector transport.Connector) HelmReleaseClient {
	return helmReleaseClient{connector}
}

// List is an operation of Yandex.Cloud Marketplace HelmRelease service.
func (c helmReleaseClient) List(ctx context.Context, in *marketplace.ListHelmReleasesRequest, opts ...grpc.CallOption) (*marketplace.ListHelmReleasesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseList, opts...)
	if err != nil {
		return nil, err
	}
	return marketplace.NewHelmReleaseServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Marketplace HelmRelease service.
func (c helmReleaseClient) Get(ctx context.Context, in *marketplace.GetHelmReleaseRequest, opts ...grpc.CallOption) (*marketplace.HelmRelease, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseGet, opts...)
	if err != nil {
		return nil, err
	}
	return marketplace.NewHelmReleaseServiceClient(connection).Get(ctx, in, opts...)
}

// HelmReleaseInstallOperation is used to monitor the state of Install operations.
type HelmReleaseInstallOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HelmReleaseInstallOperation) Metadata() *marketplace.InstallHelmReleaseMetadata {
	return o.Operation.Metadata().(*marketplace.InstallHelmReleaseMetadata)
}

// Response retrieves the operation response.
func (o *HelmReleaseInstallOperation) Response() *marketplace.HelmRelease {
	return o.Operation.Response().(*marketplace.HelmRelease)
}

// Wait polls the operation until it's done.
func (o *HelmReleaseInstallOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*marketplace.HelmRelease, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*marketplace.HelmRelease)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HelmReleaseInstallOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*marketplace.HelmRelease, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*marketplace.HelmRelease)
	return response, err
}

// Install is an operation of Yandex.Cloud Marketplace HelmRelease service.
// It returns an object which should be used to monitor the operation state.
func (c helmReleaseClient) Install(ctx context.Context, in *marketplace.InstallHelmReleaseRequest, opts ...grpc.CallOption) (*HelmReleaseInstallOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseInstall, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := marketplace.NewHelmReleaseServiceClient(connection).Install(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*marketplace.InstallHelmReleaseMetadata).GetHelmReleaseId()
		},
		MetadataType: (*marketplace.InstallHelmReleaseMetadata)(nil),
		ResponseType: (*marketplace.HelmRelease)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HelmReleaseInstallOperation{*op}, nil
}

// HelmReleaseUpdateOperation is used to monitor the state of Update operations.
type HelmReleaseUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HelmReleaseUpdateOperation) Metadata() *marketplace.UpdateHelmReleaseMetadata {
	return o.Operation.Metadata().(*marketplace.UpdateHelmReleaseMetadata)
}

// Response retrieves the operation response.
func (o *HelmReleaseUpdateOperation) Response() *marketplace.HelmRelease {
	return o.Operation.Response().(*marketplace.HelmRelease)
}

// Wait polls the operation until it's done.
func (o *HelmReleaseUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*marketplace.HelmRelease, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*marketplace.HelmRelease)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HelmReleaseUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*marketplace.HelmRelease, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*marketplace.HelmRelease)
	return response, err
}

// Update is an operation of Yandex.Cloud Marketplace HelmRelease service.
// It returns an object which should be used to monitor the operation state.
func (c helmReleaseClient) Update(ctx context.Context, in *marketplace.UpdateHelmReleaseRequest, opts ...grpc.CallOption) (*HelmReleaseUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := marketplace.NewHelmReleaseServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*marketplace.UpdateHelmReleaseMetadata).GetHelmReleaseId()
		},
		MetadataType: (*marketplace.UpdateHelmReleaseMetadata)(nil),
		ResponseType: (*marketplace.HelmRelease)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HelmReleaseUpdateOperation{*op}, nil
}

// HelmReleaseUninstallOperation is used to monitor the state of Uninstall operations.
type HelmReleaseUninstallOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HelmReleaseUninstallOperation) Metadata() *marketplace.UninstallHelmReleaseMetadata {
	return o.Operation.Metadata().(*marketplace.UninstallHelmReleaseMetadata)
}

// Response retrieves the operation response.
func (o *HelmReleaseUninstallOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HelmReleaseUninstallOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HelmReleaseUninstallOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Uninstall is an operation of Yandex.Cloud Marketplace HelmRelease service.
// It returns an object which should be used to monitor the operation state.
func (c helmReleaseClient) Uninstall(ctx context.Context, in *marketplace.UninstallHelmReleaseRequest, opts ...grpc.CallOption) (*HelmReleaseUninstallOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseUninstall, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := marketplace.NewHelmReleaseServiceClient(connection).Uninstall(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*marketplace.UninstallHelmReleaseMetadata).GetHelmReleaseId()
		},
		MetadataType: (*marketplace.UninstallHelmReleaseMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HelmReleaseUninstallOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c helmReleaseClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HelmReleaseOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	HelmReleaseList            = protoreflect.FullName("yandex.cloud.k8s.marketplace.v1.HelmReleaseService.List")
	HelmReleaseGet             = protoreflect.FullName("yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Get")
	HelmReleaseInstall         = protoreflect.FullName("yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Install")
	HelmReleaseUpdate          = protoreflect.FullName("yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Update")
	HelmReleaseUninstall       = protoreflect.FullName("yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Uninstall")
	HelmReleaseOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
