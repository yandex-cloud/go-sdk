// Code generated by sdkgen-v2. DO NOT EDIT.
package k8ssdk

import (
	"context"

	k8s "github.com/yandex-cloud/go-genproto/yandex/cloud/k8s/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// NodeGroupClient provides methods for managing NodeGroup resources of Yandex.Cloud K8s.
type NodeGroupClient interface {
	Get(context.Context, *k8s.GetNodeGroupRequest, ...grpc.CallOption) (*k8s.NodeGroup, error)
	List(context.Context, *k8s.ListNodeGroupsRequest, ...grpc.CallOption) (*k8s.ListNodeGroupsResponse, error)
	Create(context.Context, *k8s.CreateNodeGroupRequest, ...grpc.CallOption) (*NodeGroupCreateOperation, error)
	Update(context.Context, *k8s.UpdateNodeGroupRequest, ...grpc.CallOption) (*NodeGroupUpdateOperation, error)
	Delete(context.Context, *k8s.DeleteNodeGroupRequest, ...grpc.CallOption) (*NodeGroupDeleteOperation, error)
	ListOperations(context.Context, *k8s.ListNodeGroupOperationsRequest, ...grpc.CallOption) (*k8s.ListNodeGroupOperationsResponse, error)
	ListNodes(context.Context, *k8s.ListNodeGroupNodesRequest, ...grpc.CallOption) (*k8s.ListNodeGroupNodesResponse, error)
}

var _ NodeGroupClient = nodeGroupClient{}

type nodeGroupClient struct {
	connector transport.Connector
}

// NewNodeGroupClient returns NodeGroupClient implementation.
func NewNodeGroupClient(connector transport.Connector) NodeGroupClient {
	return nodeGroupClient{connector}
}

// Get is an operation of Yandex.Cloud K8s NodeGroup service.
func (c nodeGroupClient) Get(ctx context.Context, in *k8s.GetNodeGroupRequest, opts ...grpc.CallOption) (*k8s.NodeGroup, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return k8s.NewNodeGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud K8s NodeGroup service.
func (c nodeGroupClient) List(ctx context.Context, in *k8s.ListNodeGroupsRequest, opts ...grpc.CallOption) (*k8s.ListNodeGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return k8s.NewNodeGroupServiceClient(connection).List(ctx, in, opts...)
}

// NodeGroupCreateOperation is used to monitor the state of Create operations.
type NodeGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NodeGroupCreateOperation) Metadata() *k8s.CreateNodeGroupMetadata {
	return o.Operation.Metadata().(*k8s.CreateNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *NodeGroupCreateOperation) Response() *k8s.NodeGroup {
	return o.Operation.Response().(*k8s.NodeGroup)
}

// Wait polls the operation until it's done.
func (o *NodeGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*k8s.NodeGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*k8s.NodeGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NodeGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*k8s.NodeGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*k8s.NodeGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud K8s NodeGroup service.
// It returns an object which should be used to monitor the operation state.
func (c nodeGroupClient) Create(ctx context.Context, in *k8s.CreateNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := k8s.NewNodeGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*k8s.CreateNodeGroupMetadata).GetNodeGroupId()
		},
		MetadataType: (*k8s.CreateNodeGroupMetadata)(nil),
		ResponseType: (*k8s.NodeGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NodeGroupCreateOperation{*op}, nil
}

// NodeGroupUpdateOperation is used to monitor the state of Update operations.
type NodeGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NodeGroupUpdateOperation) Metadata() *k8s.UpdateNodeGroupMetadata {
	return o.Operation.Metadata().(*k8s.UpdateNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *NodeGroupUpdateOperation) Response() *k8s.NodeGroup {
	return o.Operation.Response().(*k8s.NodeGroup)
}

// Wait polls the operation until it's done.
func (o *NodeGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*k8s.NodeGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*k8s.NodeGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NodeGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*k8s.NodeGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*k8s.NodeGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud K8s NodeGroup service.
// It returns an object which should be used to monitor the operation state.
func (c nodeGroupClient) Update(ctx context.Context, in *k8s.UpdateNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := k8s.NewNodeGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*k8s.UpdateNodeGroupMetadata).GetNodeGroupId()
		},
		MetadataType: (*k8s.UpdateNodeGroupMetadata)(nil),
		ResponseType: (*k8s.NodeGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NodeGroupUpdateOperation{*op}, nil
}

// NodeGroupDeleteOperation is used to monitor the state of Delete operations.
type NodeGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NodeGroupDeleteOperation) Metadata() *k8s.DeleteNodeGroupMetadata {
	return o.Operation.Metadata().(*k8s.DeleteNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *NodeGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *NodeGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NodeGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud K8s NodeGroup service.
// It returns an object which should be used to monitor the operation state.
func (c nodeGroupClient) Delete(ctx context.Context, in *k8s.DeleteNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := k8s.NewNodeGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*k8s.DeleteNodeGroupMetadata).GetNodeGroupId()
		},
		MetadataType: (*k8s.DeleteNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NodeGroupDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud K8s NodeGroup service.
func (c nodeGroupClient) ListOperations(ctx context.Context, in *k8s.ListNodeGroupOperationsRequest, opts ...grpc.CallOption) (*k8s.ListNodeGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return k8s.NewNodeGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListNodes is an operation of Yandex.Cloud K8s NodeGroup service.
func (c nodeGroupClient) ListNodes(ctx context.Context, in *k8s.ListNodeGroupNodesRequest, opts ...grpc.CallOption) (*k8s.ListNodeGroupNodesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupListNodes, opts...)
	if err != nil {
		return nil, err
	}
	return k8s.NewNodeGroupServiceClient(connection).ListNodes(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c nodeGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NodeGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	NodeGroupGet             = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.Get")
	NodeGroupList            = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.List")
	NodeGroupCreate          = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.Create")
	NodeGroupUpdate          = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.Update")
	NodeGroupDelete          = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.Delete")
	NodeGroupListOperations  = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.ListOperations")
	NodeGroupListNodes       = protoreflect.FullName("yandex.cloud.k8s.v1.NodeGroupService.ListNodes")
	NodeGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
