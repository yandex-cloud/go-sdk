// Code generated by sdkgen-v2. DO NOT EDIT.
package dataprocsdk

import (
	"context"

	dataproc "github.com/yandex-cloud/go-genproto/yandex/cloud/dataproc/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SubclusterClient provides methods for managing Subcluster resources of Yandex.Cloud Dataproc.
type SubclusterClient interface {
	Get(context.Context, *dataproc.GetSubclusterRequest, ...grpc.CallOption) (*dataproc.Subcluster, error)
	List(context.Context, *dataproc.ListSubclustersRequest, ...grpc.CallOption) (*dataproc.ListSubclustersResponse, error)
	Create(context.Context, *dataproc.CreateSubclusterRequest, ...grpc.CallOption) (*SubclusterCreateOperation, error)
	Update(context.Context, *dataproc.UpdateSubclusterRequest, ...grpc.CallOption) (*SubclusterUpdateOperation, error)
	Delete(context.Context, *dataproc.DeleteSubclusterRequest, ...grpc.CallOption) (*SubclusterDeleteOperation, error)
}

var _ SubclusterClient = subclusterClient{}

type subclusterClient struct {
	connector transport.Connector
}

// NewSubclusterClient returns SubclusterClient implementation.
func NewSubclusterClient(connector transport.Connector) SubclusterClient {
	return subclusterClient{connector}
}

// Get is an operation of Yandex.Cloud Dataproc Subcluster service.
func (c subclusterClient) Get(ctx context.Context, in *dataproc.GetSubclusterRequest, opts ...grpc.CallOption) (*dataproc.Subcluster, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return dataproc.NewSubclusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Dataproc Subcluster service.
func (c subclusterClient) List(ctx context.Context, in *dataproc.ListSubclustersRequest, opts ...grpc.CallOption) (*dataproc.ListSubclustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterList, opts...)
	if err != nil {
		return nil, err
	}
	return dataproc.NewSubclusterServiceClient(connection).List(ctx, in, opts...)
}

// SubclusterCreateOperation is used to monitor the state of Create operations.
type SubclusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubclusterCreateOperation) Metadata() *dataproc.CreateSubclusterMetadata {
	return o.Operation.Metadata().(*dataproc.CreateSubclusterMetadata)
}

// Response retrieves the operation response.
func (o *SubclusterCreateOperation) Response() *dataproc.Subcluster {
	return o.Operation.Response().(*dataproc.Subcluster)
}

// Wait polls the operation until it's done.
func (o *SubclusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*dataproc.Subcluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*dataproc.Subcluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubclusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*dataproc.Subcluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*dataproc.Subcluster)
	return response, err
}

// Create is an operation of Yandex.Cloud Dataproc Subcluster service.
// It returns an object which should be used to monitor the operation state.
func (c subclusterClient) Create(ctx context.Context, in *dataproc.CreateSubclusterRequest, opts ...grpc.CallOption) (*SubclusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := dataproc.NewSubclusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*dataproc.CreateSubclusterMetadata).GetSubclusterId()
		},
		MetadataType: (*dataproc.CreateSubclusterMetadata)(nil),
		ResponseType: (*dataproc.Subcluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubclusterCreateOperation{*op}, nil
}

// SubclusterUpdateOperation is used to monitor the state of Update operations.
type SubclusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubclusterUpdateOperation) Metadata() *dataproc.UpdateSubclusterMetadata {
	return o.Operation.Metadata().(*dataproc.UpdateSubclusterMetadata)
}

// Response retrieves the operation response.
func (o *SubclusterUpdateOperation) Response() *dataproc.Subcluster {
	return o.Operation.Response().(*dataproc.Subcluster)
}

// Wait polls the operation until it's done.
func (o *SubclusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*dataproc.Subcluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*dataproc.Subcluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubclusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*dataproc.Subcluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*dataproc.Subcluster)
	return response, err
}

// Update is an operation of Yandex.Cloud Dataproc Subcluster service.
// It returns an object which should be used to monitor the operation state.
func (c subclusterClient) Update(ctx context.Context, in *dataproc.UpdateSubclusterRequest, opts ...grpc.CallOption) (*SubclusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := dataproc.NewSubclusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*dataproc.UpdateSubclusterMetadata).GetSubclusterId()
		},
		MetadataType: (*dataproc.UpdateSubclusterMetadata)(nil),
		ResponseType: (*dataproc.Subcluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubclusterUpdateOperation{*op}, nil
}

// SubclusterDeleteOperation is used to monitor the state of Delete operations.
type SubclusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubclusterDeleteOperation) Metadata() *dataproc.DeleteSubclusterMetadata {
	return o.Operation.Metadata().(*dataproc.DeleteSubclusterMetadata)
}

// Response retrieves the operation response.
func (o *SubclusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SubclusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubclusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Dataproc Subcluster service.
// It returns an object which should be used to monitor the operation state.
func (c subclusterClient) Delete(ctx context.Context, in *dataproc.DeleteSubclusterRequest, opts ...grpc.CallOption) (*SubclusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := dataproc.NewSubclusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*dataproc.DeleteSubclusterMetadata).GetSubclusterId()
		},
		MetadataType: (*dataproc.DeleteSubclusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubclusterDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c subclusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubclusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SubclusterGet             = protoreflect.FullName("yandex.cloud.dataproc.v1.SubclusterService.Get")
	SubclusterList            = protoreflect.FullName("yandex.cloud.dataproc.v1.SubclusterService.List")
	SubclusterCreate          = protoreflect.FullName("yandex.cloud.dataproc.v1.SubclusterService.Create")
	SubclusterUpdate          = protoreflect.FullName("yandex.cloud.dataproc.v1.SubclusterService.Update")
	SubclusterDelete          = protoreflect.FullName("yandex.cloud.dataproc.v1.SubclusterService.Delete")
	SubclusterOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
