// Code generated by sdkgen-v2. DO NOT EDIT.
package dataprocsdk

import (
	"context"

	dataproc "github.com/yandex-cloud/go-genproto/yandex/cloud/dataproc/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// JobClient provides methods for managing Job resources of Yandex.Cloud Dataproc.
type JobClient interface {
	List(context.Context, *dataproc.ListJobsRequest, ...grpc.CallOption) (*dataproc.ListJobsResponse, error)
	Create(context.Context, *dataproc.CreateJobRequest, ...grpc.CallOption) (*JobCreateOperation, error)
	Get(context.Context, *dataproc.GetJobRequest, ...grpc.CallOption) (*dataproc.Job, error)
	ListLog(context.Context, *dataproc.ListJobLogRequest, ...grpc.CallOption) (*dataproc.ListJobLogResponse, error)
	Cancel(context.Context, *dataproc.CancelJobRequest, ...grpc.CallOption) (*JobCancelOperation, error)
}

var _ JobClient = jobClient{}

type jobClient struct {
	connector transport.Connector
}

// NewJobClient returns JobClient implementation.
func NewJobClient(connector transport.Connector) JobClient {
	return jobClient{connector}
}

// List is an operation of Yandex.Cloud Dataproc Job service.
func (c jobClient) List(ctx context.Context, in *dataproc.ListJobsRequest, opts ...grpc.CallOption) (*dataproc.ListJobsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, JobList, opts...)
	if err != nil {
		return nil, err
	}
	return dataproc.NewJobServiceClient(connection).List(ctx, in, opts...)
}

// JobCreateOperation is used to monitor the state of Create operations.
type JobCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *JobCreateOperation) Metadata() *dataproc.CreateJobMetadata {
	return o.Operation.Metadata().(*dataproc.CreateJobMetadata)
}

// Response retrieves the operation response.
func (o *JobCreateOperation) Response() *dataproc.Job {
	return o.Operation.Response().(*dataproc.Job)
}

// Wait polls the operation until it's done.
func (o *JobCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*dataproc.Job, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*dataproc.Job)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *JobCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*dataproc.Job, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*dataproc.Job)
	return response, err
}

// Create is an operation of Yandex.Cloud Dataproc Job service.
// It returns an object which should be used to monitor the operation state.
func (c jobClient) Create(ctx context.Context, in *dataproc.CreateJobRequest, opts ...grpc.CallOption) (*JobCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, JobCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := dataproc.NewJobServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*dataproc.CreateJobMetadata).GetJobId()
		},
		MetadataType: (*dataproc.CreateJobMetadata)(nil),
		ResponseType: (*dataproc.Job)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &JobCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Dataproc Job service.
func (c jobClient) Get(ctx context.Context, in *dataproc.GetJobRequest, opts ...grpc.CallOption) (*dataproc.Job, error) {
	connection, err := c.connector.GetConnection(ctx, JobGet, opts...)
	if err != nil {
		return nil, err
	}
	return dataproc.NewJobServiceClient(connection).Get(ctx, in, opts...)
}

// ListLog is an operation of Yandex.Cloud Dataproc Job service.
func (c jobClient) ListLog(ctx context.Context, in *dataproc.ListJobLogRequest, opts ...grpc.CallOption) (*dataproc.ListJobLogResponse, error) {
	connection, err := c.connector.GetConnection(ctx, JobListLog, opts...)
	if err != nil {
		return nil, err
	}
	return dataproc.NewJobServiceClient(connection).ListLog(ctx, in, opts...)
}

// JobCancelOperation is used to monitor the state of Cancel operations.
type JobCancelOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *JobCancelOperation) Metadata() *dataproc.CreateJobMetadata {
	return o.Operation.Metadata().(*dataproc.CreateJobMetadata)
}

// Response retrieves the operation response.
func (o *JobCancelOperation) Response() *dataproc.Job {
	return o.Operation.Response().(*dataproc.Job)
}

// Wait polls the operation until it's done.
func (o *JobCancelOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*dataproc.Job, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*dataproc.Job)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *JobCancelOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*dataproc.Job, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*dataproc.Job)
	return response, err
}

// Cancel is an operation of Yandex.Cloud Dataproc Job service.
// It returns an object which should be used to monitor the operation state.
func (c jobClient) Cancel(ctx context.Context, in *dataproc.CancelJobRequest, opts ...grpc.CallOption) (*JobCancelOperation, error) {
	connection, err := c.connector.GetConnection(ctx, JobCancel, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := dataproc.NewJobServiceClient(connection).Cancel(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*dataproc.CreateJobMetadata).GetJobId()
		},
		MetadataType: (*dataproc.CreateJobMetadata)(nil),
		ResponseType: (*dataproc.Job)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &JobCancelOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c jobClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, JobOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	JobList            = protoreflect.FullName("yandex.cloud.dataproc.v1.JobService.List")
	JobCreate          = protoreflect.FullName("yandex.cloud.dataproc.v1.JobService.Create")
	JobGet             = protoreflect.FullName("yandex.cloud.dataproc.v1.JobService.Get")
	JobListLog         = protoreflect.FullName("yandex.cloud.dataproc.v1.JobService.ListLog")
	JobCancel          = protoreflect.FullName("yandex.cloud.dataproc.v1.JobService.Cancel")
	JobOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
