// Code generated by sdkgen-v2. DO NOT EDIT.
package backupsdk

import (
	"context"

	backup "github.com/yandex-cloud/go-genproto/yandex/cloud/backup/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BackupClient provides methods for managing Backup resources of Yandex.Cloud Backup.
type BackupClient interface {
	List(context.Context, *backup.ListBackupsRequest, ...grpc.CallOption) (*backup.ListBackupsResponse, error)
	ListArchives(context.Context, *backup.ListArchivesRequest, ...grpc.CallOption) (*backup.ListArchivesResponse, error)
	ListFiles(context.Context, *backup.ListFilesRequest, ...grpc.CallOption) (*backup.ListFilesResponse, error)
	Get(context.Context, *backup.GetBackupRequest, ...grpc.CallOption) (*backup.Backup, error)
	StartRecovery(context.Context, *backup.StartRecoveryRequest, ...grpc.CallOption) (*BackupStartRecoveryOperation, error)
	StartFilesRecovery(context.Context, *backup.StartFilesRecoveryRequest, ...grpc.CallOption) (*BackupStartFilesRecoveryOperation, error)
	Delete(context.Context, *backup.DeleteBackupRequest, ...grpc.CallOption) (*BackupDeleteOperation, error)
	DeleteArchive(context.Context, *backup.DeleteArchiveRequest, ...grpc.CallOption) (*BackupDeleteArchiveOperation, error)
}

var _ BackupClient = backupClient{}

type backupClient struct {
	connector transport.Connector
}

// NewBackupClient returns BackupClient implementation.
func NewBackupClient(connector transport.Connector) BackupClient {
	return backupClient{connector}
}

// List is an operation of Yandex.Cloud Backup Backup service.
func (c backupClient) List(ctx context.Context, in *backup.ListBackupsRequest, opts ...grpc.CallOption) (*backup.ListBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupList, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewBackupServiceClient(connection).List(ctx, in, opts...)
}

// ListArchives is an operation of Yandex.Cloud Backup Backup service.
func (c backupClient) ListArchives(ctx context.Context, in *backup.ListArchivesRequest, opts ...grpc.CallOption) (*backup.ListArchivesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupListArchives, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewBackupServiceClient(connection).ListArchives(ctx, in, opts...)
}

// ListFiles is an operation of Yandex.Cloud Backup Backup service.
func (c backupClient) ListFiles(ctx context.Context, in *backup.ListFilesRequest, opts ...grpc.CallOption) (*backup.ListFilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupListFiles, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewBackupServiceClient(connection).ListFiles(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Backup Backup service.
func (c backupClient) Get(ctx context.Context, in *backup.GetBackupRequest, opts ...grpc.CallOption) (*backup.Backup, error) {
	connection, err := c.connector.GetConnection(ctx, BackupGet, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewBackupServiceClient(connection).Get(ctx, in, opts...)
}

// BackupStartRecoveryOperation is used to monitor the state of StartRecovery operations.
type BackupStartRecoveryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupStartRecoveryOperation) Metadata() *backup.StartRecoveryMetadata {
	return o.Operation.Metadata().(*backup.StartRecoveryMetadata)
}

// Response retrieves the operation response.
func (o *BackupStartRecoveryOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupStartRecoveryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupStartRecoveryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// StartRecovery is an operation of Yandex.Cloud Backup Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) StartRecovery(ctx context.Context, in *backup.StartRecoveryRequest, opts ...grpc.CallOption) (*BackupStartRecoveryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupStartRecovery, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewBackupServiceClient(connection).StartRecovery(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*backup.StartRecoveryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupStartRecoveryOperation{*op}, nil
}

// BackupStartFilesRecoveryOperation is used to monitor the state of StartFilesRecovery operations.
type BackupStartFilesRecoveryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupStartFilesRecoveryOperation) Metadata() *backup.StartFilesRecoveryMetadata {
	return o.Operation.Metadata().(*backup.StartFilesRecoveryMetadata)
}

// Response retrieves the operation response.
func (o *BackupStartFilesRecoveryOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupStartFilesRecoveryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupStartFilesRecoveryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// StartFilesRecovery is an operation of Yandex.Cloud Backup Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) StartFilesRecovery(ctx context.Context, in *backup.StartFilesRecoveryRequest, opts ...grpc.CallOption) (*BackupStartFilesRecoveryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupStartFilesRecovery, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewBackupServiceClient(connection).StartFilesRecovery(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.StartFilesRecoveryMetadata).GetBackupId()
		},
		MetadataType: (*backup.StartFilesRecoveryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupStartFilesRecoveryOperation{*op}, nil
}

// BackupDeleteOperation is used to monitor the state of Delete operations.
type BackupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupDeleteOperation) Metadata() *backup.DeleteBackupMetadata {
	return o.Operation.Metadata().(*backup.DeleteBackupMetadata)
}

// Response retrieves the operation response.
func (o *BackupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Backup Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) Delete(ctx context.Context, in *backup.DeleteBackupRequest, opts ...grpc.CallOption) (*BackupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewBackupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.DeleteBackupMetadata).GetBackupId()
		},
		MetadataType: (*backup.DeleteBackupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupDeleteOperation{*op}, nil
}

// BackupDeleteArchiveOperation is used to monitor the state of DeleteArchive operations.
type BackupDeleteArchiveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupDeleteArchiveOperation) Metadata() *backup.DeleteArchiveMetadata {
	return o.Operation.Metadata().(*backup.DeleteArchiveMetadata)
}

// Response retrieves the operation response.
func (o *BackupDeleteArchiveOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupDeleteArchiveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupDeleteArchiveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteArchive is an operation of Yandex.Cloud Backup Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) DeleteArchive(ctx context.Context, in *backup.DeleteArchiveRequest, opts ...grpc.CallOption) (*BackupDeleteArchiveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupDeleteArchive, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewBackupServiceClient(connection).DeleteArchive(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*backup.DeleteArchiveMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupDeleteArchiveOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c backupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BackupList               = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.List")
	BackupListArchives       = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.ListArchives")
	BackupListFiles          = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.ListFiles")
	BackupGet                = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.Get")
	BackupStartRecovery      = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.StartRecovery")
	BackupStartFilesRecovery = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.StartFilesRecovery")
	BackupDelete             = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.Delete")
	BackupDeleteArchive      = protoreflect.FullName("yandex.cloud.backup.v1.BackupService.DeleteArchive")
	BackupOperationPoller    = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
