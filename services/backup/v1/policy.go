// Code generated by sdkgen-v2. DO NOT EDIT.
package backupsdk

import (
	"context"

	backup "github.com/yandex-cloud/go-genproto/yandex/cloud/backup/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PolicyClient provides methods for managing Policy resources of Yandex.Cloud Backup.
type PolicyClient interface {
	List(context.Context, *backup.ListPoliciesRequest, ...grpc.CallOption) (*backup.ListPoliciesResponse, error)
	Create(context.Context, *backup.CreatePolicyRequest, ...grpc.CallOption) (*PolicyCreateOperation, error)
	Get(context.Context, *backup.GetPolicyRequest, ...grpc.CallOption) (*backup.Policy, error)
	Update(context.Context, *backup.UpdatePolicyRequest, ...grpc.CallOption) (*PolicyUpdateOperation, error)
	Delete(context.Context, *backup.DeletePolicyRequest, ...grpc.CallOption) (*PolicyDeleteOperation, error)
	Apply(context.Context, *backup.ApplyPolicyRequest, ...grpc.CallOption) (*PolicyApplyOperation, error)
	ListApplications(context.Context, *backup.ListApplicationsRequest, ...grpc.CallOption) (*backup.ListApplicationsResponse, error)
	Execute(context.Context, *backup.ExecuteRequest, ...grpc.CallOption) (*PolicyExecuteOperation, error)
	Revoke(context.Context, *backup.RevokeRequest, ...grpc.CallOption) (*PolicyRevokeOperation, error)
}

var _ PolicyClient = policyClient{}

type policyClient struct {
	connector transport.Connector
}

// NewPolicyClient returns PolicyClient implementation.
func NewPolicyClient(connector transport.Connector) PolicyClient {
	return policyClient{connector}
}

// List is an operation of Yandex.Cloud Backup Policy service.
func (c policyClient) List(ctx context.Context, in *backup.ListPoliciesRequest, opts ...grpc.CallOption) (*backup.ListPoliciesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyList, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewPolicyServiceClient(connection).List(ctx, in, opts...)
}

// PolicyCreateOperation is used to monitor the state of Create operations.
type PolicyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyCreateOperation) Metadata() *backup.CreatePolicyMetadata {
	return o.Operation.Metadata().(*backup.CreatePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyCreateOperation) Response() *backup.Policy {
	return o.Operation.Response().(*backup.Policy)
}

// Wait polls the operation until it's done.
func (o *PolicyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*backup.Policy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*backup.Policy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*backup.Policy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*backup.Policy)
	return response, err
}

// Create is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Create(ctx context.Context, in *backup.CreatePolicyRequest, opts ...grpc.CallOption) (*PolicyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.CreatePolicyMetadata).GetPolicyId()
		},
		MetadataType: (*backup.CreatePolicyMetadata)(nil),
		ResponseType: (*backup.Policy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Backup Policy service.
func (c policyClient) Get(ctx context.Context, in *backup.GetPolicyRequest, opts ...grpc.CallOption) (*backup.Policy, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyGet, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewPolicyServiceClient(connection).Get(ctx, in, opts...)
}

// PolicyUpdateOperation is used to monitor the state of Update operations.
type PolicyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyUpdateOperation) Metadata() *backup.UpdatePolicyMetadata {
	return o.Operation.Metadata().(*backup.UpdatePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyUpdateOperation) Response() *backup.Policy {
	return o.Operation.Response().(*backup.Policy)
}

// Wait polls the operation until it's done.
func (o *PolicyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*backup.Policy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*backup.Policy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*backup.Policy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*backup.Policy)
	return response, err
}

// Update is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Update(ctx context.Context, in *backup.UpdatePolicyRequest, opts ...grpc.CallOption) (*PolicyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.UpdatePolicyMetadata).GetPolicyId()
		},
		MetadataType: (*backup.UpdatePolicyMetadata)(nil),
		ResponseType: (*backup.Policy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyUpdateOperation{*op}, nil
}

// PolicyDeleteOperation is used to monitor the state of Delete operations.
type PolicyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyDeleteOperation) Metadata() *backup.DeletePolicyMetadata {
	return o.Operation.Metadata().(*backup.DeletePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Delete(ctx context.Context, in *backup.DeletePolicyRequest, opts ...grpc.CallOption) (*PolicyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.DeletePolicyMetadata).GetPolicyId()
		},
		MetadataType: (*backup.DeletePolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyDeleteOperation{*op}, nil
}

// PolicyApplyOperation is used to monitor the state of Apply operations.
type PolicyApplyOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyApplyOperation) Metadata() *backup.ApplyPolicyMetadata {
	return o.Operation.Metadata().(*backup.ApplyPolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyApplyOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyApplyOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyApplyOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Apply is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Apply(ctx context.Context, in *backup.ApplyPolicyRequest, opts ...grpc.CallOption) (*PolicyApplyOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyApply, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Apply(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.ApplyPolicyMetadata).GetPolicyId()
		},
		MetadataType: (*backup.ApplyPolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyApplyOperation{*op}, nil
}

// ListApplications is an operation of Yandex.Cloud Backup Policy service.
func (c policyClient) ListApplications(ctx context.Context, in *backup.ListApplicationsRequest, opts ...grpc.CallOption) (*backup.ListApplicationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyListApplications, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewPolicyServiceClient(connection).ListApplications(ctx, in, opts...)
}

// PolicyExecuteOperation is used to monitor the state of Execute operations.
type PolicyExecuteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyExecuteOperation) Metadata() *backup.ExecuteMetadata {
	return o.Operation.Metadata().(*backup.ExecuteMetadata)
}

// Response retrieves the operation response.
func (o *PolicyExecuteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyExecuteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyExecuteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Execute is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Execute(ctx context.Context, in *backup.ExecuteRequest, opts ...grpc.CallOption) (*PolicyExecuteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyExecute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Execute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.ExecuteMetadata).GetPolicyId()
		},
		MetadataType: (*backup.ExecuteMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyExecuteOperation{*op}, nil
}

// PolicyRevokeOperation is used to monitor the state of Revoke operations.
type PolicyRevokeOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyRevokeOperation) Metadata() *backup.RevokeMetadata {
	return o.Operation.Metadata().(*backup.RevokeMetadata)
}

// Response retrieves the operation response.
func (o *PolicyRevokeOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyRevokeOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyRevokeOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Revoke is an operation of Yandex.Cloud Backup Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Revoke(ctx context.Context, in *backup.RevokeRequest, opts ...grpc.CallOption) (*PolicyRevokeOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyRevoke, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewPolicyServiceClient(connection).Revoke(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*backup.RevokeMetadata).GetPolicyId()
		},
		MetadataType: (*backup.RevokeMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyRevokeOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c policyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PolicyList             = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.List")
	PolicyCreate           = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Create")
	PolicyGet              = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Get")
	PolicyUpdate           = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Update")
	PolicyDelete           = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Delete")
	PolicyApply            = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Apply")
	PolicyListApplications = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.ListApplications")
	PolicyExecute          = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Execute")
	PolicyRevoke           = protoreflect.FullName("yandex.cloud.backup.v1.PolicyService.Revoke")
	PolicyOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
