// Code generated by sdkgen-v2. DO NOT EDIT.
package backupsdk

import (
	"context"

	backup "github.com/yandex-cloud/go-genproto/yandex/cloud/backup/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ResourceClient provides methods for managing Resource resources of Yandex.Cloud Backup.
type ResourceClient interface {
	List(context.Context, *backup.ListResourcesRequest, ...grpc.CallOption) (*backup.ListResourcesResponse, error)
	Get(context.Context, *backup.GetResourceRequest, ...grpc.CallOption) (*backup.GetResourceResponse, error)
	Delete(context.Context, *backup.DeleteResourceRequest, ...grpc.CallOption) (*ResourceDeleteOperation, error)
	ListTasks(context.Context, *backup.ListTasksRequest, ...grpc.CallOption) (*backup.ListTasksResponse, error)
	ListDirectory(context.Context, *backup.ListDirectoryRequest, ...grpc.CallOption) (*backup.ListDirectoryResponse, error)
	CreateDirectory(context.Context, *backup.CreateDirectoryRequest, ...grpc.CallOption) (*ResourceCreateDirectoryOperation, error)
	ListOperations(context.Context, *backup.ListResourceOperationsRequest, ...grpc.CallOption) (*backup.ListResourceOperationsResponse, error)
	GetInstanceRegistrationToken(context.Context, *backup.GetInstanceRegistrationTokenRequest, ...grpc.CallOption) (*backup.GetInstanceRegistrationTokenResponse, error)
}

var _ ResourceClient = resourceClient{}

type resourceClient struct {
	connector transport.Connector
}

// NewResourceClient returns ResourceClient implementation.
func NewResourceClient(connector transport.Connector) ResourceClient {
	return resourceClient{connector}
}

// List is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) List(ctx context.Context, in *backup.ListResourcesRequest, opts ...grpc.CallOption) (*backup.ListResourcesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceList, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) Get(ctx context.Context, in *backup.GetResourceRequest, opts ...grpc.CallOption) (*backup.GetResourceResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGet, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).Get(ctx, in, opts...)
}

// ResourceDeleteOperation is used to monitor the state of Delete operations.
type ResourceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceDeleteOperation) Metadata() *backup.DeleteResourceMetadata {
	return o.Operation.Metadata().(*backup.DeleteResourceMetadata)
}

// Response retrieves the operation response.
func (o *ResourceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ResourceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Backup Resource service.
// It returns an object which should be used to monitor the operation state.
func (c resourceClient) Delete(ctx context.Context, in *backup.DeleteResourceRequest, opts ...grpc.CallOption) (*ResourceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewResourceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*backup.DeleteResourceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceDeleteOperation{*op}, nil
}

// ListTasks is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) ListTasks(ctx context.Context, in *backup.ListTasksRequest, opts ...grpc.CallOption) (*backup.ListTasksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceListTasks, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).ListTasks(ctx, in, opts...)
}

// ListDirectory is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) ListDirectory(ctx context.Context, in *backup.ListDirectoryRequest, opts ...grpc.CallOption) (*backup.ListDirectoryResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceListDirectory, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).ListDirectory(ctx, in, opts...)
}

// ResourceCreateDirectoryOperation is used to monitor the state of CreateDirectory operations.
type ResourceCreateDirectoryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceCreateDirectoryOperation) Metadata() *backup.CreateDirectoryMetadata {
	return o.Operation.Metadata().(*backup.CreateDirectoryMetadata)
}

// Response retrieves the operation response.
func (o *ResourceCreateDirectoryOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ResourceCreateDirectoryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceCreateDirectoryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// CreateDirectory is an operation of Yandex.Cloud Backup Resource service.
// It returns an object which should be used to monitor the operation state.
func (c resourceClient) CreateDirectory(ctx context.Context, in *backup.CreateDirectoryRequest, opts ...grpc.CallOption) (*ResourceCreateDirectoryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceCreateDirectory, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := backup.NewResourceServiceClient(connection).CreateDirectory(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*backup.CreateDirectoryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceCreateDirectoryOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) ListOperations(ctx context.Context, in *backup.ListResourceOperationsRequest, opts ...grpc.CallOption) (*backup.ListResourceOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).ListOperations(ctx, in, opts...)
}

// GetInstanceRegistrationToken is an operation of Yandex.Cloud Backup Resource service.
func (c resourceClient) GetInstanceRegistrationToken(ctx context.Context, in *backup.GetInstanceRegistrationTokenRequest, opts ...grpc.CallOption) (*backup.GetInstanceRegistrationTokenResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGetInstanceRegistrationToken, opts...)
	if err != nil {
		return nil, err
	}
	return backup.NewResourceServiceClient(connection).GetInstanceRegistrationToken(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c resourceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ResourceList                         = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.List")
	ResourceGet                          = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.Get")
	ResourceDelete                       = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.Delete")
	ResourceListTasks                    = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.ListTasks")
	ResourceListDirectory                = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.ListDirectory")
	ResourceCreateDirectory              = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.CreateDirectory")
	ResourceListOperations               = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.ListOperations")
	ResourceGetInstanceRegistrationToken = protoreflect.FullName("yandex.cloud.backup.v1.ResourceService.GetInstanceRegistrationToken")
	ResourceOperationPoller              = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
