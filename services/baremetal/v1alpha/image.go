// Code generated by sdkgen-v2. DO NOT EDIT.
package baremetalsdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ImageClient provides methods for managing Image resources of Yandex.Cloud Baremetal.
type ImageClient interface {
	Get(context.Context, *baremetal.GetImageRequest, ...grpc.CallOption) (*baremetal.Image, error)
	List(context.Context, *baremetal.ListImagesRequest, ...grpc.CallOption) (*baremetal.ListImagesResponse, error)
	Create(context.Context, *baremetal.CreateImageRequest, ...grpc.CallOption) (*ImageCreateOperation, error)
	Update(context.Context, *baremetal.UpdateImageRequest, ...grpc.CallOption) (*ImageUpdateOperation, error)
	Delete(context.Context, *baremetal.DeleteImageRequest, ...grpc.CallOption) (*ImageDeleteOperation, error)
	ListOperations(context.Context, *baremetal.ListImageOperationsRequest, ...grpc.CallOption) (*baremetal.ListImageOperationsResponse, error)
}

var _ ImageClient = imageClient{}

type imageClient struct {
	connector transport.Connector
}

// NewImageClient returns ImageClient implementation.
func NewImageClient(connector transport.Connector) ImageClient {
	return imageClient{connector}
}

// Get is an operation of Yandex.Cloud Baremetal Image service.
func (c imageClient) Get(ctx context.Context, in *baremetal.GetImageRequest, opts ...grpc.CallOption) (*baremetal.Image, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewImageServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Baremetal Image service.
func (c imageClient) List(ctx context.Context, in *baremetal.ListImagesRequest, opts ...grpc.CallOption) (*baremetal.ListImagesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewImageServiceClient(connection).List(ctx, in, opts...)
}

// ImageCreateOperation is used to monitor the state of Create operations.
type ImageCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageCreateOperation) Metadata() *baremetal.CreateImageMetadata {
	return o.Operation.Metadata().(*baremetal.CreateImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageCreateOperation) Response() *baremetal.Image {
	return o.Operation.Response().(*baremetal.Image)
}

// Wait polls the operation until it's done.
func (o *ImageCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Image, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Image)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Image, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Image)
	return response, err
}

// Create is an operation of Yandex.Cloud Baremetal Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Create(ctx context.Context, in *baremetal.CreateImageRequest, opts ...grpc.CallOption) (*ImageCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewImageServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreateImageMetadata).GetImageId()
		},
		MetadataType: (*baremetal.CreateImageMetadata)(nil),
		ResponseType: (*baremetal.Image)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageCreateOperation{*op}, nil
}

// ImageUpdateOperation is used to monitor the state of Update operations.
type ImageUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageUpdateOperation) Metadata() *baremetal.UpdateImageMetadata {
	return o.Operation.Metadata().(*baremetal.UpdateImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageUpdateOperation) Response() *baremetal.Image {
	return o.Operation.Response().(*baremetal.Image)
}

// Wait polls the operation until it's done.
func (o *ImageUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Image, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Image)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Image, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Image)
	return response, err
}

// Update is an operation of Yandex.Cloud Baremetal Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Update(ctx context.Context, in *baremetal.UpdateImageRequest, opts ...grpc.CallOption) (*ImageUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewImageServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdateImageMetadata).GetImageId()
		},
		MetadataType: (*baremetal.UpdateImageMetadata)(nil),
		ResponseType: (*baremetal.Image)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageUpdateOperation{*op}, nil
}

// ImageDeleteOperation is used to monitor the state of Delete operations.
type ImageDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageDeleteOperation) Metadata() *baremetal.DeleteImageMetadata {
	return o.Operation.Metadata().(*baremetal.DeleteImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ImageDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Baremetal Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Delete(ctx context.Context, in *baremetal.DeleteImageRequest, opts ...grpc.CallOption) (*ImageDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewImageServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.DeleteImageMetadata).GetImageId()
		},
		MetadataType: (*baremetal.DeleteImageMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Baremetal Image service.
func (c imageClient) ListOperations(ctx context.Context, in *baremetal.ListImageOperationsRequest, opts ...grpc.CallOption) (*baremetal.ListImageOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewImageServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c imageClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ImageGet             = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.Get")
	ImageList            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.List")
	ImageCreate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.Create")
	ImageUpdate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.Update")
	ImageDelete          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.Delete")
	ImageListOperations  = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ImageService.ListOperations")
	ImageOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
