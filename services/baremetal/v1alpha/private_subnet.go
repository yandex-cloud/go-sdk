// Code generated by sdkgen-v2. DO NOT EDIT.
package baremetalsdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateSubnetClient provides methods for managing PrivateSubnet resources of Yandex.Cloud Baremetal.
type PrivateSubnetClient interface {
	Get(context.Context, *baremetal.GetPrivateSubnetRequest, ...grpc.CallOption) (*baremetal.PrivateSubnet, error)
	List(context.Context, *baremetal.ListPrivateSubnetRequest, ...grpc.CallOption) (*baremetal.ListPrivateSubnetResponse, error)
	Create(context.Context, *baremetal.CreatePrivateSubnetRequest, ...grpc.CallOption) (*PrivateSubnetCreateOperation, error)
	Update(context.Context, *baremetal.UpdatePrivateSubnetRequest, ...grpc.CallOption) (*PrivateSubnetUpdateOperation, error)
	Delete(context.Context, *baremetal.DeletePrivateSubnetRequest, ...grpc.CallOption) (*PrivateSubnetDeleteOperation, error)
	ListOperations(context.Context, *baremetal.ListPrivateSubnetOperationsRequest, ...grpc.CallOption) (*baremetal.ListPrivateSubnetOperationsResponse, error)
}

var _ PrivateSubnetClient = privateSubnetClient{}

type privateSubnetClient struct {
	connector transport.Connector
}

// NewPrivateSubnetClient returns PrivateSubnetClient implementation.
func NewPrivateSubnetClient(connector transport.Connector) PrivateSubnetClient {
	return privateSubnetClient{connector}
}

// Get is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
func (c privateSubnetClient) Get(ctx context.Context, in *baremetal.GetPrivateSubnetRequest, opts ...grpc.CallOption) (*baremetal.PrivateSubnet, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPrivateSubnetServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
func (c privateSubnetClient) List(ctx context.Context, in *baremetal.ListPrivateSubnetRequest, opts ...grpc.CallOption) (*baremetal.ListPrivateSubnetResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPrivateSubnetServiceClient(connection).List(ctx, in, opts...)
}

// PrivateSubnetCreateOperation is used to monitor the state of Create operations.
type PrivateSubnetCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateSubnetCreateOperation) Metadata() *baremetal.CreatePrivateSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.CreatePrivateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PrivateSubnetCreateOperation) Response() *baremetal.PrivateSubnet {
	return o.Operation.Response().(*baremetal.PrivateSubnet)
}

// Wait polls the operation until it's done.
func (o *PrivateSubnetCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PrivateSubnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PrivateSubnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateSubnetCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PrivateSubnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PrivateSubnet)
	return response, err
}

// Create is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c privateSubnetClient) Create(ctx context.Context, in *baremetal.CreatePrivateSubnetRequest, opts ...grpc.CallOption) (*PrivateSubnetCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateSubnetServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreatePrivateSubnetMetadata).GetPrivateSubnetId()
		},
		MetadataType: (*baremetal.CreatePrivateSubnetMetadata)(nil),
		ResponseType: (*baremetal.PrivateSubnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateSubnetCreateOperation{*op}, nil
}

// PrivateSubnetUpdateOperation is used to monitor the state of Update operations.
type PrivateSubnetUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateSubnetUpdateOperation) Metadata() *baremetal.UpdatePrivateSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.UpdatePrivateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PrivateSubnetUpdateOperation) Response() *baremetal.PrivateSubnet {
	return o.Operation.Response().(*baremetal.PrivateSubnet)
}

// Wait polls the operation until it's done.
func (o *PrivateSubnetUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PrivateSubnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PrivateSubnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateSubnetUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PrivateSubnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PrivateSubnet)
	return response, err
}

// Update is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c privateSubnetClient) Update(ctx context.Context, in *baremetal.UpdatePrivateSubnetRequest, opts ...grpc.CallOption) (*PrivateSubnetUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateSubnetServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdatePrivateSubnetMetadata).GetPrivateSubnetId()
		},
		MetadataType: (*baremetal.UpdatePrivateSubnetMetadata)(nil),
		ResponseType: (*baremetal.PrivateSubnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateSubnetUpdateOperation{*op}, nil
}

// PrivateSubnetDeleteOperation is used to monitor the state of Delete operations.
type PrivateSubnetDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateSubnetDeleteOperation) Metadata() *baremetal.DeletePrivateSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.DeletePrivateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PrivateSubnetDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateSubnetDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateSubnetDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c privateSubnetClient) Delete(ctx context.Context, in *baremetal.DeletePrivateSubnetRequest, opts ...grpc.CallOption) (*PrivateSubnetDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateSubnetServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.DeletePrivateSubnetMetadata).GetPrivateSubnetId()
		},
		MetadataType: (*baremetal.DeletePrivateSubnetMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateSubnetDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Baremetal PrivateSubnet service.
func (c privateSubnetClient) ListOperations(ctx context.Context, in *baremetal.ListPrivateSubnetOperationsRequest, opts ...grpc.CallOption) (*baremetal.ListPrivateSubnetOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPrivateSubnetServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c privateSubnetClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateSubnetOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateSubnetGet             = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.Get")
	PrivateSubnetList            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.List")
	PrivateSubnetCreate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.Create")
	PrivateSubnetUpdate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.Update")
	PrivateSubnetDelete          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.Delete")
	PrivateSubnetListOperations  = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateSubnetService.ListOperations")
	PrivateSubnetOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
