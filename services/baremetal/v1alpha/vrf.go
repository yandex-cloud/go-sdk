// Code generated by sdkgen-v2. DO NOT EDIT.
package v1alphasdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// VrfClient provides methods for managing Vrf resources of Yandex.Cloud V1alpha.
type VrfClient interface {
	Get(context.Context, *baremetal.GetVrfRequest, ...grpc.CallOption) (*baremetal.Vrf, error)
	List(context.Context, *baremetal.ListVrfRequest, ...grpc.CallOption) (*baremetal.ListVrfResponse, error)
	Create(context.Context, *baremetal.CreateVrfRequest, ...grpc.CallOption) (*VrfCreateOperation, error)
	Update(context.Context, *baremetal.UpdateVrfRequest, ...grpc.CallOption) (*VrfUpdateOperation, error)
	Delete(context.Context, *baremetal.DeleteVrfRequest, ...grpc.CallOption) (*VrfDeleteOperation, error)
	ListOperations(context.Context, *baremetal.ListVrfOperationsRequest, ...grpc.CallOption) (*baremetal.ListVrfOperationsResponse, error)
}

var _ VrfClient = vrfClient{}

type vrfClient struct {
	connector transport.Connector
}

// NewVrfClient returns VrfClient implementation.
func NewVrfClient(connector transport.Connector) VrfClient {
	return vrfClient{connector}
}

// Get is an operation of Yandex.Cloud V1alpha Vrf service.
func (c vrfClient) Get(ctx context.Context, in *baremetal.GetVrfRequest, opts ...grpc.CallOption) (*baremetal.Vrf, error) {
	connection, err := c.connector.GetConnection(ctx, VrfGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewVrfServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud V1alpha Vrf service.
func (c vrfClient) List(ctx context.Context, in *baremetal.ListVrfRequest, opts ...grpc.CallOption) (*baremetal.ListVrfResponse, error) {
	connection, err := c.connector.GetConnection(ctx, VrfList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewVrfServiceClient(connection).List(ctx, in, opts...)
}

// VrfCreateOperation is used to monitor the state of Create operations.
type VrfCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VrfCreateOperation) Metadata() *baremetal.CreateVrfMetadata {
	return o.Operation.Metadata().(*baremetal.CreateVrfMetadata)
}

// Response retrieves the operation response.
func (o *VrfCreateOperation) Response() *baremetal.Vrf {
	return o.Operation.Response().(*baremetal.Vrf)
}

// Wait polls the operation until it's done.
func (o *VrfCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Vrf, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Vrf)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VrfCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Vrf, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Vrf)
	return response, err
}

// Create is an operation of Yandex.Cloud V1alpha Vrf service.
// It returns an object which should be used to monitor the operation state.
func (c vrfClient) Create(ctx context.Context, in *baremetal.CreateVrfRequest, opts ...grpc.CallOption) (*VrfCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VrfCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewVrfServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreateVrfMetadata).GetVrfId()
		},
		MetadataType: (*baremetal.CreateVrfMetadata)(nil),
		ResponseType: (*baremetal.Vrf)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VrfCreateOperation{*op}, nil
}

// VrfUpdateOperation is used to monitor the state of Update operations.
type VrfUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VrfUpdateOperation) Metadata() *baremetal.UpdateVrfMetadata {
	return o.Operation.Metadata().(*baremetal.UpdateVrfMetadata)
}

// Response retrieves the operation response.
func (o *VrfUpdateOperation) Response() *baremetal.Vrf {
	return o.Operation.Response().(*baremetal.Vrf)
}

// Wait polls the operation until it's done.
func (o *VrfUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Vrf, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Vrf)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VrfUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Vrf, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Vrf)
	return response, err
}

// Update is an operation of Yandex.Cloud V1alpha Vrf service.
// It returns an object which should be used to monitor the operation state.
func (c vrfClient) Update(ctx context.Context, in *baremetal.UpdateVrfRequest, opts ...grpc.CallOption) (*VrfUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VrfUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewVrfServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdateVrfMetadata).GetVrfId()
		},
		MetadataType: (*baremetal.UpdateVrfMetadata)(nil),
		ResponseType: (*baremetal.Vrf)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VrfUpdateOperation{*op}, nil
}

// VrfDeleteOperation is used to monitor the state of Delete operations.
type VrfDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *VrfDeleteOperation) Metadata() *baremetal.DeleteVrfMetadata {
	return o.Operation.Metadata().(*baremetal.DeleteVrfMetadata)
}

// Response retrieves the operation response.
func (o *VrfDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *VrfDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *VrfDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud V1alpha Vrf service.
// It returns an object which should be used to monitor the operation state.
func (c vrfClient) Delete(ctx context.Context, in *baremetal.DeleteVrfRequest, opts ...grpc.CallOption) (*VrfDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VrfDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewVrfServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.DeleteVrfMetadata).GetVrfId()
		},
		MetadataType: (*baremetal.DeleteVrfMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &VrfDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud V1alpha Vrf service.
func (c vrfClient) ListOperations(ctx context.Context, in *baremetal.ListVrfOperationsRequest, opts ...grpc.CallOption) (*baremetal.ListVrfOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, VrfListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewVrfServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c vrfClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, VrfOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	VrfGet             = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.Get")
	VrfList            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.List")
	VrfCreate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.Create")
	VrfUpdate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.Update")
	VrfDelete          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.Delete")
	VrfListOperations  = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.VrfService.ListOperations")
	VrfOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
