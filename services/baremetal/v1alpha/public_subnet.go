// Code generated by sdkgen-v2. DO NOT EDIT.
package v1alphasdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PublicSubnetClient provides methods for managing PublicSubnet resources of Yandex.Cloud V1alpha.
type PublicSubnetClient interface {
	Get(context.Context, *baremetal.GetPublicSubnetRequest, ...grpc.CallOption) (*baremetal.PublicSubnet, error)
	List(context.Context, *baremetal.ListPublicSubnetRequest, ...grpc.CallOption) (*baremetal.ListPublicSubnetResponse, error)
	Create(context.Context, *baremetal.CreatePublicSubnetRequest, ...grpc.CallOption) (*PublicSubnetCreateOperation, error)
	Update(context.Context, *baremetal.UpdatePublicSubnetRequest, ...grpc.CallOption) (*PublicSubnetUpdateOperation, error)
	Delete(context.Context, *baremetal.DeletePublicSubnetRequest, ...grpc.CallOption) (*PublicSubnetDeleteOperation, error)
	ListOperations(context.Context, *baremetal.ListPublicSubnetOperationsRequest, ...grpc.CallOption) (*baremetal.ListPublicSubnetOperationsResponse, error)
}

var _ PublicSubnetClient = publicSubnetClient{}

type publicSubnetClient struct {
	connector transport.Connector
}

// NewPublicSubnetClient returns PublicSubnetClient implementation.
func NewPublicSubnetClient(connector transport.Connector) PublicSubnetClient {
	return publicSubnetClient{connector}
}

// Get is an operation of Yandex.Cloud V1alpha PublicSubnet service.
func (c publicSubnetClient) Get(ctx context.Context, in *baremetal.GetPublicSubnetRequest, opts ...grpc.CallOption) (*baremetal.PublicSubnet, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPublicSubnetServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud V1alpha PublicSubnet service.
func (c publicSubnetClient) List(ctx context.Context, in *baremetal.ListPublicSubnetRequest, opts ...grpc.CallOption) (*baremetal.ListPublicSubnetResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPublicSubnetServiceClient(connection).List(ctx, in, opts...)
}

// PublicSubnetCreateOperation is used to monitor the state of Create operations.
type PublicSubnetCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PublicSubnetCreateOperation) Metadata() *baremetal.CreatePublicSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.CreatePublicSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PublicSubnetCreateOperation) Response() *baremetal.PublicSubnet {
	return o.Operation.Response().(*baremetal.PublicSubnet)
}

// Wait polls the operation until it's done.
func (o *PublicSubnetCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PublicSubnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PublicSubnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PublicSubnetCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PublicSubnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PublicSubnet)
	return response, err
}

// Create is an operation of Yandex.Cloud V1alpha PublicSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c publicSubnetClient) Create(ctx context.Context, in *baremetal.CreatePublicSubnetRequest, opts ...grpc.CallOption) (*PublicSubnetCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPublicSubnetServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreatePublicSubnetMetadata).GetPublicSubnetId()
		},
		MetadataType: (*baremetal.CreatePublicSubnetMetadata)(nil),
		ResponseType: (*baremetal.PublicSubnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PublicSubnetCreateOperation{*op}, nil
}

// PublicSubnetUpdateOperation is used to monitor the state of Update operations.
type PublicSubnetUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PublicSubnetUpdateOperation) Metadata() *baremetal.UpdatePublicSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.UpdatePublicSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PublicSubnetUpdateOperation) Response() *baremetal.PublicSubnet {
	return o.Operation.Response().(*baremetal.PublicSubnet)
}

// Wait polls the operation until it's done.
func (o *PublicSubnetUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PublicSubnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PublicSubnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PublicSubnetUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PublicSubnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PublicSubnet)
	return response, err
}

// Update is an operation of Yandex.Cloud V1alpha PublicSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c publicSubnetClient) Update(ctx context.Context, in *baremetal.UpdatePublicSubnetRequest, opts ...grpc.CallOption) (*PublicSubnetUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPublicSubnetServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdatePublicSubnetMetadata).GetPublicSubnetId()
		},
		MetadataType: (*baremetal.UpdatePublicSubnetMetadata)(nil),
		ResponseType: (*baremetal.PublicSubnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PublicSubnetUpdateOperation{*op}, nil
}

// PublicSubnetDeleteOperation is used to monitor the state of Delete operations.
type PublicSubnetDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PublicSubnetDeleteOperation) Metadata() *baremetal.DeletePublicSubnetMetadata {
	return o.Operation.Metadata().(*baremetal.DeletePublicSubnetMetadata)
}

// Response retrieves the operation response.
func (o *PublicSubnetDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PublicSubnetDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PublicSubnetDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud V1alpha PublicSubnet service.
// It returns an object which should be used to monitor the operation state.
func (c publicSubnetClient) Delete(ctx context.Context, in *baremetal.DeletePublicSubnetRequest, opts ...grpc.CallOption) (*PublicSubnetDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPublicSubnetServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.DeletePublicSubnetMetadata).GetPublicSubnetId()
		},
		MetadataType: (*baremetal.DeletePublicSubnetMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PublicSubnetDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud V1alpha PublicSubnet service.
func (c publicSubnetClient) ListOperations(ctx context.Context, in *baremetal.ListPublicSubnetOperationsRequest, opts ...grpc.CallOption) (*baremetal.ListPublicSubnetOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPublicSubnetServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c publicSubnetClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PublicSubnetOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PublicSubnetGet             = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.Get")
	PublicSubnetList            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.List")
	PublicSubnetCreate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.Create")
	PublicSubnetUpdate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.Update")
	PublicSubnetDelete          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.Delete")
	PublicSubnetListOperations  = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PublicSubnetService.ListOperations")
	PublicSubnetOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
