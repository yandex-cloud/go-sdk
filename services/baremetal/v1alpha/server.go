// Code generated by sdkgen-v2. DO NOT EDIT.
package v1alphasdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ServerClient provides methods for managing Server resources of Yandex.Cloud V1alpha.
type ServerClient interface {
	Get(context.Context, *baremetal.GetServerRequest, ...grpc.CallOption) (*baremetal.Server, error)
	List(context.Context, *baremetal.ListServerRequest, ...grpc.CallOption) (*baremetal.ListServerResponse, error)
	Create(context.Context, *baremetal.CreateServerRequest, ...grpc.CallOption) (*ServerCreateOperation, error)
	BatchCreate(context.Context, *baremetal.BatchCreateServersRequest, ...grpc.CallOption) (*ServerBatchCreateOperation, error)
	Update(context.Context, *baremetal.UpdateServerRequest, ...grpc.CallOption) (*ServerUpdateOperation, error)
	PowerOff(context.Context, *baremetal.PowerOffServerRequest, ...grpc.CallOption) (*ServerPowerOffOperation, error)
	PowerOn(context.Context, *baremetal.PowerOnServerRequest, ...grpc.CallOption) (*ServerPowerOnOperation, error)
	Reboot(context.Context, *baremetal.RebootServerRequest, ...grpc.CallOption) (*ServerRebootOperation, error)
	Reinstall(context.Context, *baremetal.ReinstallServerRequest, ...grpc.CallOption) (*ServerReinstallOperation, error)
	StartProlongation(context.Context, *baremetal.StartProlongationRequest, ...grpc.CallOption) (*ServerStartProlongationOperation, error)
	StopProlongation(context.Context, *baremetal.StopProlongationRequest, ...grpc.CallOption) (*ServerStopProlongationOperation, error)
	ListOperations(context.Context, *baremetal.ListServerOperationsRequest, ...grpc.CallOption) (*baremetal.ListServerOperationsResponse, error)
}

var _ ServerClient = serverClient{}

type serverClient struct {
	connector transport.Connector
}

// NewServerClient returns ServerClient implementation.
func NewServerClient(connector transport.Connector) ServerClient {
	return serverClient{connector}
}

// Get is an operation of Yandex.Cloud V1alpha Server service.
func (c serverClient) Get(ctx context.Context, in *baremetal.GetServerRequest, opts ...grpc.CallOption) (*baremetal.Server, error) {
	connection, err := c.connector.GetConnection(ctx, ServerGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewServerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud V1alpha Server service.
func (c serverClient) List(ctx context.Context, in *baremetal.ListServerRequest, opts ...grpc.CallOption) (*baremetal.ListServerResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ServerList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewServerServiceClient(connection).List(ctx, in, opts...)
}

// ServerCreateOperation is used to monitor the state of Create operations.
type ServerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerCreateOperation) Metadata() *baremetal.CreateServerMetadata {
	return o.Operation.Metadata().(*baremetal.CreateServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerCreateOperation) Response() *baremetal.Server {
	return o.Operation.Response().(*baremetal.Server)
}

// Wait polls the operation until it's done.
func (o *ServerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// Create is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) Create(ctx context.Context, in *baremetal.CreateServerRequest, opts ...grpc.CallOption) (*ServerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreateServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.CreateServerMetadata)(nil),
		ResponseType: (*baremetal.Server)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerCreateOperation{*op}, nil
}

// ServerBatchCreateOperation is used to monitor the state of BatchCreate operations.
type ServerBatchCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerBatchCreateOperation) Metadata() *baremetal.BatchCreateServersMetadata {
	return o.Operation.Metadata().(*baremetal.BatchCreateServersMetadata)
}

// Response retrieves the operation response.
func (o *ServerBatchCreateOperation) Response() *baremetal.BatchCreateServersResponse {
	return o.Operation.Response().(*baremetal.BatchCreateServersResponse)
}

// Wait polls the operation until it's done.
func (o *ServerBatchCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.BatchCreateServersResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.BatchCreateServersResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerBatchCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.BatchCreateServersResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.BatchCreateServersResponse)
	return response, err
}

// BatchCreate is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) BatchCreate(ctx context.Context, in *baremetal.BatchCreateServersRequest, opts ...grpc.CallOption) (*ServerBatchCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerBatchCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).BatchCreate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*baremetal.BatchCreateServersMetadata)(nil),
		ResponseType: (*baremetal.BatchCreateServersResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerBatchCreateOperation{*op}, nil
}

// ServerUpdateOperation is used to monitor the state of Update operations.
type ServerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerUpdateOperation) Metadata() *baremetal.UpdateServerMetadata {
	return o.Operation.Metadata().(*baremetal.UpdateServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerUpdateOperation) Response() *baremetal.Server {
	return o.Operation.Response().(*baremetal.Server)
}

// Wait polls the operation until it's done.
func (o *ServerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// Update is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) Update(ctx context.Context, in *baremetal.UpdateServerRequest, opts ...grpc.CallOption) (*ServerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdateServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.UpdateServerMetadata)(nil),
		ResponseType: (*baremetal.Server)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerUpdateOperation{*op}, nil
}

// ServerPowerOffOperation is used to monitor the state of PowerOff operations.
type ServerPowerOffOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerPowerOffOperation) Metadata() *baremetal.PowerOffServerMetadata {
	return o.Operation.Metadata().(*baremetal.PowerOffServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerPowerOffOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ServerPowerOffOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerPowerOffOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// PowerOff is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) PowerOff(ctx context.Context, in *baremetal.PowerOffServerRequest, opts ...grpc.CallOption) (*ServerPowerOffOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerPowerOff, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).PowerOff(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.PowerOffServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.PowerOffServerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerPowerOffOperation{*op}, nil
}

// ServerPowerOnOperation is used to monitor the state of PowerOn operations.
type ServerPowerOnOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerPowerOnOperation) Metadata() *baremetal.PowerOnServerMetadata {
	return o.Operation.Metadata().(*baremetal.PowerOnServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerPowerOnOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ServerPowerOnOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerPowerOnOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// PowerOn is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) PowerOn(ctx context.Context, in *baremetal.PowerOnServerRequest, opts ...grpc.CallOption) (*ServerPowerOnOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerPowerOn, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).PowerOn(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.PowerOnServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.PowerOnServerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerPowerOnOperation{*op}, nil
}

// ServerRebootOperation is used to monitor the state of Reboot operations.
type ServerRebootOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerRebootOperation) Metadata() *baremetal.RebootServerMetadata {
	return o.Operation.Metadata().(*baremetal.RebootServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerRebootOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ServerRebootOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerRebootOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Reboot is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) Reboot(ctx context.Context, in *baremetal.RebootServerRequest, opts ...grpc.CallOption) (*ServerRebootOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerReboot, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).Reboot(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.RebootServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.RebootServerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerRebootOperation{*op}, nil
}

// ServerReinstallOperation is used to monitor the state of Reinstall operations.
type ServerReinstallOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerReinstallOperation) Metadata() *baremetal.ReinstallServerMetadata {
	return o.Operation.Metadata().(*baremetal.ReinstallServerMetadata)
}

// Response retrieves the operation response.
func (o *ServerReinstallOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ServerReinstallOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerReinstallOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Reinstall is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) Reinstall(ctx context.Context, in *baremetal.ReinstallServerRequest, opts ...grpc.CallOption) (*ServerReinstallOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerReinstall, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).Reinstall(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.ReinstallServerMetadata).GetServerId()
		},
		MetadataType: (*baremetal.ReinstallServerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerReinstallOperation{*op}, nil
}

// ServerStartProlongationOperation is used to monitor the state of StartProlongation operations.
type ServerStartProlongationOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerStartProlongationOperation) Metadata() *baremetal.ServerSetProlongationMetadata {
	return o.Operation.Metadata().(*baremetal.ServerSetProlongationMetadata)
}

// Response retrieves the operation response.
func (o *ServerStartProlongationOperation) Response() *baremetal.Server {
	return o.Operation.Response().(*baremetal.Server)
}

// Wait polls the operation until it's done.
func (o *ServerStartProlongationOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerStartProlongationOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// StartProlongation is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) StartProlongation(ctx context.Context, in *baremetal.StartProlongationRequest, opts ...grpc.CallOption) (*ServerStartProlongationOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerStartProlongation, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).StartProlongation(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.ServerSetProlongationMetadata).GetServerId()
		},
		MetadataType: (*baremetal.ServerSetProlongationMetadata)(nil),
		ResponseType: (*baremetal.Server)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerStartProlongationOperation{*op}, nil
}

// ServerStopProlongationOperation is used to monitor the state of StopProlongation operations.
type ServerStopProlongationOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ServerStopProlongationOperation) Metadata() *baremetal.ServerSetProlongationMetadata {
	return o.Operation.Metadata().(*baremetal.ServerSetProlongationMetadata)
}

// Response retrieves the operation response.
func (o *ServerStopProlongationOperation) Response() *baremetal.Server {
	return o.Operation.Response().(*baremetal.Server)
}

// Wait polls the operation until it's done.
func (o *ServerStopProlongationOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ServerStopProlongationOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.Server, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.Server)
	return response, err
}

// StopProlongation is an operation of Yandex.Cloud V1alpha Server service.
// It returns an object which should be used to monitor the operation state.
func (c serverClient) StopProlongation(ctx context.Context, in *baremetal.StopProlongationRequest, opts ...grpc.CallOption) (*ServerStopProlongationOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerStopProlongation, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewServerServiceClient(connection).StopProlongation(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.ServerSetProlongationMetadata).GetServerId()
		},
		MetadataType: (*baremetal.ServerSetProlongationMetadata)(nil),
		ResponseType: (*baremetal.Server)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ServerStopProlongationOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud V1alpha Server service.
func (c serverClient) ListOperations(ctx context.Context, in *baremetal.ListServerOperationsRequest, opts ...grpc.CallOption) (*baremetal.ListServerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ServerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewServerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c serverClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ServerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ServerGet               = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.Get")
	ServerList              = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.List")
	ServerCreate            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.Create")
	ServerBatchCreate       = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.BatchCreate")
	ServerUpdate            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.Update")
	ServerPowerOff          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.PowerOff")
	ServerPowerOn           = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.PowerOn")
	ServerReboot            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.Reboot")
	ServerReinstall         = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.Reinstall")
	ServerStartProlongation = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.StartProlongation")
	ServerStopProlongation  = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.StopProlongation")
	ServerListOperations    = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.ServerService.ListOperations")
	ServerOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
