// Code generated by sdkgen-v2. DO NOT EDIT.
package v1alphasdk

import (
	"context"

	baremetal "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateCloudConnectionClient provides methods for managing PrivateCloudConnection resources of Yandex.Cloud V1alpha.
type PrivateCloudConnectionClient interface {
	Get(context.Context, *baremetal.GetPrivateCloudConnectionRequest, ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error)
	List(context.Context, *baremetal.ListPrivateCloudConnectionRequest, ...grpc.CallOption) (*baremetal.ListPrivateCloudConnectionResponse, error)
	Create(context.Context, *baremetal.CreatePrivateCloudConnectionRequest, ...grpc.CallOption) (*PrivateCloudConnectionCreateOperation, error)
	Update(context.Context, *baremetal.UpdatePrivateCloudConnectionRequest, ...grpc.CallOption) (*PrivateCloudConnectionUpdateOperation, error)
	Delete(context.Context, *baremetal.DeletePrivateCloudConnectionRequest, ...grpc.CallOption) (*PrivateCloudConnectionDeleteOperation, error)
}

var _ PrivateCloudConnectionClient = privateCloudConnectionClient{}

type privateCloudConnectionClient struct {
	connector transport.Connector
}

// NewPrivateCloudConnectionClient returns PrivateCloudConnectionClient implementation.
func NewPrivateCloudConnectionClient(connector transport.Connector) PrivateCloudConnectionClient {
	return privateCloudConnectionClient{connector}
}

// Get is an operation of Yandex.Cloud V1alpha PrivateCloudConnection service.
func (c privateCloudConnectionClient) Get(ctx context.Context, in *baremetal.GetPrivateCloudConnectionRequest, opts ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPrivateCloudConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud V1alpha PrivateCloudConnection service.
func (c privateCloudConnectionClient) List(ctx context.Context, in *baremetal.ListPrivateCloudConnectionRequest, opts ...grpc.CallOption) (*baremetal.ListPrivateCloudConnectionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionList, opts...)
	if err != nil {
		return nil, err
	}
	return baremetal.NewPrivateCloudConnectionServiceClient(connection).List(ctx, in, opts...)
}

// PrivateCloudConnectionCreateOperation is used to monitor the state of Create operations.
type PrivateCloudConnectionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCloudConnectionCreateOperation) Metadata() *baremetal.CreatePrivateCloudConnectionMetadata {
	return o.Operation.Metadata().(*baremetal.CreatePrivateCloudConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCloudConnectionCreateOperation) Response() *baremetal.PrivateCloudConnection {
	return o.Operation.Response().(*baremetal.PrivateCloudConnection)
}

// Wait polls the operation until it's done.
func (o *PrivateCloudConnectionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PrivateCloudConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCloudConnectionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PrivateCloudConnection)
	return response, err
}

// Create is an operation of Yandex.Cloud V1alpha PrivateCloudConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateCloudConnectionClient) Create(ctx context.Context, in *baremetal.CreatePrivateCloudConnectionRequest, opts ...grpc.CallOption) (*PrivateCloudConnectionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateCloudConnectionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.CreatePrivateCloudConnectionMetadata).GetPrivateCloudConnectionId()
		},
		MetadataType: (*baremetal.CreatePrivateCloudConnectionMetadata)(nil),
		ResponseType: (*baremetal.PrivateCloudConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCloudConnectionCreateOperation{*op}, nil
}

// PrivateCloudConnectionUpdateOperation is used to monitor the state of Update operations.
type PrivateCloudConnectionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCloudConnectionUpdateOperation) Metadata() *baremetal.UpdatePrivateCloudConnectionMetadata {
	return o.Operation.Metadata().(*baremetal.UpdatePrivateCloudConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCloudConnectionUpdateOperation) Response() *baremetal.PrivateCloudConnection {
	return o.Operation.Response().(*baremetal.PrivateCloudConnection)
}

// Wait polls the operation until it's done.
func (o *PrivateCloudConnectionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*baremetal.PrivateCloudConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCloudConnectionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*baremetal.PrivateCloudConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*baremetal.PrivateCloudConnection)
	return response, err
}

// Update is an operation of Yandex.Cloud V1alpha PrivateCloudConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateCloudConnectionClient) Update(ctx context.Context, in *baremetal.UpdatePrivateCloudConnectionRequest, opts ...grpc.CallOption) (*PrivateCloudConnectionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateCloudConnectionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.UpdatePrivateCloudConnectionMetadata).GetPrivateCloudConnectionId()
		},
		MetadataType: (*baremetal.UpdatePrivateCloudConnectionMetadata)(nil),
		ResponseType: (*baremetal.PrivateCloudConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCloudConnectionUpdateOperation{*op}, nil
}

// PrivateCloudConnectionDeleteOperation is used to monitor the state of Delete operations.
type PrivateCloudConnectionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCloudConnectionDeleteOperation) Metadata() *baremetal.DeletePrivateCloudConnectionMetadata {
	return o.Operation.Metadata().(*baremetal.DeletePrivateCloudConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCloudConnectionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCloudConnectionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCloudConnectionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud V1alpha PrivateCloudConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateCloudConnectionClient) Delete(ctx context.Context, in *baremetal.DeletePrivateCloudConnectionRequest, opts ...grpc.CallOption) (*PrivateCloudConnectionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := baremetal.NewPrivateCloudConnectionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*baremetal.DeletePrivateCloudConnectionMetadata).GetPrivateCloudConnectionId()
		},
		MetadataType: (*baremetal.DeletePrivateCloudConnectionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCloudConnectionDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c privateCloudConnectionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCloudConnectionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateCloudConnectionGet             = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateCloudConnectionService.Get")
	PrivateCloudConnectionList            = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateCloudConnectionService.List")
	PrivateCloudConnectionCreate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateCloudConnectionService.Create")
	PrivateCloudConnectionUpdate          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateCloudConnectionService.Update")
	PrivateCloudConnectionDelete          = protoreflect.FullName("yandex.cloud.baremetal.v1alpha.PrivateCloudConnectionService.Delete")
	PrivateCloudConnectionOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
