// Code generated by sdkgen-v2. DO NOT EDIT.
package loggingsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	logging "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// LogGroupClient provides methods for managing LogGroup resources of Yandex.Cloud Logging.
type LogGroupClient interface {
	Get(context.Context, *logging.GetLogGroupRequest, ...grpc.CallOption) (*logging.LogGroup, error)
	Stats(context.Context, *logging.GetLogGroupStatsRequest, ...grpc.CallOption) (*logging.GetLogGroupStatsResponse, error)
	List(context.Context, *logging.ListLogGroupsRequest, ...grpc.CallOption) (*logging.ListLogGroupsResponse, error)
	Create(context.Context, *logging.CreateLogGroupRequest, ...grpc.CallOption) (*LogGroupCreateOperation, error)
	Update(context.Context, *logging.UpdateLogGroupRequest, ...grpc.CallOption) (*LogGroupUpdateOperation, error)
	Delete(context.Context, *logging.DeleteLogGroupRequest, ...grpc.CallOption) (*LogGroupDeleteOperation, error)
	ListResources(context.Context, *logging.ListResourcesRequest, ...grpc.CallOption) (*logging.ListResourcesResponse, error)
	ListOperations(context.Context, *logging.ListOperationsRequest, ...grpc.CallOption) (*logging.ListOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*LogGroupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*LogGroupUpdateAccessBindingsOperation, error)
}

var _ LogGroupClient = logGroupClient{}

type logGroupClient struct {
	connector transport.Connector
}

// NewLogGroupClient returns LogGroupClient implementation.
func NewLogGroupClient(connector transport.Connector) LogGroupClient {
	return logGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) Get(ctx context.Context, in *logging.GetLogGroupRequest, opts ...grpc.CallOption) (*logging.LogGroup, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).Get(ctx, in, opts...)
}

// Stats is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) Stats(ctx context.Context, in *logging.GetLogGroupStatsRequest, opts ...grpc.CallOption) (*logging.GetLogGroupStatsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupStats, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).Stats(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) List(ctx context.Context, in *logging.ListLogGroupsRequest, opts ...grpc.CallOption) (*logging.ListLogGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).List(ctx, in, opts...)
}

// LogGroupCreateOperation is used to monitor the state of Create operations.
type LogGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LogGroupCreateOperation) Metadata() *logging.CreateLogGroupMetadata {
	return o.Operation.Metadata().(*logging.CreateLogGroupMetadata)
}

// Response retrieves the operation response.
func (o *LogGroupCreateOperation) Response() *logging.LogGroup {
	return o.Operation.Response().(*logging.LogGroup)
}

// Wait polls the operation until it's done.
func (o *LogGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.LogGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.LogGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LogGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.LogGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.LogGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Logging LogGroup service.
// It returns an object which should be used to monitor the operation state.
func (c logGroupClient) Create(ctx context.Context, in *logging.CreateLogGroupRequest, opts ...grpc.CallOption) (*LogGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewLogGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.CreateLogGroupMetadata).GetLogGroupId()
		},
		MetadataType: (*logging.CreateLogGroupMetadata)(nil),
		ResponseType: (*logging.LogGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LogGroupCreateOperation{*op}, nil
}

// LogGroupUpdateOperation is used to monitor the state of Update operations.
type LogGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LogGroupUpdateOperation) Metadata() *logging.UpdateLogGroupMetadata {
	return o.Operation.Metadata().(*logging.UpdateLogGroupMetadata)
}

// Response retrieves the operation response.
func (o *LogGroupUpdateOperation) Response() *logging.LogGroup {
	return o.Operation.Response().(*logging.LogGroup)
}

// Wait polls the operation until it's done.
func (o *LogGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.LogGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.LogGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LogGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.LogGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.LogGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Logging LogGroup service.
// It returns an object which should be used to monitor the operation state.
func (c logGroupClient) Update(ctx context.Context, in *logging.UpdateLogGroupRequest, opts ...grpc.CallOption) (*LogGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewLogGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.UpdateLogGroupMetadata).GetLogGroupId()
		},
		MetadataType: (*logging.UpdateLogGroupMetadata)(nil),
		ResponseType: (*logging.LogGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LogGroupUpdateOperation{*op}, nil
}

// LogGroupDeleteOperation is used to monitor the state of Delete operations.
type LogGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LogGroupDeleteOperation) Metadata() *logging.DeleteLogGroupMetadata {
	return o.Operation.Metadata().(*logging.DeleteLogGroupMetadata)
}

// Response retrieves the operation response.
func (o *LogGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LogGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LogGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Logging LogGroup service.
// It returns an object which should be used to monitor the operation state.
func (c logGroupClient) Delete(ctx context.Context, in *logging.DeleteLogGroupRequest, opts ...grpc.CallOption) (*LogGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewLogGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.DeleteLogGroupMetadata).GetLogGroupId()
		},
		MetadataType: (*logging.DeleteLogGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LogGroupDeleteOperation{*op}, nil
}

// ListResources is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) ListResources(ctx context.Context, in *logging.ListResourcesRequest, opts ...grpc.CallOption) (*logging.ListResourcesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupListResources, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).ListResources(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) ListOperations(ctx context.Context, in *logging.ListOperationsRequest, opts ...grpc.CallOption) (*logging.ListOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Logging LogGroup service.
func (c logGroupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewLogGroupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// LogGroupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type LogGroupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LogGroupSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *LogGroupSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LogGroupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LogGroupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Logging LogGroup service.
// It returns an object which should be used to monitor the operation state.
func (c logGroupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*LogGroupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewLogGroupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LogGroupSetAccessBindingsOperation{*op}, nil
}

// LogGroupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type LogGroupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LogGroupUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *LogGroupUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LogGroupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LogGroupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Logging LogGroup service.
// It returns an object which should be used to monitor the operation state.
func (c logGroupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*LogGroupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewLogGroupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LogGroupUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c logGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LogGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	LogGroupGet                  = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.Get")
	LogGroupStats                = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.Stats")
	LogGroupList                 = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.List")
	LogGroupCreate               = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.Create")
	LogGroupUpdate               = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.Update")
	LogGroupDelete               = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.Delete")
	LogGroupListResources        = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.ListResources")
	LogGroupListOperations       = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.ListOperations")
	LogGroupListAccessBindings   = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.ListAccessBindings")
	LogGroupSetAccessBindings    = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.SetAccessBindings")
	LogGroupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.logging.v1.LogGroupService.UpdateAccessBindings")
	LogGroupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
