// Code generated by sdkgen-v2. DO NOT EDIT.
package loggingsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	logging "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SinkClient provides methods for managing Sink resources of Yandex.Cloud Logging.
type SinkClient interface {
	Get(context.Context, *logging.GetSinkRequest, ...grpc.CallOption) (*logging.Sink, error)
	List(context.Context, *logging.ListSinksRequest, ...grpc.CallOption) (*logging.ListSinksResponse, error)
	Create(context.Context, *logging.CreateSinkRequest, ...grpc.CallOption) (*SinkCreateOperation, error)
	Update(context.Context, *logging.UpdateSinkRequest, ...grpc.CallOption) (*SinkUpdateOperation, error)
	Delete(context.Context, *logging.DeleteSinkRequest, ...grpc.CallOption) (*SinkDeleteOperation, error)
	ListOperations(context.Context, *logging.ListSinkOperationsRequest, ...grpc.CallOption) (*logging.ListSinkOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*SinkSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*SinkUpdateAccessBindingsOperation, error)
}

var _ SinkClient = sinkClient{}

type sinkClient struct {
	connector transport.Connector
}

// NewSinkClient returns SinkClient implementation.
func NewSinkClient(connector transport.Connector) SinkClient {
	return sinkClient{connector}
}

// Get is an operation of Yandex.Cloud Logging Sink service.
func (c sinkClient) Get(ctx context.Context, in *logging.GetSinkRequest, opts ...grpc.CallOption) (*logging.Sink, error) {
	connection, err := c.connector.GetConnection(ctx, SinkGet, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewSinkServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Logging Sink service.
func (c sinkClient) List(ctx context.Context, in *logging.ListSinksRequest, opts ...grpc.CallOption) (*logging.ListSinksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SinkList, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewSinkServiceClient(connection).List(ctx, in, opts...)
}

// SinkCreateOperation is used to monitor the state of Create operations.
type SinkCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SinkCreateOperation) Metadata() *logging.CreateSinkMetadata {
	return o.Operation.Metadata().(*logging.CreateSinkMetadata)
}

// Response retrieves the operation response.
func (o *SinkCreateOperation) Response() *logging.Sink {
	return o.Operation.Response().(*logging.Sink)
}

// Wait polls the operation until it's done.
func (o *SinkCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.Sink, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.Sink)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SinkCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.Sink, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.Sink)
	return response, err
}

// Create is an operation of Yandex.Cloud Logging Sink service.
// It returns an object which should be used to monitor the operation state.
func (c sinkClient) Create(ctx context.Context, in *logging.CreateSinkRequest, opts ...grpc.CallOption) (*SinkCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewSinkServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.CreateSinkMetadata).GetSinkId()
		},
		MetadataType: (*logging.CreateSinkMetadata)(nil),
		ResponseType: (*logging.Sink)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SinkCreateOperation{*op}, nil
}

// SinkUpdateOperation is used to monitor the state of Update operations.
type SinkUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SinkUpdateOperation) Metadata() *logging.UpdateSinkMetadata {
	return o.Operation.Metadata().(*logging.UpdateSinkMetadata)
}

// Response retrieves the operation response.
func (o *SinkUpdateOperation) Response() *logging.Sink {
	return o.Operation.Response().(*logging.Sink)
}

// Wait polls the operation until it's done.
func (o *SinkUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.Sink, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.Sink)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SinkUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.Sink, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.Sink)
	return response, err
}

// Update is an operation of Yandex.Cloud Logging Sink service.
// It returns an object which should be used to monitor the operation state.
func (c sinkClient) Update(ctx context.Context, in *logging.UpdateSinkRequest, opts ...grpc.CallOption) (*SinkUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewSinkServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.UpdateSinkMetadata).GetSinkId()
		},
		MetadataType: (*logging.UpdateSinkMetadata)(nil),
		ResponseType: (*logging.Sink)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SinkUpdateOperation{*op}, nil
}

// SinkDeleteOperation is used to monitor the state of Delete operations.
type SinkDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SinkDeleteOperation) Metadata() *logging.DeleteSinkMetadata {
	return o.Operation.Metadata().(*logging.DeleteSinkMetadata)
}

// Response retrieves the operation response.
func (o *SinkDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SinkDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SinkDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Logging Sink service.
// It returns an object which should be used to monitor the operation state.
func (c sinkClient) Delete(ctx context.Context, in *logging.DeleteSinkRequest, opts ...grpc.CallOption) (*SinkDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewSinkServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.DeleteSinkMetadata).GetSinkId()
		},
		MetadataType: (*logging.DeleteSinkMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SinkDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Logging Sink service.
func (c sinkClient) ListOperations(ctx context.Context, in *logging.ListSinkOperationsRequest, opts ...grpc.CallOption) (*logging.ListSinkOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SinkListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewSinkServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Logging Sink service.
func (c sinkClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SinkListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewSinkServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// SinkSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type SinkSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SinkSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *SinkSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SinkSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SinkSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Logging Sink service.
// It returns an object which should be used to monitor the operation state.
func (c sinkClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*SinkSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewSinkServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SinkSetAccessBindingsOperation{*op}, nil
}

// SinkUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type SinkUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SinkUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *SinkUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SinkUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SinkUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Logging Sink service.
// It returns an object which should be used to monitor the operation state.
func (c sinkClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*SinkUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewSinkServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SinkUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c sinkClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SinkOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SinkGet                  = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.Get")
	SinkList                 = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.List")
	SinkCreate               = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.Create")
	SinkUpdate               = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.Update")
	SinkDelete               = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.Delete")
	SinkListOperations       = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.ListOperations")
	SinkListAccessBindings   = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.ListAccessBindings")
	SinkSetAccessBindings    = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.SetAccessBindings")
	SinkUpdateAccessBindings = protoreflect.FullName("yandex.cloud.logging.v1.SinkService.UpdateAccessBindings")
	SinkOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
