// Code generated by sdkgen-v2. DO NOT EDIT.
package loggingsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	logging "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ExportClient provides methods for managing Export resources of Yandex.Cloud Logging.
type ExportClient interface {
	Run(context.Context, *logging.RunExportRequest, ...grpc.CallOption) (*ExportRunOperation, error)
	Get(context.Context, *logging.GetExportRequest, ...grpc.CallOption) (*logging.Export, error)
	List(context.Context, *logging.ListExportsRequest, ...grpc.CallOption) (*logging.ListExportsResponse, error)
	Create(context.Context, *logging.CreateExportRequest, ...grpc.CallOption) (*ExportCreateOperation, error)
	Update(context.Context, *logging.UpdateExportRequest, ...grpc.CallOption) (*ExportUpdateOperation, error)
	Delete(context.Context, *logging.DeleteExportRequest, ...grpc.CallOption) (*ExportDeleteOperation, error)
	ListOperations(context.Context, *logging.ListExportOperationsRequest, ...grpc.CallOption) (*logging.ListExportOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ExportSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ExportUpdateAccessBindingsOperation, error)
}

var _ ExportClient = exportClient{}

type exportClient struct {
	connector transport.Connector
}

// NewExportClient returns ExportClient implementation.
func NewExportClient(connector transport.Connector) ExportClient {
	return exportClient{connector}
}

// ExportRunOperation is used to monitor the state of Run operations.
type ExportRunOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportRunOperation) Metadata() *logging.RunExportMetadata {
	return o.Operation.Metadata().(*logging.RunExportMetadata)
}

// Response retrieves the operation response.
func (o *ExportRunOperation) Response() *logging.RunExportDetails {
	return o.Operation.Response().(*logging.RunExportDetails)
}

// Wait polls the operation until it's done.
func (o *ExportRunOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.RunExportDetails, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.RunExportDetails)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportRunOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.RunExportDetails, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.RunExportDetails)
	return response, err
}

// Run is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) Run(ctx context.Context, in *logging.RunExportRequest, opts ...grpc.CallOption) (*ExportRunOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportRun, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).Run(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*logging.RunExportMetadata)(nil),
		ResponseType: (*logging.RunExportDetails)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportRunOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Logging Export service.
func (c exportClient) Get(ctx context.Context, in *logging.GetExportRequest, opts ...grpc.CallOption) (*logging.Export, error) {
	connection, err := c.connector.GetConnection(ctx, ExportGet, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewExportServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Logging Export service.
func (c exportClient) List(ctx context.Context, in *logging.ListExportsRequest, opts ...grpc.CallOption) (*logging.ListExportsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExportList, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewExportServiceClient(connection).List(ctx, in, opts...)
}

// ExportCreateOperation is used to monitor the state of Create operations.
type ExportCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportCreateOperation) Metadata() *logging.CreateExportMetadata {
	return o.Operation.Metadata().(*logging.CreateExportMetadata)
}

// Response retrieves the operation response.
func (o *ExportCreateOperation) Response() *logging.Export {
	return o.Operation.Response().(*logging.Export)
}

// Wait polls the operation until it's done.
func (o *ExportCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.Export, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.Export)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.Export, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.Export)
	return response, err
}

// Create is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) Create(ctx context.Context, in *logging.CreateExportRequest, opts ...grpc.CallOption) (*ExportCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.CreateExportMetadata).GetExportId()
		},
		MetadataType: (*logging.CreateExportMetadata)(nil),
		ResponseType: (*logging.Export)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportCreateOperation{*op}, nil
}

// ExportUpdateOperation is used to monitor the state of Update operations.
type ExportUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportUpdateOperation) Metadata() *logging.UpdateExportMetadata {
	return o.Operation.Metadata().(*logging.UpdateExportMetadata)
}

// Response retrieves the operation response.
func (o *ExportUpdateOperation) Response() *logging.Export {
	return o.Operation.Response().(*logging.Export)
}

// Wait polls the operation until it's done.
func (o *ExportUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*logging.Export, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*logging.Export)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*logging.Export, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*logging.Export)
	return response, err
}

// Update is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) Update(ctx context.Context, in *logging.UpdateExportRequest, opts ...grpc.CallOption) (*ExportUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.UpdateExportMetadata).GetExportId()
		},
		MetadataType: (*logging.UpdateExportMetadata)(nil),
		ResponseType: (*logging.Export)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportUpdateOperation{*op}, nil
}

// ExportDeleteOperation is used to monitor the state of Delete operations.
type ExportDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportDeleteOperation) Metadata() *logging.DeleteExportMetadata {
	return o.Operation.Metadata().(*logging.DeleteExportMetadata)
}

// Response retrieves the operation response.
func (o *ExportDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ExportDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) Delete(ctx context.Context, in *logging.DeleteExportRequest, opts ...grpc.CallOption) (*ExportDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*logging.DeleteExportMetadata).GetExportId()
		},
		MetadataType: (*logging.DeleteExportMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Logging Export service.
func (c exportClient) ListOperations(ctx context.Context, in *logging.ListExportOperationsRequest, opts ...grpc.CallOption) (*logging.ListExportOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExportListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewExportServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Logging Export service.
func (c exportClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExportListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return logging.NewExportServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ExportSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ExportSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ExportSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ExportSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ExportSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportSetAccessBindingsOperation{*op}, nil
}

// ExportUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ExportUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExportUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ExportUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ExportUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExportUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Logging Export service.
// It returns an object which should be used to monitor the operation state.
func (c exportClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ExportUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := logging.NewExportServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExportUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c exportClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExportOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ExportRun                  = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.Run")
	ExportGet                  = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.Get")
	ExportList                 = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.List")
	ExportCreate               = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.Create")
	ExportUpdate               = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.Update")
	ExportDelete               = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.Delete")
	ExportListOperations       = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.ListOperations")
	ExportListAccessBindings   = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.ListAccessBindings")
	ExportSetAccessBindings    = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.SetAccessBindings")
	ExportUpdateAccessBindings = protoreflect.FullName("yandex.cloud.logging.v1.ExportService.UpdateAccessBindings")
	ExportOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
