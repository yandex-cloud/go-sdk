// Code generated by sdkgen-v2. DO NOT EDIT.
package sparksdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	spark "github.com/yandex-cloud/go-genproto/yandex/cloud/spark/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ClusterClient provides methods for managing Cluster resources of Yandex.Cloud Spark.
type ClusterClient interface {
	Get(context.Context, *spark.GetClusterRequest, ...grpc.CallOption) (*spark.Cluster, error)
	List(context.Context, *spark.ListClustersRequest, ...grpc.CallOption) (*spark.ListClustersResponse, error)
	Create(context.Context, *spark.CreateClusterRequest, ...grpc.CallOption) (*ClusterCreateOperation, error)
	Update(context.Context, *spark.UpdateClusterRequest, ...grpc.CallOption) (*ClusterUpdateOperation, error)
	Delete(context.Context, *spark.DeleteClusterRequest, ...grpc.CallOption) (*ClusterDeleteOperation, error)
	Start(context.Context, *spark.StartClusterRequest, ...grpc.CallOption) (*ClusterStartOperation, error)
	Stop(context.Context, *spark.StopClusterRequest, ...grpc.CallOption) (*ClusterStopOperation, error)
	ListOperations(context.Context, *spark.ListClusterOperationsRequest, ...grpc.CallOption) (*spark.ListClusterOperationsResponse, error)
}

var _ ClusterClient = clusterClient{}

type clusterClient struct {
	connector transport.Connector
}

// NewClusterClient returns ClusterClient implementation.
func NewClusterClient(connector transport.Connector) ClusterClient {
	return clusterClient{connector}
}

// Get is an operation of Yandex.Cloud Spark Cluster service.
func (c clusterClient) Get(ctx context.Context, in *spark.GetClusterRequest, opts ...grpc.CallOption) (*spark.Cluster, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return spark.NewClusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Spark Cluster service.
func (c clusterClient) List(ctx context.Context, in *spark.ListClustersRequest, opts ...grpc.CallOption) (*spark.ListClustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterList, opts...)
	if err != nil {
		return nil, err
	}
	return spark.NewClusterServiceClient(connection).List(ctx, in, opts...)
}

// ClusterCreateOperation is used to monitor the state of Create operations.
type ClusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateOperation) Metadata() *spark.CreateClusterMetadata {
	return o.Operation.Metadata().(*spark.CreateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateOperation) Response() *spark.Cluster {
	return o.Operation.Response().(*spark.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// Create is an operation of Yandex.Cloud Spark Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Create(ctx context.Context, in *spark.CreateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := spark.NewClusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*spark.CreateClusterMetadata).GetClusterId()
		},
		MetadataType: (*spark.CreateClusterMetadata)(nil),
		ResponseType: (*spark.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateOperation{*op}, nil
}

// ClusterUpdateOperation is used to monitor the state of Update operations.
type ClusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateOperation) Metadata() *spark.UpdateClusterMetadata {
	return o.Operation.Metadata().(*spark.UpdateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateOperation) Response() *spark.Cluster {
	return o.Operation.Response().(*spark.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// Update is an operation of Yandex.Cloud Spark Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Update(ctx context.Context, in *spark.UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := spark.NewClusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*spark.UpdateClusterMetadata).GetClusterId()
		},
		MetadataType: (*spark.UpdateClusterMetadata)(nil),
		ResponseType: (*spark.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateOperation{*op}, nil
}

// ClusterDeleteOperation is used to monitor the state of Delete operations.
type ClusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteOperation) Metadata() *spark.DeleteClusterMetadata {
	return o.Operation.Metadata().(*spark.DeleteClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Spark Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Delete(ctx context.Context, in *spark.DeleteClusterRequest, opts ...grpc.CallOption) (*ClusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := spark.NewClusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*spark.DeleteClusterMetadata).GetClusterId()
		},
		MetadataType: (*spark.DeleteClusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteOperation{*op}, nil
}

// ClusterStartOperation is used to monitor the state of Start operations.
type ClusterStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStartOperation) Metadata() *spark.StartClusterMetadata {
	return o.Operation.Metadata().(*spark.StartClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStartOperation) Response() *spark.Cluster {
	return o.Operation.Response().(*spark.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// Start is an operation of Yandex.Cloud Spark Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Start(ctx context.Context, in *spark.StartClusterRequest, opts ...grpc.CallOption) (*ClusterStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := spark.NewClusterServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*spark.StartClusterMetadata).GetClusterId()
		},
		MetadataType: (*spark.StartClusterMetadata)(nil),
		ResponseType: (*spark.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStartOperation{*op}, nil
}

// ClusterStopOperation is used to monitor the state of Stop operations.
type ClusterStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStopOperation) Metadata() *spark.StopClusterMetadata {
	return o.Operation.Metadata().(*spark.StopClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStopOperation) Response() *spark.Cluster {
	return o.Operation.Response().(*spark.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*spark.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*spark.Cluster)
	return response, err
}

// Stop is an operation of Yandex.Cloud Spark Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Stop(ctx context.Context, in *spark.StopClusterRequest, opts ...grpc.CallOption) (*ClusterStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := spark.NewClusterServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*spark.StopClusterMetadata).GetClusterId()
		},
		MetadataType: (*spark.StopClusterMetadata)(nil),
		ResponseType: (*spark.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStopOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Spark Cluster service.
func (c clusterClient) ListOperations(ctx context.Context, in *spark.ListClusterOperationsRequest, opts ...grpc.CallOption) (*spark.ListClusterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return spark.NewClusterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c clusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ClusterGet             = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Get")
	ClusterList            = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.List")
	ClusterCreate          = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Create")
	ClusterUpdate          = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Update")
	ClusterDelete          = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Delete")
	ClusterStart           = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Start")
	ClusterStop            = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.Stop")
	ClusterListOperations  = protoreflect.FullName("yandex.cloud.spark.v1.ClusterService.ListOperations")
	ClusterOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
