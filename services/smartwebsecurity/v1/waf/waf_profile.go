// Code generated by sdkgen-v2. DO NOT EDIT.
package wafsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	waf "github.com/yandex-cloud/go-genproto/yandex/cloud/smartwebsecurity/v1/waf"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// WafProfileClient provides methods for managing WafProfile resources of Yandex.Cloud Waf.
type WafProfileClient interface {
	Get(context.Context, *waf.GetWafProfileRequest, ...grpc.CallOption) (*waf.WafProfile, error)
	List(context.Context, *waf.ListWafProfilesRequest, ...grpc.CallOption) (*waf.ListWafProfilesResponse, error)
	Create(context.Context, *waf.CreateWafProfileRequest, ...grpc.CallOption) (*WafProfileCreateOperation, error)
	Update(context.Context, *waf.UpdateWafProfileRequest, ...grpc.CallOption) (*WafProfileUpdateOperation, error)
	Delete(context.Context, *waf.DeleteWafProfileRequest, ...grpc.CallOption) (*WafProfileDeleteOperation, error)
}

var _ WafProfileClient = wafProfileClient{}

type wafProfileClient struct {
	connector transport.Connector
}

// NewWafProfileClient returns WafProfileClient implementation.
func NewWafProfileClient(connector transport.Connector) WafProfileClient {
	return wafProfileClient{connector}
}

// Get is an operation of Yandex.Cloud Waf WafProfile service.
func (c wafProfileClient) Get(ctx context.Context, in *waf.GetWafProfileRequest, opts ...grpc.CallOption) (*waf.WafProfile, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileGet, opts...)
	if err != nil {
		return nil, err
	}
	return waf.NewWafProfileServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Waf WafProfile service.
func (c wafProfileClient) List(ctx context.Context, in *waf.ListWafProfilesRequest, opts ...grpc.CallOption) (*waf.ListWafProfilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileList, opts...)
	if err != nil {
		return nil, err
	}
	return waf.NewWafProfileServiceClient(connection).List(ctx, in, opts...)
}

// WafProfileCreateOperation is used to monitor the state of Create operations.
type WafProfileCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WafProfileCreateOperation) Metadata() *waf.CreateWafProfileMetadata {
	return o.Operation.Metadata().(*waf.CreateWafProfileMetadata)
}

// Response retrieves the operation response.
func (o *WafProfileCreateOperation) Response() *waf.WafProfile {
	return o.Operation.Response().(*waf.WafProfile)
}

// Wait polls the operation until it's done.
func (o *WafProfileCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*waf.WafProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*waf.WafProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WafProfileCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*waf.WafProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*waf.WafProfile)
	return response, err
}

// Create is an operation of Yandex.Cloud Waf WafProfile service.
// It returns an object which should be used to monitor the operation state.
func (c wafProfileClient) Create(ctx context.Context, in *waf.CreateWafProfileRequest, opts ...grpc.CallOption) (*WafProfileCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := waf.NewWafProfileServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*waf.CreateWafProfileMetadata).GetWafProfileId()
		},
		MetadataType: (*waf.CreateWafProfileMetadata)(nil),
		ResponseType: (*waf.WafProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WafProfileCreateOperation{*op}, nil
}

// WafProfileUpdateOperation is used to monitor the state of Update operations.
type WafProfileUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WafProfileUpdateOperation) Metadata() *waf.UpdateWafProfileMetadata {
	return o.Operation.Metadata().(*waf.UpdateWafProfileMetadata)
}

// Response retrieves the operation response.
func (o *WafProfileUpdateOperation) Response() *waf.WafProfile {
	return o.Operation.Response().(*waf.WafProfile)
}

// Wait polls the operation until it's done.
func (o *WafProfileUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*waf.WafProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*waf.WafProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WafProfileUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*waf.WafProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*waf.WafProfile)
	return response, err
}

// Update is an operation of Yandex.Cloud Waf WafProfile service.
// It returns an object which should be used to monitor the operation state.
func (c wafProfileClient) Update(ctx context.Context, in *waf.UpdateWafProfileRequest, opts ...grpc.CallOption) (*WafProfileUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := waf.NewWafProfileServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*waf.UpdateWafProfileMetadata).GetWafProfileId()
		},
		MetadataType: (*waf.UpdateWafProfileMetadata)(nil),
		ResponseType: (*waf.WafProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WafProfileUpdateOperation{*op}, nil
}

// WafProfileDeleteOperation is used to monitor the state of Delete operations.
type WafProfileDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WafProfileDeleteOperation) Metadata() *waf.DeleteWafProfileMetadata {
	return o.Operation.Metadata().(*waf.DeleteWafProfileMetadata)
}

// Response retrieves the operation response.
func (o *WafProfileDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *WafProfileDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WafProfileDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Waf WafProfile service.
// It returns an object which should be used to monitor the operation state.
func (c wafProfileClient) Delete(ctx context.Context, in *waf.DeleteWafProfileRequest, opts ...grpc.CallOption) (*WafProfileDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := waf.NewWafProfileServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*waf.DeleteWafProfileMetadata).GetWafProfileId()
		},
		MetadataType: (*waf.DeleteWafProfileMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WafProfileDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c wafProfileClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WafProfileOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	WafProfileGet             = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Get")
	WafProfileList            = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.List")
	WafProfileCreate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Create")
	WafProfileUpdate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Update")
	WafProfileDelete          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Delete")
	WafProfileOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
