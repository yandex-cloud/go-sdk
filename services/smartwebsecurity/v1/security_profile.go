// Code generated by sdkgen-v2. DO NOT EDIT.
package smartwebsecuritysdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	smartwebsecurity "github.com/yandex-cloud/go-genproto/yandex/cloud/smartwebsecurity/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SecurityProfileClient provides methods for managing SecurityProfile resources of Yandex.Cloud Smartwebsecurity.
type SecurityProfileClient interface {
	Get(context.Context, *smartwebsecurity.GetSecurityProfileRequest, ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error)
	List(context.Context, *smartwebsecurity.ListSecurityProfilesRequest, ...grpc.CallOption) (*smartwebsecurity.ListSecurityProfilesResponse, error)
	Create(context.Context, *smartwebsecurity.CreateSecurityProfileRequest, ...grpc.CallOption) (*SecurityProfileCreateOperation, error)
	Update(context.Context, *smartwebsecurity.UpdateSecurityProfileRequest, ...grpc.CallOption) (*SecurityProfileUpdateOperation, error)
	Delete(context.Context, *smartwebsecurity.DeleteSecurityProfileRequest, ...grpc.CallOption) (*SecurityProfileDeleteOperation, error)
}

var _ SecurityProfileClient = securityProfileClient{}

type securityProfileClient struct {
	connector transport.Connector
}

// NewSecurityProfileClient returns SecurityProfileClient implementation.
func NewSecurityProfileClient(connector transport.Connector) SecurityProfileClient {
	return securityProfileClient{connector}
}

// Get is an operation of Yandex.Cloud Smartwebsecurity SecurityProfile service.
func (c securityProfileClient) Get(ctx context.Context, in *smartwebsecurity.GetSecurityProfileRequest, opts ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileGet, opts...)
	if err != nil {
		return nil, err
	}
	return smartwebsecurity.NewSecurityProfileServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Smartwebsecurity SecurityProfile service.
func (c securityProfileClient) List(ctx context.Context, in *smartwebsecurity.ListSecurityProfilesRequest, opts ...grpc.CallOption) (*smartwebsecurity.ListSecurityProfilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileList, opts...)
	if err != nil {
		return nil, err
	}
	return smartwebsecurity.NewSecurityProfileServiceClient(connection).List(ctx, in, opts...)
}

// SecurityProfileCreateOperation is used to monitor the state of Create operations.
type SecurityProfileCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityProfileCreateOperation) Metadata() *smartwebsecurity.CreateSecurityProfileMetadata {
	return o.Operation.Metadata().(*smartwebsecurity.CreateSecurityProfileMetadata)
}

// Response retrieves the operation response.
func (o *SecurityProfileCreateOperation) Response() *smartwebsecurity.SecurityProfile {
	return o.Operation.Response().(*smartwebsecurity.SecurityProfile)
}

// Wait polls the operation until it's done.
func (o *SecurityProfileCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*smartwebsecurity.SecurityProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityProfileCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*smartwebsecurity.SecurityProfile)
	return response, err
}

// Create is an operation of Yandex.Cloud Smartwebsecurity SecurityProfile service.
// It returns an object which should be used to monitor the operation state.
func (c securityProfileClient) Create(ctx context.Context, in *smartwebsecurity.CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfileCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartwebsecurity.NewSecurityProfileServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartwebsecurity.CreateSecurityProfileMetadata).GetSecurityProfileId()
		},
		MetadataType: (*smartwebsecurity.CreateSecurityProfileMetadata)(nil),
		ResponseType: (*smartwebsecurity.SecurityProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityProfileCreateOperation{*op}, nil
}

// SecurityProfileUpdateOperation is used to monitor the state of Update operations.
type SecurityProfileUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityProfileUpdateOperation) Metadata() *smartwebsecurity.UpdateSecurityProfileMetadata {
	return o.Operation.Metadata().(*smartwebsecurity.UpdateSecurityProfileMetadata)
}

// Response retrieves the operation response.
func (o *SecurityProfileUpdateOperation) Response() *smartwebsecurity.SecurityProfile {
	return o.Operation.Response().(*smartwebsecurity.SecurityProfile)
}

// Wait polls the operation until it's done.
func (o *SecurityProfileUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*smartwebsecurity.SecurityProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityProfileUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*smartwebsecurity.SecurityProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*smartwebsecurity.SecurityProfile)
	return response, err
}

// Update is an operation of Yandex.Cloud Smartwebsecurity SecurityProfile service.
// It returns an object which should be used to monitor the operation state.
func (c securityProfileClient) Update(ctx context.Context, in *smartwebsecurity.UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfileUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartwebsecurity.NewSecurityProfileServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartwebsecurity.UpdateSecurityProfileMetadata).GetSecurityProfileId()
		},
		MetadataType: (*smartwebsecurity.UpdateSecurityProfileMetadata)(nil),
		ResponseType: (*smartwebsecurity.SecurityProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityProfileUpdateOperation{*op}, nil
}

// SecurityProfileDeleteOperation is used to monitor the state of Delete operations.
type SecurityProfileDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityProfileDeleteOperation) Metadata() *smartwebsecurity.DeleteSecurityProfileMetadata {
	return o.Operation.Metadata().(*smartwebsecurity.DeleteSecurityProfileMetadata)
}

// Response retrieves the operation response.
func (o *SecurityProfileDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SecurityProfileDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityProfileDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Smartwebsecurity SecurityProfile service.
// It returns an object which should be used to monitor the operation state.
func (c securityProfileClient) Delete(ctx context.Context, in *smartwebsecurity.DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfileDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := smartwebsecurity.NewSecurityProfileServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*smartwebsecurity.DeleteSecurityProfileMetadata).GetSecurityProfileId()
		},
		MetadataType: (*smartwebsecurity.DeleteSecurityProfileMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityProfileDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c securityProfileClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityProfileOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SecurityProfileGet             = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.SecurityProfileService.Get")
	SecurityProfileList            = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.SecurityProfileService.List")
	SecurityProfileCreate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.SecurityProfileService.Create")
	SecurityProfileUpdate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.SecurityProfileService.Update")
	SecurityProfileDelete          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.SecurityProfileService.Delete")
	SecurityProfileOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
