// Code generated by sdkgen-v2. DO NOT EDIT.
package advancedratelimitersdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	advanced_rate_limiter "github.com/yandex-cloud/go-genproto/yandex/cloud/smartwebsecurity/v1/advanced_rate_limiter"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AdvancedRateLimiterProfileClient provides methods for managing AdvancedRateLimiterProfile resources of Yandex.Cloud AdvancedRateLimiter.
type AdvancedRateLimiterProfileClient interface {
	Get(context.Context, *advanced_rate_limiter.GetAdvancedRateLimiterProfileRequest, ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error)
	List(context.Context, *advanced_rate_limiter.ListAdvancedRateLimiterProfilesRequest, ...grpc.CallOption) (*advanced_rate_limiter.ListAdvancedRateLimiterProfilesResponse, error)
	Create(context.Context, *advanced_rate_limiter.CreateAdvancedRateLimiterProfileRequest, ...grpc.CallOption) (*AdvancedRateLimiterProfileCreateOperation, error)
	Update(context.Context, *advanced_rate_limiter.UpdateAdvancedRateLimiterProfileRequest, ...grpc.CallOption) (*AdvancedRateLimiterProfileUpdateOperation, error)
	Delete(context.Context, *advanced_rate_limiter.DeleteAdvancedRateLimiterProfileRequest, ...grpc.CallOption) (*AdvancedRateLimiterProfileDeleteOperation, error)
}

var _ AdvancedRateLimiterProfileClient = advancedRateLimiterProfileClient{}

type advancedRateLimiterProfileClient struct {
	connector transport.Connector
}

// NewAdvancedRateLimiterProfileClient returns AdvancedRateLimiterProfileClient implementation.
func NewAdvancedRateLimiterProfileClient(connector transport.Connector) AdvancedRateLimiterProfileClient {
	return advancedRateLimiterProfileClient{connector}
}

// Get is an operation of Yandex.Cloud AdvancedRateLimiter AdvancedRateLimiterProfile service.
func (c advancedRateLimiterProfileClient) Get(ctx context.Context, in *advanced_rate_limiter.GetAdvancedRateLimiterProfileRequest, opts ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileGet, opts...)
	if err != nil {
		return nil, err
	}
	return advanced_rate_limiter.NewAdvancedRateLimiterProfileServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud AdvancedRateLimiter AdvancedRateLimiterProfile service.
func (c advancedRateLimiterProfileClient) List(ctx context.Context, in *advanced_rate_limiter.ListAdvancedRateLimiterProfilesRequest, opts ...grpc.CallOption) (*advanced_rate_limiter.ListAdvancedRateLimiterProfilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileList, opts...)
	if err != nil {
		return nil, err
	}
	return advanced_rate_limiter.NewAdvancedRateLimiterProfileServiceClient(connection).List(ctx, in, opts...)
}

// AdvancedRateLimiterProfileCreateOperation is used to monitor the state of Create operations.
type AdvancedRateLimiterProfileCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AdvancedRateLimiterProfileCreateOperation) Metadata() *advanced_rate_limiter.CreateAdvancedRateLimiterProfileMetadata {
	return o.Operation.Metadata().(*advanced_rate_limiter.CreateAdvancedRateLimiterProfileMetadata)
}

// Response retrieves the operation response.
func (o *AdvancedRateLimiterProfileCreateOperation) Response() *advanced_rate_limiter.AdvancedRateLimiterProfile {
	return o.Operation.Response().(*advanced_rate_limiter.AdvancedRateLimiterProfile)
}

// Wait polls the operation until it's done.
func (o *AdvancedRateLimiterProfileCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*advanced_rate_limiter.AdvancedRateLimiterProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AdvancedRateLimiterProfileCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*advanced_rate_limiter.AdvancedRateLimiterProfile)
	return response, err
}

// Create is an operation of Yandex.Cloud AdvancedRateLimiter AdvancedRateLimiterProfile service.
// It returns an object which should be used to monitor the operation state.
func (c advancedRateLimiterProfileClient) Create(ctx context.Context, in *advanced_rate_limiter.CreateAdvancedRateLimiterProfileRequest, opts ...grpc.CallOption) (*AdvancedRateLimiterProfileCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := advanced_rate_limiter.NewAdvancedRateLimiterProfileServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*advanced_rate_limiter.CreateAdvancedRateLimiterProfileMetadata).GetAdvancedRateLimiterProfileId()
		},
		MetadataType: (*advanced_rate_limiter.CreateAdvancedRateLimiterProfileMetadata)(nil),
		ResponseType: (*advanced_rate_limiter.AdvancedRateLimiterProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AdvancedRateLimiterProfileCreateOperation{*op}, nil
}

// AdvancedRateLimiterProfileUpdateOperation is used to monitor the state of Update operations.
type AdvancedRateLimiterProfileUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AdvancedRateLimiterProfileUpdateOperation) Metadata() *advanced_rate_limiter.UpdateAdvancedRateLimiterProfileMetadata {
	return o.Operation.Metadata().(*advanced_rate_limiter.UpdateAdvancedRateLimiterProfileMetadata)
}

// Response retrieves the operation response.
func (o *AdvancedRateLimiterProfileUpdateOperation) Response() *advanced_rate_limiter.AdvancedRateLimiterProfile {
	return o.Operation.Response().(*advanced_rate_limiter.AdvancedRateLimiterProfile)
}

// Wait polls the operation until it's done.
func (o *AdvancedRateLimiterProfileUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*advanced_rate_limiter.AdvancedRateLimiterProfile)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AdvancedRateLimiterProfileUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*advanced_rate_limiter.AdvancedRateLimiterProfile, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*advanced_rate_limiter.AdvancedRateLimiterProfile)
	return response, err
}

// Update is an operation of Yandex.Cloud AdvancedRateLimiter AdvancedRateLimiterProfile service.
// It returns an object which should be used to monitor the operation state.
func (c advancedRateLimiterProfileClient) Update(ctx context.Context, in *advanced_rate_limiter.UpdateAdvancedRateLimiterProfileRequest, opts ...grpc.CallOption) (*AdvancedRateLimiterProfileUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := advanced_rate_limiter.NewAdvancedRateLimiterProfileServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*advanced_rate_limiter.UpdateAdvancedRateLimiterProfileMetadata).GetAdvancedRateLimiterProfileId()
		},
		MetadataType: (*advanced_rate_limiter.UpdateAdvancedRateLimiterProfileMetadata)(nil),
		ResponseType: (*advanced_rate_limiter.AdvancedRateLimiterProfile)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AdvancedRateLimiterProfileUpdateOperation{*op}, nil
}

// AdvancedRateLimiterProfileDeleteOperation is used to monitor the state of Delete operations.
type AdvancedRateLimiterProfileDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AdvancedRateLimiterProfileDeleteOperation) Metadata() *advanced_rate_limiter.DeleteAdvancedRateLimiterProfileMetadata {
	return o.Operation.Metadata().(*advanced_rate_limiter.DeleteAdvancedRateLimiterProfileMetadata)
}

// Response retrieves the operation response.
func (o *AdvancedRateLimiterProfileDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AdvancedRateLimiterProfileDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AdvancedRateLimiterProfileDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud AdvancedRateLimiter AdvancedRateLimiterProfile service.
// It returns an object which should be used to monitor the operation state.
func (c advancedRateLimiterProfileClient) Delete(ctx context.Context, in *advanced_rate_limiter.DeleteAdvancedRateLimiterProfileRequest, opts ...grpc.CallOption) (*AdvancedRateLimiterProfileDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := advanced_rate_limiter.NewAdvancedRateLimiterProfileServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*advanced_rate_limiter.DeleteAdvancedRateLimiterProfileMetadata).GetAdvancedRateLimiterProfileId()
		},
		MetadataType: (*advanced_rate_limiter.DeleteAdvancedRateLimiterProfileMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AdvancedRateLimiterProfileDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c advancedRateLimiterProfileClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AdvancedRateLimiterProfileOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AdvancedRateLimiterProfileGet             = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfileService.Get")
	AdvancedRateLimiterProfileList            = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfileService.List")
	AdvancedRateLimiterProfileCreate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfileService.Create")
	AdvancedRateLimiterProfileUpdate          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfileService.Update")
	AdvancedRateLimiterProfileDelete          = protoreflect.FullName("yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfileService.Delete")
	AdvancedRateLimiterProfileOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
