// Code generated by sdkgen-v2. DO NOT EDIT.
package kafkasdk

import (
	"context"

	kafka "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/kafka/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TopicClient provides methods for managing Topic resources of Yandex.Cloud Kafka.
type TopicClient interface {
	Get(context.Context, *kafka.GetTopicRequest, ...grpc.CallOption) (*kafka.Topic, error)
	List(context.Context, *kafka.ListTopicsRequest, ...grpc.CallOption) (*kafka.ListTopicsResponse, error)
	Create(context.Context, *kafka.CreateTopicRequest, ...grpc.CallOption) (*TopicCreateOperation, error)
	Update(context.Context, *kafka.UpdateTopicRequest, ...grpc.CallOption) (*TopicUpdateOperation, error)
	Delete(context.Context, *kafka.DeleteTopicRequest, ...grpc.CallOption) (*TopicDeleteOperation, error)
}

var _ TopicClient = topicClient{}

type topicClient struct {
	connector transport.Connector
}

// NewTopicClient returns TopicClient implementation.
func NewTopicClient(connector transport.Connector) TopicClient {
	return topicClient{connector}
}

// Get is an operation of Yandex.Cloud Kafka Topic service.
func (c topicClient) Get(ctx context.Context, in *kafka.GetTopicRequest, opts ...grpc.CallOption) (*kafka.Topic, error) {
	connection, err := c.connector.GetConnection(ctx, TopicGet, opts...)
	if err != nil {
		return nil, err
	}
	return kafka.NewTopicServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Kafka Topic service.
func (c topicClient) List(ctx context.Context, in *kafka.ListTopicsRequest, opts ...grpc.CallOption) (*kafka.ListTopicsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TopicList, opts...)
	if err != nil {
		return nil, err
	}
	return kafka.NewTopicServiceClient(connection).List(ctx, in, opts...)
}

// TopicCreateOperation is used to monitor the state of Create operations.
type TopicCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TopicCreateOperation) Metadata() *kafka.CreateTopicMetadata {
	return o.Operation.Metadata().(*kafka.CreateTopicMetadata)
}

// Response retrieves the operation response.
func (o *TopicCreateOperation) Response() *kafka.Topic {
	return o.Operation.Response().(*kafka.Topic)
}

// Wait polls the operation until it's done.
func (o *TopicCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*kafka.Topic, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*kafka.Topic)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TopicCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*kafka.Topic, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*kafka.Topic)
	return response, err
}

// Create is an operation of Yandex.Cloud Kafka Topic service.
// It returns an object which should be used to monitor the operation state.
func (c topicClient) Create(ctx context.Context, in *kafka.CreateTopicRequest, opts ...grpc.CallOption) (*TopicCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TopicCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := kafka.NewTopicServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*kafka.CreateTopicMetadata)(nil),
		ResponseType: (*kafka.Topic)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TopicCreateOperation{*op}, nil
}

// TopicUpdateOperation is used to monitor the state of Update operations.
type TopicUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TopicUpdateOperation) Metadata() *kafka.UpdateTopicMetadata {
	return o.Operation.Metadata().(*kafka.UpdateTopicMetadata)
}

// Response retrieves the operation response.
func (o *TopicUpdateOperation) Response() *kafka.Topic {
	return o.Operation.Response().(*kafka.Topic)
}

// Wait polls the operation until it's done.
func (o *TopicUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*kafka.Topic, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*kafka.Topic)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TopicUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*kafka.Topic, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*kafka.Topic)
	return response, err
}

// Update is an operation of Yandex.Cloud Kafka Topic service.
// It returns an object which should be used to monitor the operation state.
func (c topicClient) Update(ctx context.Context, in *kafka.UpdateTopicRequest, opts ...grpc.CallOption) (*TopicUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TopicUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := kafka.NewTopicServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*kafka.UpdateTopicMetadata)(nil),
		ResponseType: (*kafka.Topic)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TopicUpdateOperation{*op}, nil
}

// TopicDeleteOperation is used to monitor the state of Delete operations.
type TopicDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TopicDeleteOperation) Metadata() *kafka.DeleteTopicMetadata {
	return o.Operation.Metadata().(*kafka.DeleteTopicMetadata)
}

// Response retrieves the operation response.
func (o *TopicDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TopicDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TopicDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Kafka Topic service.
// It returns an object which should be used to monitor the operation state.
func (c topicClient) Delete(ctx context.Context, in *kafka.DeleteTopicRequest, opts ...grpc.CallOption) (*TopicDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TopicDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := kafka.NewTopicServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*kafka.DeleteTopicMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TopicDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c topicClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TopicOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TopicGet             = protoreflect.FullName("yandex.cloud.mdb.kafka.v1.TopicService.Get")
	TopicList            = protoreflect.FullName("yandex.cloud.mdb.kafka.v1.TopicService.List")
	TopicCreate          = protoreflect.FullName("yandex.cloud.mdb.kafka.v1.TopicService.Create")
	TopicUpdate          = protoreflect.FullName("yandex.cloud.mdb.kafka.v1.TopicService.Update")
	TopicDelete          = protoreflect.FullName("yandex.cloud.mdb.kafka.v1.TopicService.Delete")
	TopicOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
