// Code generated by sdkgen-v2. DO NOT EDIT.
package greenplumsdk

import (
	"context"

	greenplum "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// HBARuleClient provides methods for managing HBARule resources of Yandex.Cloud Greenplum.
type HBARuleClient interface {
	List(context.Context, *greenplum.ListHBARulesRequest, ...grpc.CallOption) (*greenplum.ListHBARulesResponse, error)
	ListAtRevision(context.Context, *greenplum.ListHBARulesAtRevisionRequest, ...grpc.CallOption) (*greenplum.ListHBARulesResponse, error)
	Create(context.Context, *greenplum.CreateHBARuleRequest, ...grpc.CallOption) (*HBARuleCreateOperation, error)
	Update(context.Context, *greenplum.UpdateHBARuleRequest, ...grpc.CallOption) (*HBARuleUpdateOperation, error)
	Delete(context.Context, *greenplum.DeleteHBARuleRequest, ...grpc.CallOption) (*HBARuleDeleteOperation, error)
	BatchUpdate(context.Context, *greenplum.BatchUpdateHBARulesRequest, ...grpc.CallOption) (*HBARuleBatchUpdateOperation, error)
}

var _ HBARuleClient = hbaRuleClient{}

type hbaRuleClient struct {
	connector transport.Connector
}

// NewHBARuleClient returns HBARuleClient implementation.
func NewHBARuleClient(connector transport.Connector) HBARuleClient {
	return hbaRuleClient{connector}
}

// List is an operation of Yandex.Cloud Greenplum HBARule service.
func (c hbaRuleClient) List(ctx context.Context, in *greenplum.ListHBARulesRequest, opts ...grpc.CallOption) (*greenplum.ListHBARulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleList, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewHBARuleServiceClient(connection).List(ctx, in, opts...)
}

// ListAtRevision is an operation of Yandex.Cloud Greenplum HBARule service.
func (c hbaRuleClient) ListAtRevision(ctx context.Context, in *greenplum.ListHBARulesAtRevisionRequest, opts ...grpc.CallOption) (*greenplum.ListHBARulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleListAtRevision, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewHBARuleServiceClient(connection).ListAtRevision(ctx, in, opts...)
}

// HBARuleCreateOperation is used to monitor the state of Create operations.
type HBARuleCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HBARuleCreateOperation) Metadata() *greenplum.HBARulesMetadata {
	return o.Operation.Metadata().(*greenplum.HBARulesMetadata)
}

// Response retrieves the operation response.
func (o *HBARuleCreateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HBARuleCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HBARuleCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Create is an operation of Yandex.Cloud Greenplum HBARule service.
// It returns an object which should be used to monitor the operation state.
func (c hbaRuleClient) Create(ctx context.Context, in *greenplum.CreateHBARuleRequest, opts ...grpc.CallOption) (*HBARuleCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewHBARuleServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.HBARulesMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HBARuleCreateOperation{*op}, nil
}

// HBARuleUpdateOperation is used to monitor the state of Update operations.
type HBARuleUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HBARuleUpdateOperation) Metadata() *greenplum.HBARulesMetadata {
	return o.Operation.Metadata().(*greenplum.HBARulesMetadata)
}

// Response retrieves the operation response.
func (o *HBARuleUpdateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HBARuleUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HBARuleUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Update is an operation of Yandex.Cloud Greenplum HBARule service.
// It returns an object which should be used to monitor the operation state.
func (c hbaRuleClient) Update(ctx context.Context, in *greenplum.UpdateHBARuleRequest, opts ...grpc.CallOption) (*HBARuleUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewHBARuleServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.HBARulesMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HBARuleUpdateOperation{*op}, nil
}

// HBARuleDeleteOperation is used to monitor the state of Delete operations.
type HBARuleDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HBARuleDeleteOperation) Metadata() *greenplum.HBARulesMetadata {
	return o.Operation.Metadata().(*greenplum.HBARulesMetadata)
}

// Response retrieves the operation response.
func (o *HBARuleDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HBARuleDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HBARuleDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Greenplum HBARule service.
// It returns an object which should be used to monitor the operation state.
func (c hbaRuleClient) Delete(ctx context.Context, in *greenplum.DeleteHBARuleRequest, opts ...grpc.CallOption) (*HBARuleDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewHBARuleServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.HBARulesMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HBARuleDeleteOperation{*op}, nil
}

// HBARuleBatchUpdateOperation is used to monitor the state of BatchUpdate operations.
type HBARuleBatchUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *HBARuleBatchUpdateOperation) Metadata() *greenplum.HBARulesMetadata {
	return o.Operation.Metadata().(*greenplum.HBARulesMetadata)
}

// Response retrieves the operation response.
func (o *HBARuleBatchUpdateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *HBARuleBatchUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *HBARuleBatchUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// BatchUpdate is an operation of Yandex.Cloud Greenplum HBARule service.
// It returns an object which should be used to monitor the operation state.
func (c hbaRuleClient) BatchUpdate(ctx context.Context, in *greenplum.BatchUpdateHBARulesRequest, opts ...grpc.CallOption) (*HBARuleBatchUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleBatchUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewHBARuleServiceClient(connection).BatchUpdate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.HBARulesMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &HBARuleBatchUpdateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c hbaRuleClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, HBARuleOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	HBARuleList            = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.List")
	HBARuleListAtRevision  = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.ListAtRevision")
	HBARuleCreate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.Create")
	HBARuleUpdate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.Update")
	HBARuleDelete          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.Delete")
	HBARuleBatchUpdate     = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.HBARuleService.BatchUpdate")
	HBARuleOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
