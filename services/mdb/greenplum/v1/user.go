// Code generated by sdkgen-v2. DO NOT EDIT.
package greenplumsdk

import (
	"context"

	greenplum "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserClient provides methods for managing User resources of Yandex.Cloud Greenplum.
type UserClient interface {
	List(context.Context, *greenplum.ListUsersRequest, ...grpc.CallOption) (*greenplum.ListUsersResponse, error)
	Create(context.Context, *greenplum.CreateUserRequest, ...grpc.CallOption) (*UserCreateOperation, error)
	Update(context.Context, *greenplum.UpdateUserRequest, ...grpc.CallOption) (*UserUpdateOperation, error)
	Delete(context.Context, *greenplum.DeleteUserRequest, ...grpc.CallOption) (*UserDeleteOperation, error)
}

var _ UserClient = userClient{}

type userClient struct {
	connector transport.Connector
}

// NewUserClient returns UserClient implementation.
func NewUserClient(connector transport.Connector) UserClient {
	return userClient{connector}
}

// List is an operation of Yandex.Cloud Greenplum User service.
func (c userClient) List(ctx context.Context, in *greenplum.ListUsersRequest, opts ...grpc.CallOption) (*greenplum.ListUsersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserList, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewUserServiceClient(connection).List(ctx, in, opts...)
}

// UserCreateOperation is used to monitor the state of Create operations.
type UserCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserCreateOperation) Metadata() *greenplum.CreateUserMetadata {
	return o.Operation.Metadata().(*greenplum.CreateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserCreateOperation) Response() *greenplum.User {
	return o.Operation.Response().(*greenplum.User)
}

// Wait polls the operation until it's done.
func (o *UserCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.User)
	return response, err
}

// Create is an operation of Yandex.Cloud Greenplum User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Create(ctx context.Context, in *greenplum.CreateUserRequest, opts ...grpc.CallOption) (*UserCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewUserServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.CreateUserMetadata)(nil),
		ResponseType: (*greenplum.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserCreateOperation{*op}, nil
}

// UserUpdateOperation is used to monitor the state of Update operations.
type UserUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserUpdateOperation) Metadata() *greenplum.UpdateUserMetadata {
	return o.Operation.Metadata().(*greenplum.UpdateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserUpdateOperation) Response() *greenplum.User {
	return o.Operation.Response().(*greenplum.User)
}

// Wait polls the operation until it's done.
func (o *UserUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.User)
	return response, err
}

// Update is an operation of Yandex.Cloud Greenplum User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Update(ctx context.Context, in *greenplum.UpdateUserRequest, opts ...grpc.CallOption) (*UserUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewUserServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.UpdateUserMetadata)(nil),
		ResponseType: (*greenplum.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserUpdateOperation{*op}, nil
}

// UserDeleteOperation is used to monitor the state of Delete operations.
type UserDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserDeleteOperation) Metadata() *greenplum.DeleteUserMetadata {
	return o.Operation.Metadata().(*greenplum.DeleteUserMetadata)
}

// Response retrieves the operation response.
func (o *UserDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Greenplum User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Delete(ctx context.Context, in *greenplum.DeleteUserRequest, opts ...grpc.CallOption) (*UserDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewUserServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.DeleteUserMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c userClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserList            = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.UserService.List")
	UserCreate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.UserService.Create")
	UserUpdate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.UserService.Update")
	UserDelete          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.UserService.Delete")
	UserOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
