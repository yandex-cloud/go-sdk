// Code generated by sdkgen-v2. DO NOT EDIT.
package greenplumsdk

import (
	"context"

	greenplum "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ResourceGroupClient provides methods for managing ResourceGroup resources of Yandex.Cloud Greenplum.
type ResourceGroupClient interface {
	List(context.Context, *greenplum.ListResourceGroupsRequest, ...grpc.CallOption) (*greenplum.ListResourceGroupsResponse, error)
	GetAtRevision(context.Context, *greenplum.GetResourceGroupAtRevisionRequest, ...grpc.CallOption) (*greenplum.ResourceGroup, error)
	Create(context.Context, *greenplum.CreateResourceGroupRequest, ...grpc.CallOption) (*ResourceGroupCreateOperation, error)
	Update(context.Context, *greenplum.UpdateResourceGroupRequest, ...grpc.CallOption) (*ResourceGroupUpdateOperation, error)
	Delete(context.Context, *greenplum.DeleteResourceGroupRequest, ...grpc.CallOption) (*ResourceGroupDeleteOperation, error)
}

var _ ResourceGroupClient = resourceGroupClient{}

type resourceGroupClient struct {
	connector transport.Connector
}

// NewResourceGroupClient returns ResourceGroupClient implementation.
func NewResourceGroupClient(connector transport.Connector) ResourceGroupClient {
	return resourceGroupClient{connector}
}

// List is an operation of Yandex.Cloud Greenplum ResourceGroup service.
func (c resourceGroupClient) List(ctx context.Context, in *greenplum.ListResourceGroupsRequest, opts ...grpc.CallOption) (*greenplum.ListResourceGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewResourceGroupServiceClient(connection).List(ctx, in, opts...)
}

// GetAtRevision is an operation of Yandex.Cloud Greenplum ResourceGroup service.
func (c resourceGroupClient) GetAtRevision(ctx context.Context, in *greenplum.GetResourceGroupAtRevisionRequest, opts ...grpc.CallOption) (*greenplum.ResourceGroup, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupGetAtRevision, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewResourceGroupServiceClient(connection).GetAtRevision(ctx, in, opts...)
}

// ResourceGroupCreateOperation is used to monitor the state of Create operations.
type ResourceGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceGroupCreateOperation) Metadata() *greenplum.CreateResourceGroupMetadata {
	return o.Operation.Metadata().(*greenplum.CreateResourceGroupMetadata)
}

// Response retrieves the operation response.
func (o *ResourceGroupCreateOperation) Response() *greenplum.ResourceGroup {
	return o.Operation.Response().(*greenplum.ResourceGroup)
}

// Wait polls the operation until it's done.
func (o *ResourceGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.ResourceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.ResourceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.ResourceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.ResourceGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Greenplum ResourceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c resourceGroupClient) Create(ctx context.Context, in *greenplum.CreateResourceGroupRequest, opts ...grpc.CallOption) (*ResourceGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewResourceGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.CreateResourceGroupMetadata)(nil),
		ResponseType: (*greenplum.ResourceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceGroupCreateOperation{*op}, nil
}

// ResourceGroupUpdateOperation is used to monitor the state of Update operations.
type ResourceGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceGroupUpdateOperation) Metadata() *greenplum.UpdateResourceGroupMetadata {
	return o.Operation.Metadata().(*greenplum.UpdateResourceGroupMetadata)
}

// Response retrieves the operation response.
func (o *ResourceGroupUpdateOperation) Response() *greenplum.ResourceGroup {
	return o.Operation.Response().(*greenplum.ResourceGroup)
}

// Wait polls the operation until it's done.
func (o *ResourceGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.ResourceGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.ResourceGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.ResourceGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.ResourceGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Greenplum ResourceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c resourceGroupClient) Update(ctx context.Context, in *greenplum.UpdateResourceGroupRequest, opts ...grpc.CallOption) (*ResourceGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewResourceGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.UpdateResourceGroupMetadata)(nil),
		ResponseType: (*greenplum.ResourceGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceGroupUpdateOperation{*op}, nil
}

// ResourceGroupDeleteOperation is used to monitor the state of Delete operations.
type ResourceGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceGroupDeleteOperation) Metadata() *greenplum.DeleteResourceGroupMetadata {
	return o.Operation.Metadata().(*greenplum.DeleteResourceGroupMetadata)
}

// Response retrieves the operation response.
func (o *ResourceGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ResourceGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Greenplum ResourceGroup service.
// It returns an object which should be used to monitor the operation state.
func (c resourceGroupClient) Delete(ctx context.Context, in *greenplum.DeleteResourceGroupRequest, opts ...grpc.CallOption) (*ResourceGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewResourceGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.DeleteResourceGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceGroupDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c resourceGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ResourceGroupList            = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.ResourceGroupService.List")
	ResourceGroupGetAtRevision   = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.ResourceGroupService.GetAtRevision")
	ResourceGroupCreate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.ResourceGroupService.Create")
	ResourceGroupUpdate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.ResourceGroupService.Update")
	ResourceGroupDelete          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.ResourceGroupService.Delete")
	ResourceGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
