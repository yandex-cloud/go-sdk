// Code generated by sdkgen-v2. DO NOT EDIT.
package greenplumsdk

import (
	"context"

	greenplum "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PXFDatasourceClient provides methods for managing PXFDatasource resources of Yandex.Cloud Greenplum.
type PXFDatasourceClient interface {
	List(context.Context, *greenplum.ListPXFDatasourcesRequest, ...grpc.CallOption) (*greenplum.ListPXFDatasourcesResponse, error)
	Create(context.Context, *greenplum.CreatePXFDatasourceRequest, ...grpc.CallOption) (*PXFDatasourceCreateOperation, error)
	Update(context.Context, *greenplum.UpdatePXFDatasourceRequest, ...grpc.CallOption) (*PXFDatasourceUpdateOperation, error)
	Delete(context.Context, *greenplum.DeletePXFDatasourceRequest, ...grpc.CallOption) (*PXFDatasourceDeleteOperation, error)
}

var _ PXFDatasourceClient = pxfDatasourceClient{}

type pxfDatasourceClient struct {
	connector transport.Connector
}

// NewPXFDatasourceClient returns PXFDatasourceClient implementation.
func NewPXFDatasourceClient(connector transport.Connector) PXFDatasourceClient {
	return pxfDatasourceClient{connector}
}

// List is an operation of Yandex.Cloud Greenplum PXFDatasource service.
func (c pxfDatasourceClient) List(ctx context.Context, in *greenplum.ListPXFDatasourcesRequest, opts ...grpc.CallOption) (*greenplum.ListPXFDatasourcesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PXFDatasourceList, opts...)
	if err != nil {
		return nil, err
	}
	return greenplum.NewPXFDatasourceServiceClient(connection).List(ctx, in, opts...)
}

// PXFDatasourceCreateOperation is used to monitor the state of Create operations.
type PXFDatasourceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PXFDatasourceCreateOperation) Metadata() *greenplum.CreatePXFDatasourceMetadata {
	return o.Operation.Metadata().(*greenplum.CreatePXFDatasourceMetadata)
}

// Response retrieves the operation response.
func (o *PXFDatasourceCreateOperation) Response() *greenplum.PXFDatasource {
	return o.Operation.Response().(*greenplum.PXFDatasource)
}

// Wait polls the operation until it's done.
func (o *PXFDatasourceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.PXFDatasource, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.PXFDatasource)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PXFDatasourceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.PXFDatasource, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.PXFDatasource)
	return response, err
}

// Create is an operation of Yandex.Cloud Greenplum PXFDatasource service.
// It returns an object which should be used to monitor the operation state.
func (c pxfDatasourceClient) Create(ctx context.Context, in *greenplum.CreatePXFDatasourceRequest, opts ...grpc.CallOption) (*PXFDatasourceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PXFDatasourceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewPXFDatasourceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.CreatePXFDatasourceMetadata)(nil),
		ResponseType: (*greenplum.PXFDatasource)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PXFDatasourceCreateOperation{*op}, nil
}

// PXFDatasourceUpdateOperation is used to monitor the state of Update operations.
type PXFDatasourceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PXFDatasourceUpdateOperation) Metadata() *greenplum.UpdatePXFDatasourceMetadata {
	return o.Operation.Metadata().(*greenplum.UpdatePXFDatasourceMetadata)
}

// Response retrieves the operation response.
func (o *PXFDatasourceUpdateOperation) Response() *greenplum.PXFDatasource {
	return o.Operation.Response().(*greenplum.PXFDatasource)
}

// Wait polls the operation until it's done.
func (o *PXFDatasourceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*greenplum.PXFDatasource, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*greenplum.PXFDatasource)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PXFDatasourceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*greenplum.PXFDatasource, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*greenplum.PXFDatasource)
	return response, err
}

// Update is an operation of Yandex.Cloud Greenplum PXFDatasource service.
// It returns an object which should be used to monitor the operation state.
func (c pxfDatasourceClient) Update(ctx context.Context, in *greenplum.UpdatePXFDatasourceRequest, opts ...grpc.CallOption) (*PXFDatasourceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PXFDatasourceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewPXFDatasourceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.UpdatePXFDatasourceMetadata)(nil),
		ResponseType: (*greenplum.PXFDatasource)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PXFDatasourceUpdateOperation{*op}, nil
}

// PXFDatasourceDeleteOperation is used to monitor the state of Delete operations.
type PXFDatasourceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PXFDatasourceDeleteOperation) Metadata() *greenplum.DeletePXFDatasourceMetadata {
	return o.Operation.Metadata().(*greenplum.DeletePXFDatasourceMetadata)
}

// Response retrieves the operation response.
func (o *PXFDatasourceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PXFDatasourceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PXFDatasourceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Greenplum PXFDatasource service.
// It returns an object which should be used to monitor the operation state.
func (c pxfDatasourceClient) Delete(ctx context.Context, in *greenplum.DeletePXFDatasourceRequest, opts ...grpc.CallOption) (*PXFDatasourceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PXFDatasourceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := greenplum.NewPXFDatasourceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*greenplum.DeletePXFDatasourceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PXFDatasourceDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c pxfDatasourceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PXFDatasourceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PXFDatasourceList            = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.PXFDatasourceService.List")
	PXFDatasourceCreate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.PXFDatasourceService.Create")
	PXFDatasourceUpdate          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.PXFDatasourceService.Update")
	PXFDatasourceDelete          = protoreflect.FullName("yandex.cloud.mdb.greenplum.v1.PXFDatasourceService.Delete")
	PXFDatasourceOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
