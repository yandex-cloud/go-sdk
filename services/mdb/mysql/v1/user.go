// Code generated by sdkgen-v2. DO NOT EDIT.
package mysqlsdk

import (
	"context"

	mysql "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// UserClient provides methods for managing User resources of Yandex.Cloud MySQL.
type UserClient interface {
	Get(context.Context, *mysql.GetUserRequest, ...grpc.CallOption) (*mysql.User, error)
	List(context.Context, *mysql.ListUsersRequest, ...grpc.CallOption) (*mysql.ListUsersResponse, error)
	Create(context.Context, *mysql.CreateUserRequest, ...grpc.CallOption) (*UserCreateOperation, error)
	Update(context.Context, *mysql.UpdateUserRequest, ...grpc.CallOption) (*UserUpdateOperation, error)
	Delete(context.Context, *mysql.DeleteUserRequest, ...grpc.CallOption) (*UserDeleteOperation, error)
	GrantPermission(context.Context, *mysql.GrantUserPermissionRequest, ...grpc.CallOption) (*UserGrantPermissionOperation, error)
	RevokePermission(context.Context, *mysql.RevokeUserPermissionRequest, ...grpc.CallOption) (*UserRevokePermissionOperation, error)
}

var _ UserClient = userClient{}

type userClient struct {
	connector transport.Connector
}

// NewUserClient returns UserClient implementation.
func NewUserClient(connector transport.Connector) UserClient {
	return userClient{connector}
}

// Get is an operation of Yandex.Cloud MySQL User service.
func (c userClient) Get(ctx context.Context, in *mysql.GetUserRequest, opts ...grpc.CallOption) (*mysql.User, error) {
	connection, err := c.connector.GetConnection(ctx, UserGet, opts...)
	if err != nil {
		return nil, err
	}
	return mysql.NewUserServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud MySQL User service.
func (c userClient) List(ctx context.Context, in *mysql.ListUsersRequest, opts ...grpc.CallOption) (*mysql.ListUsersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, UserList, opts...)
	if err != nil {
		return nil, err
	}
	return mysql.NewUserServiceClient(connection).List(ctx, in, opts...)
}

// UserCreateOperation is used to monitor the state of Create operations.
type UserCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserCreateOperation) Metadata() *mysql.CreateUserMetadata {
	return o.Operation.Metadata().(*mysql.CreateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserCreateOperation) Response() *mysql.User {
	return o.Operation.Response().(*mysql.User)
}

// Wait polls the operation until it's done.
func (o *UserCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// Create is an operation of Yandex.Cloud MySQL User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Create(ctx context.Context, in *mysql.CreateUserRequest, opts ...grpc.CallOption) (*UserCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mysql.NewUserServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*mysql.CreateUserMetadata)(nil),
		ResponseType: (*mysql.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserCreateOperation{*op}, nil
}

// UserUpdateOperation is used to monitor the state of Update operations.
type UserUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserUpdateOperation) Metadata() *mysql.UpdateUserMetadata {
	return o.Operation.Metadata().(*mysql.UpdateUserMetadata)
}

// Response retrieves the operation response.
func (o *UserUpdateOperation) Response() *mysql.User {
	return o.Operation.Response().(*mysql.User)
}

// Wait polls the operation until it's done.
func (o *UserUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// Update is an operation of Yandex.Cloud MySQL User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Update(ctx context.Context, in *mysql.UpdateUserRequest, opts ...grpc.CallOption) (*UserUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mysql.NewUserServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*mysql.UpdateUserMetadata)(nil),
		ResponseType: (*mysql.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserUpdateOperation{*op}, nil
}

// UserDeleteOperation is used to monitor the state of Delete operations.
type UserDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserDeleteOperation) Metadata() *mysql.DeleteUserMetadata {
	return o.Operation.Metadata().(*mysql.DeleteUserMetadata)
}

// Response retrieves the operation response.
func (o *UserDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *UserDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud MySQL User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) Delete(ctx context.Context, in *mysql.DeleteUserRequest, opts ...grpc.CallOption) (*UserDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mysql.NewUserServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*mysql.DeleteUserMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserDeleteOperation{*op}, nil
}

// UserGrantPermissionOperation is used to monitor the state of GrantPermission operations.
type UserGrantPermissionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserGrantPermissionOperation) Metadata() *mysql.GrantUserPermissionMetadata {
	return o.Operation.Metadata().(*mysql.GrantUserPermissionMetadata)
}

// Response retrieves the operation response.
func (o *UserGrantPermissionOperation) Response() *mysql.User {
	return o.Operation.Response().(*mysql.User)
}

// Wait polls the operation until it's done.
func (o *UserGrantPermissionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserGrantPermissionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// GrantPermission is an operation of Yandex.Cloud MySQL User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) GrantPermission(ctx context.Context, in *mysql.GrantUserPermissionRequest, opts ...grpc.CallOption) (*UserGrantPermissionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserGrantPermission, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mysql.NewUserServiceClient(connection).GrantPermission(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*mysql.GrantUserPermissionMetadata)(nil),
		ResponseType: (*mysql.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserGrantPermissionOperation{*op}, nil
}

// UserRevokePermissionOperation is used to monitor the state of RevokePermission operations.
type UserRevokePermissionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *UserRevokePermissionOperation) Metadata() *mysql.RevokeUserPermissionMetadata {
	return o.Operation.Metadata().(*mysql.RevokeUserPermissionMetadata)
}

// Response retrieves the operation response.
func (o *UserRevokePermissionOperation) Response() *mysql.User {
	return o.Operation.Response().(*mysql.User)
}

// Wait polls the operation until it's done.
func (o *UserRevokePermissionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *UserRevokePermissionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mysql.User, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mysql.User)
	return response, err
}

// RevokePermission is an operation of Yandex.Cloud MySQL User service.
// It returns an object which should be used to monitor the operation state.
func (c userClient) RevokePermission(ctx context.Context, in *mysql.RevokeUserPermissionRequest, opts ...grpc.CallOption) (*UserRevokePermissionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserRevokePermission, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mysql.NewUserServiceClient(connection).RevokePermission(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*mysql.RevokeUserPermissionMetadata)(nil),
		ResponseType: (*mysql.User)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &UserRevokePermissionOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c userClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, UserOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	UserGet              = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.Get")
	UserList             = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.List")
	UserCreate           = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.Create")
	UserUpdate           = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.Update")
	UserDelete           = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.Delete")
	UserGrantPermission  = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.GrantPermission")
	UserRevokePermission = protoreflect.FullName("yandex.cloud.mdb.mysql.v1.UserService.RevokePermission")
	UserOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
