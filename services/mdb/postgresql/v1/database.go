// Code generated by sdkgen-v2. DO NOT EDIT.
package postgresqlsdk

import (
	"context"

	postgresql "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/postgresql/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DatabaseClient provides methods for managing Database resources of Yandex.Cloud PostgreSQL.
type DatabaseClient interface {
	Get(context.Context, *postgresql.GetDatabaseRequest, ...grpc.CallOption) (*postgresql.Database, error)
	List(context.Context, *postgresql.ListDatabasesRequest, ...grpc.CallOption) (*postgresql.ListDatabasesResponse, error)
	Create(context.Context, *postgresql.CreateDatabaseRequest, ...grpc.CallOption) (*DatabaseCreateOperation, error)
	Update(context.Context, *postgresql.UpdateDatabaseRequest, ...grpc.CallOption) (*DatabaseUpdateOperation, error)
	Delete(context.Context, *postgresql.DeleteDatabaseRequest, ...grpc.CallOption) (*DatabaseDeleteOperation, error)
}

var _ DatabaseClient = databaseClient{}

type databaseClient struct {
	connector transport.Connector
}

// NewDatabaseClient returns DatabaseClient implementation.
func NewDatabaseClient(connector transport.Connector) DatabaseClient {
	return databaseClient{connector}
}

// Get is an operation of Yandex.Cloud PostgreSQL Database service.
func (c databaseClient) Get(ctx context.Context, in *postgresql.GetDatabaseRequest, opts ...grpc.CallOption) (*postgresql.Database, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseGet, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewDatabaseServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud PostgreSQL Database service.
func (c databaseClient) List(ctx context.Context, in *postgresql.ListDatabasesRequest, opts ...grpc.CallOption) (*postgresql.ListDatabasesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseList, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewDatabaseServiceClient(connection).List(ctx, in, opts...)
}

// DatabaseCreateOperation is used to monitor the state of Create operations.
type DatabaseCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseCreateOperation) Metadata() *postgresql.CreateDatabaseMetadata {
	return o.Operation.Metadata().(*postgresql.CreateDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseCreateOperation) Response() *postgresql.Database {
	return o.Operation.Response().(*postgresql.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Database)
	return response, err
}

// Create is an operation of Yandex.Cloud PostgreSQL Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Create(ctx context.Context, in *postgresql.CreateDatabaseRequest, opts ...grpc.CallOption) (*DatabaseCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewDatabaseServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*postgresql.CreateDatabaseMetadata)(nil),
		ResponseType: (*postgresql.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseCreateOperation{*op}, nil
}

// DatabaseUpdateOperation is used to monitor the state of Update operations.
type DatabaseUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseUpdateOperation) Metadata() *postgresql.UpdateDatabaseMetadata {
	return o.Operation.Metadata().(*postgresql.UpdateDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseUpdateOperation) Response() *postgresql.Database {
	return o.Operation.Response().(*postgresql.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Database)
	return response, err
}

// Update is an operation of Yandex.Cloud PostgreSQL Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Update(ctx context.Context, in *postgresql.UpdateDatabaseRequest, opts ...grpc.CallOption) (*DatabaseUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewDatabaseServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*postgresql.UpdateDatabaseMetadata)(nil),
		ResponseType: (*postgresql.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseUpdateOperation{*op}, nil
}

// DatabaseDeleteOperation is used to monitor the state of Delete operations.
type DatabaseDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseDeleteOperation) Metadata() *postgresql.DeleteDatabaseMetadata {
	return o.Operation.Metadata().(*postgresql.DeleteDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DatabaseDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud PostgreSQL Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Delete(ctx context.Context, in *postgresql.DeleteDatabaseRequest, opts ...grpc.CallOption) (*DatabaseDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewDatabaseServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*postgresql.DeleteDatabaseMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c databaseClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DatabaseGet             = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.DatabaseService.Get")
	DatabaseList            = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.DatabaseService.List")
	DatabaseCreate          = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.DatabaseService.Create")
	DatabaseUpdate          = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.DatabaseService.Update")
	DatabaseDelete          = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.DatabaseService.Delete")
	DatabaseOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
