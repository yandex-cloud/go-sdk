// Code generated by sdkgen-v2. DO NOT EDIT.
package postgresqlsdk

import (
	"context"

	postgresql "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/postgresql/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ClusterClient provides methods for managing Cluster resources of Yandex.Cloud PostgreSQL.
type ClusterClient interface {
	Get(context.Context, *postgresql.GetClusterRequest, ...grpc.CallOption) (*postgresql.Cluster, error)
	List(context.Context, *postgresql.ListClustersRequest, ...grpc.CallOption) (*postgresql.ListClustersResponse, error)
	Create(context.Context, *postgresql.CreateClusterRequest, ...grpc.CallOption) (*ClusterCreateOperation, error)
	Update(context.Context, *postgresql.UpdateClusterRequest, ...grpc.CallOption) (*ClusterUpdateOperation, error)
	Delete(context.Context, *postgresql.DeleteClusterRequest, ...grpc.CallOption) (*ClusterDeleteOperation, error)
	Start(context.Context, *postgresql.StartClusterRequest, ...grpc.CallOption) (*ClusterStartOperation, error)
	Stop(context.Context, *postgresql.StopClusterRequest, ...grpc.CallOption) (*ClusterStopOperation, error)
	Move(context.Context, *postgresql.MoveClusterRequest, ...grpc.CallOption) (*ClusterMoveOperation, error)
	Backup(context.Context, *postgresql.BackupClusterRequest, ...grpc.CallOption) (*ClusterBackupOperation, error)
	Restore(context.Context, *postgresql.RestoreClusterRequest, ...grpc.CallOption) (*ClusterRestoreOperation, error)
	RescheduleMaintenance(context.Context, *postgresql.RescheduleMaintenanceRequest, ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error)
	StartFailover(context.Context, *postgresql.StartClusterFailoverRequest, ...grpc.CallOption) (*ClusterStartFailoverOperation, error)
	ListLogs(context.Context, *postgresql.ListClusterLogsRequest, ...grpc.CallOption) (*postgresql.ListClusterLogsResponse, error)
	StreamLogs(context.Context, *postgresql.StreamClusterLogsRequest, ...grpc.CallOption) (postgresql.ClusterService_StreamLogsClient, error)
	ListOperations(context.Context, *postgresql.ListClusterOperationsRequest, ...grpc.CallOption) (*postgresql.ListClusterOperationsResponse, error)
	ListBackups(context.Context, *postgresql.ListClusterBackupsRequest, ...grpc.CallOption) (*postgresql.ListClusterBackupsResponse, error)
	ListHosts(context.Context, *postgresql.ListClusterHostsRequest, ...grpc.CallOption) (*postgresql.ListClusterHostsResponse, error)
	AddHosts(context.Context, *postgresql.AddClusterHostsRequest, ...grpc.CallOption) (*ClusterAddHostsOperation, error)
	DeleteHosts(context.Context, *postgresql.DeleteClusterHostsRequest, ...grpc.CallOption) (*ClusterDeleteHostsOperation, error)
	UpdateHosts(context.Context, *postgresql.UpdateClusterHostsRequest, ...grpc.CallOption) (*ClusterUpdateHostsOperation, error)
}

var _ ClusterClient = clusterClient{}

type clusterClient struct {
	connector transport.Connector
}

// NewClusterClient returns ClusterClient implementation.
func NewClusterClient(connector transport.Connector) ClusterClient {
	return clusterClient{connector}
}

// Get is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) Get(ctx context.Context, in *postgresql.GetClusterRequest, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) List(ctx context.Context, in *postgresql.ListClustersRequest, opts ...grpc.CallOption) (*postgresql.ListClustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterList, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).List(ctx, in, opts...)
}

// ClusterCreateOperation is used to monitor the state of Create operations.
type ClusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateOperation) Metadata() *postgresql.CreateClusterMetadata {
	return o.Operation.Metadata().(*postgresql.CreateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Create is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Create(ctx context.Context, in *postgresql.CreateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.CreateClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.CreateClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateOperation{*op}, nil
}

// ClusterUpdateOperation is used to monitor the state of Update operations.
type ClusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateOperation) Metadata() *postgresql.UpdateClusterMetadata {
	return o.Operation.Metadata().(*postgresql.UpdateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Update is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Update(ctx context.Context, in *postgresql.UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.UpdateClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.UpdateClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateOperation{*op}, nil
}

// ClusterDeleteOperation is used to monitor the state of Delete operations.
type ClusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteOperation) Metadata() *postgresql.DeleteClusterMetadata {
	return o.Operation.Metadata().(*postgresql.DeleteClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Delete(ctx context.Context, in *postgresql.DeleteClusterRequest, opts ...grpc.CallOption) (*ClusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.DeleteClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.DeleteClusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteOperation{*op}, nil
}

// ClusterStartOperation is used to monitor the state of Start operations.
type ClusterStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStartOperation) Metadata() *postgresql.StartClusterMetadata {
	return o.Operation.Metadata().(*postgresql.StartClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStartOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Start is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Start(ctx context.Context, in *postgresql.StartClusterRequest, opts ...grpc.CallOption) (*ClusterStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.StartClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.StartClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStartOperation{*op}, nil
}

// ClusterStopOperation is used to monitor the state of Stop operations.
type ClusterStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStopOperation) Metadata() *postgresql.StopClusterMetadata {
	return o.Operation.Metadata().(*postgresql.StopClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStopOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Stop is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Stop(ctx context.Context, in *postgresql.StopClusterRequest, opts ...grpc.CallOption) (*ClusterStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.StopClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.StopClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStopOperation{*op}, nil
}

// ClusterMoveOperation is used to monitor the state of Move operations.
type ClusterMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterMoveOperation) Metadata() *postgresql.MoveClusterMetadata {
	return o.Operation.Metadata().(*postgresql.MoveClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterMoveOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Move is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Move(ctx context.Context, in *postgresql.MoveClusterRequest, opts ...grpc.CallOption) (*ClusterMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.MoveClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.MoveClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterMoveOperation{*op}, nil
}

// ClusterBackupOperation is used to monitor the state of Backup operations.
type ClusterBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterBackupOperation) Metadata() *postgresql.BackupClusterMetadata {
	return o.Operation.Metadata().(*postgresql.BackupClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterBackupOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Backup is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Backup(ctx context.Context, in *postgresql.BackupClusterRequest, opts ...grpc.CallOption) (*ClusterBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Backup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.BackupClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.BackupClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterBackupOperation{*op}, nil
}

// ClusterRestoreOperation is used to monitor the state of Restore operations.
type ClusterRestoreOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRestoreOperation) Metadata() *postgresql.RestoreClusterMetadata {
	return o.Operation.Metadata().(*postgresql.RestoreClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRestoreOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRestoreOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRestoreOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// Restore is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Restore(ctx context.Context, in *postgresql.RestoreClusterRequest, opts ...grpc.CallOption) (*ClusterRestoreOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRestore, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).Restore(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.RestoreClusterMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.RestoreClusterMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRestoreOperation{*op}, nil
}

// ClusterRescheduleMaintenanceOperation is used to monitor the state of RescheduleMaintenance operations.
type ClusterRescheduleMaintenanceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRescheduleMaintenanceOperation) Metadata() *postgresql.RescheduleMaintenanceMetadata {
	return o.Operation.Metadata().(*postgresql.RescheduleMaintenanceMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRescheduleMaintenanceOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRescheduleMaintenanceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRescheduleMaintenanceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// RescheduleMaintenance is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) RescheduleMaintenance(ctx context.Context, in *postgresql.RescheduleMaintenanceRequest, opts ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRescheduleMaintenance, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).RescheduleMaintenance(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.RescheduleMaintenanceMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.RescheduleMaintenanceMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRescheduleMaintenanceOperation{*op}, nil
}

// ClusterStartFailoverOperation is used to monitor the state of StartFailover operations.
type ClusterStartFailoverOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStartFailoverOperation) Metadata() *postgresql.StartClusterFailoverMetadata {
	return o.Operation.Metadata().(*postgresql.StartClusterFailoverMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStartFailoverOperation) Response() *postgresql.Cluster {
	return o.Operation.Response().(*postgresql.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStartFailoverOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStartFailoverOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*postgresql.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*postgresql.Cluster)
	return response, err
}

// StartFailover is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) StartFailover(ctx context.Context, in *postgresql.StartClusterFailoverRequest, opts ...grpc.CallOption) (*ClusterStartFailoverOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStartFailover, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).StartFailover(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.StartClusterFailoverMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.StartClusterFailoverMetadata)(nil),
		ResponseType: (*postgresql.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStartFailoverOperation{*op}, nil
}

// ListLogs is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) ListLogs(ctx context.Context, in *postgresql.ListClusterLogsRequest, opts ...grpc.CallOption) (*postgresql.ListClusterLogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListLogs, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).ListLogs(ctx, in, opts...)
}

// StreamLogs is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) StreamLogs(ctx context.Context, in *postgresql.StreamClusterLogsRequest, opts ...grpc.CallOption) (postgresql.ClusterService_StreamLogsClient, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStreamLogs, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).StreamLogs(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) ListOperations(ctx context.Context, in *postgresql.ListClusterOperationsRequest, opts ...grpc.CallOption) (*postgresql.ListClusterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListBackups is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) ListBackups(ctx context.Context, in *postgresql.ListClusterBackupsRequest, opts ...grpc.CallOption) (*postgresql.ListClusterBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListBackups, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).ListBackups(ctx, in, opts...)
}

// ListHosts is an operation of Yandex.Cloud PostgreSQL Cluster service.
func (c clusterClient) ListHosts(ctx context.Context, in *postgresql.ListClusterHostsRequest, opts ...grpc.CallOption) (*postgresql.ListClusterHostsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListHosts, opts...)
	if err != nil {
		return nil, err
	}
	return postgresql.NewClusterServiceClient(connection).ListHosts(ctx, in, opts...)
}

// ClusterAddHostsOperation is used to monitor the state of AddHosts operations.
type ClusterAddHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddHostsOperation) Metadata() *postgresql.AddClusterHostsMetadata {
	return o.Operation.Metadata().(*postgresql.AddClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterAddHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddHosts is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddHosts(ctx context.Context, in *postgresql.AddClusterHostsRequest, opts ...grpc.CallOption) (*ClusterAddHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).AddHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.AddClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.AddClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddHostsOperation{*op}, nil
}

// ClusterDeleteHostsOperation is used to monitor the state of DeleteHosts operations.
type ClusterDeleteHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteHostsOperation) Metadata() *postgresql.DeleteClusterHostsMetadata {
	return o.Operation.Metadata().(*postgresql.DeleteClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteHosts is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteHosts(ctx context.Context, in *postgresql.DeleteClusterHostsRequest, opts ...grpc.CallOption) (*ClusterDeleteHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).DeleteHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.DeleteClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.DeleteClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteHostsOperation{*op}, nil
}

// ClusterUpdateHostsOperation is used to monitor the state of UpdateHosts operations.
type ClusterUpdateHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateHostsOperation) Metadata() *postgresql.UpdateClusterHostsMetadata {
	return o.Operation.Metadata().(*postgresql.UpdateClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateHosts is an operation of Yandex.Cloud PostgreSQL Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateHosts(ctx context.Context, in *postgresql.UpdateClusterHostsRequest, opts ...grpc.CallOption) (*ClusterUpdateHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := postgresql.NewClusterServiceClient(connection).UpdateHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*postgresql.UpdateClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*postgresql.UpdateClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateHostsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c clusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ClusterGet                   = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Get")
	ClusterList                  = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.List")
	ClusterCreate                = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Create")
	ClusterUpdate                = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Update")
	ClusterDelete                = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Delete")
	ClusterStart                 = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Start")
	ClusterStop                  = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Stop")
	ClusterMove                  = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Move")
	ClusterBackup                = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Backup")
	ClusterRestore               = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.Restore")
	ClusterRescheduleMaintenance = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.RescheduleMaintenance")
	ClusterStartFailover         = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.StartFailover")
	ClusterListLogs              = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.ListLogs")
	ClusterStreamLogs            = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.StreamLogs")
	ClusterListOperations        = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.ListOperations")
	ClusterListBackups           = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.ListBackups")
	ClusterListHosts             = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.ListHosts")
	ClusterAddHosts              = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.AddHosts")
	ClusterDeleteHosts           = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.DeleteHosts")
	ClusterUpdateHosts           = protoreflect.FullName("yandex.cloud.mdb.postgresql.v1.ClusterService.UpdateHosts")
	ClusterOperationPoller       = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
