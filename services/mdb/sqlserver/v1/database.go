// Code generated by sdkgen-v2. DO NOT EDIT.
package sqlserversdk

import (
	"context"

	sqlserver "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/sqlserver/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DatabaseClient provides methods for managing Database resources of Yandex.Cloud Sqlserver.
type DatabaseClient interface {
	Get(context.Context, *sqlserver.GetDatabaseRequest, ...grpc.CallOption) (*sqlserver.Database, error)
	List(context.Context, *sqlserver.ListDatabasesRequest, ...grpc.CallOption) (*sqlserver.ListDatabasesResponse, error)
	Create(context.Context, *sqlserver.CreateDatabaseRequest, ...grpc.CallOption) (*DatabaseCreateOperation, error)
	Restore(context.Context, *sqlserver.RestoreDatabaseRequest, ...grpc.CallOption) (*DatabaseRestoreOperation, error)
	ImportBackup(context.Context, *sqlserver.ImportDatabaseBackupRequest, ...grpc.CallOption) (*DatabaseImportBackupOperation, error)
	ExportBackup(context.Context, *sqlserver.ExportDatabaseBackupRequest, ...grpc.CallOption) (*DatabaseExportBackupOperation, error)
	Delete(context.Context, *sqlserver.DeleteDatabaseRequest, ...grpc.CallOption) (*DatabaseDeleteOperation, error)
}

var _ DatabaseClient = databaseClient{}

type databaseClient struct {
	connector transport.Connector
}

// NewDatabaseClient returns DatabaseClient implementation.
func NewDatabaseClient(connector transport.Connector) DatabaseClient {
	return databaseClient{connector}
}

// Get is an operation of Yandex.Cloud Sqlserver Database service.
func (c databaseClient) Get(ctx context.Context, in *sqlserver.GetDatabaseRequest, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseGet, opts...)
	if err != nil {
		return nil, err
	}
	return sqlserver.NewDatabaseServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Sqlserver Database service.
func (c databaseClient) List(ctx context.Context, in *sqlserver.ListDatabasesRequest, opts ...grpc.CallOption) (*sqlserver.ListDatabasesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseList, opts...)
	if err != nil {
		return nil, err
	}
	return sqlserver.NewDatabaseServiceClient(connection).List(ctx, in, opts...)
}

// DatabaseCreateOperation is used to monitor the state of Create operations.
type DatabaseCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseCreateOperation) Metadata() *sqlserver.CreateDatabaseMetadata {
	return o.Operation.Metadata().(*sqlserver.CreateDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseCreateOperation) Response() *sqlserver.Database {
	return o.Operation.Response().(*sqlserver.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// Create is an operation of Yandex.Cloud Sqlserver Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Create(ctx context.Context, in *sqlserver.CreateDatabaseRequest, opts ...grpc.CallOption) (*DatabaseCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := sqlserver.NewDatabaseServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*sqlserver.CreateDatabaseMetadata)(nil),
		ResponseType: (*sqlserver.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseCreateOperation{*op}, nil
}

// DatabaseRestoreOperation is used to monitor the state of Restore operations.
type DatabaseRestoreOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseRestoreOperation) Metadata() *sqlserver.RestoreDatabaseMetadata {
	return o.Operation.Metadata().(*sqlserver.RestoreDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseRestoreOperation) Response() *sqlserver.Database {
	return o.Operation.Response().(*sqlserver.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseRestoreOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseRestoreOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// Restore is an operation of Yandex.Cloud Sqlserver Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Restore(ctx context.Context, in *sqlserver.RestoreDatabaseRequest, opts ...grpc.CallOption) (*DatabaseRestoreOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseRestore, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := sqlserver.NewDatabaseServiceClient(connection).Restore(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*sqlserver.RestoreDatabaseMetadata)(nil),
		ResponseType: (*sqlserver.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseRestoreOperation{*op}, nil
}

// DatabaseImportBackupOperation is used to monitor the state of ImportBackup operations.
type DatabaseImportBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseImportBackupOperation) Metadata() *sqlserver.ImportDatabaseBackupMetadata {
	return o.Operation.Metadata().(*sqlserver.ImportDatabaseBackupMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseImportBackupOperation) Response() *sqlserver.Database {
	return o.Operation.Response().(*sqlserver.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseImportBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseImportBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// ImportBackup is an operation of Yandex.Cloud Sqlserver Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) ImportBackup(ctx context.Context, in *sqlserver.ImportDatabaseBackupRequest, opts ...grpc.CallOption) (*DatabaseImportBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseImportBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := sqlserver.NewDatabaseServiceClient(connection).ImportBackup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*sqlserver.ImportDatabaseBackupMetadata)(nil),
		ResponseType: (*sqlserver.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseImportBackupOperation{*op}, nil
}

// DatabaseExportBackupOperation is used to monitor the state of ExportBackup operations.
type DatabaseExportBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseExportBackupOperation) Metadata() *sqlserver.ExportDatabaseBackupMetadata {
	return o.Operation.Metadata().(*sqlserver.ExportDatabaseBackupMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseExportBackupOperation) Response() *sqlserver.Database {
	return o.Operation.Response().(*sqlserver.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseExportBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseExportBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*sqlserver.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*sqlserver.Database)
	return response, err
}

// ExportBackup is an operation of Yandex.Cloud Sqlserver Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) ExportBackup(ctx context.Context, in *sqlserver.ExportDatabaseBackupRequest, opts ...grpc.CallOption) (*DatabaseExportBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseExportBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := sqlserver.NewDatabaseServiceClient(connection).ExportBackup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*sqlserver.ExportDatabaseBackupMetadata)(nil),
		ResponseType: (*sqlserver.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseExportBackupOperation{*op}, nil
}

// DatabaseDeleteOperation is used to monitor the state of Delete operations.
type DatabaseDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseDeleteOperation) Metadata() *sqlserver.DeleteDatabaseMetadata {
	return o.Operation.Metadata().(*sqlserver.DeleteDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DatabaseDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Sqlserver Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Delete(ctx context.Context, in *sqlserver.DeleteDatabaseRequest, opts ...grpc.CallOption) (*DatabaseDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := sqlserver.NewDatabaseServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*sqlserver.DeleteDatabaseMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c databaseClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DatabaseGet             = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.Get")
	DatabaseList            = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.List")
	DatabaseCreate          = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.Create")
	DatabaseRestore         = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.Restore")
	DatabaseImportBackup    = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.ImportBackup")
	DatabaseExportBackup    = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.ExportBackup")
	DatabaseDelete          = protoreflect.FullName("yandex.cloud.mdb.sqlserver.v1.DatabaseService.Delete")
	DatabaseOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
