// Code generated by sdkgen-v2. DO NOT EDIT.
package opensearchsdk

import (
	"context"

	opensearch "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/opensearch/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ClusterClient provides methods for managing Cluster resources of Yandex.Cloud Opensearch.
type ClusterClient interface {
	Get(context.Context, *opensearch.GetClusterRequest, ...grpc.CallOption) (*opensearch.Cluster, error)
	List(context.Context, *opensearch.ListClustersRequest, ...grpc.CallOption) (*opensearch.ListClustersResponse, error)
	Create(context.Context, *opensearch.CreateClusterRequest, ...grpc.CallOption) (*ClusterCreateOperation, error)
	Update(context.Context, *opensearch.UpdateClusterRequest, ...grpc.CallOption) (*ClusterUpdateOperation, error)
	Delete(context.Context, *opensearch.DeleteClusterRequest, ...grpc.CallOption) (*ClusterDeleteOperation, error)
	Backup(context.Context, *opensearch.BackupClusterRequest, ...grpc.CallOption) (*ClusterBackupOperation, error)
	DeleteBackup(context.Context, *opensearch.DeleteBackupRequest, ...grpc.CallOption) (*ClusterDeleteBackupOperation, error)
	Restore(context.Context, *opensearch.RestoreClusterRequest, ...grpc.CallOption) (*ClusterRestoreOperation, error)
	RescheduleMaintenance(context.Context, *opensearch.RescheduleMaintenanceRequest, ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error)
	ListBackups(context.Context, *opensearch.ListClusterBackupsRequest, ...grpc.CallOption) (*opensearch.ListClusterBackupsResponse, error)
	Move(context.Context, *opensearch.MoveClusterRequest, ...grpc.CallOption) (*ClusterMoveOperation, error)
	Start(context.Context, *opensearch.StartClusterRequest, ...grpc.CallOption) (*ClusterStartOperation, error)
	Stop(context.Context, *opensearch.StopClusterRequest, ...grpc.CallOption) (*ClusterStopOperation, error)
	ListLogs(context.Context, *opensearch.ListClusterLogsRequest, ...grpc.CallOption) (*opensearch.ListClusterLogsResponse, error)
	StreamLogs(context.Context, *opensearch.StreamClusterLogsRequest, ...grpc.CallOption) (opensearch.ClusterService_StreamLogsClient, error)
	ListOperations(context.Context, *opensearch.ListClusterOperationsRequest, ...grpc.CallOption) (*opensearch.ListClusterOperationsResponse, error)
	ListHosts(context.Context, *opensearch.ListClusterHostsRequest, ...grpc.CallOption) (*opensearch.ListClusterHostsResponse, error)
	AddOpenSearchNodeGroup(context.Context, *opensearch.AddOpenSearchNodeGroupRequest, ...grpc.CallOption) (*ClusterAddOpenSearchNodeGroupOperation, error)
	DeleteOpenSearchNodeGroup(context.Context, *opensearch.DeleteOpenSearchNodeGroupRequest, ...grpc.CallOption) (*ClusterDeleteOpenSearchNodeGroupOperation, error)
	UpdateOpenSearchNodeGroup(context.Context, *opensearch.UpdateOpenSearchNodeGroupRequest, ...grpc.CallOption) (*ClusterUpdateOpenSearchNodeGroupOperation, error)
	AddDashboardsNodeGroup(context.Context, *opensearch.AddDashboardsNodeGroupRequest, ...grpc.CallOption) (*ClusterAddDashboardsNodeGroupOperation, error)
	DeleteDashboardsNodeGroup(context.Context, *opensearch.DeleteDashboardsNodeGroupRequest, ...grpc.CallOption) (*ClusterDeleteDashboardsNodeGroupOperation, error)
	UpdateDashboardsNodeGroup(context.Context, *opensearch.UpdateDashboardsNodeGroupRequest, ...grpc.CallOption) (*ClusterUpdateDashboardsNodeGroupOperation, error)
	GetAuthSettings(context.Context, *opensearch.GetAuthSettingsRequest, ...grpc.CallOption) (*opensearch.AuthSettings, error)
	UpdateAuthSettings(context.Context, *opensearch.UpdateAuthSettingsRequest, ...grpc.CallOption) (*ClusterUpdateAuthSettingsOperation, error)
	RestartOpenSearch(context.Context, *opensearch.RestartOpenSearchRequest, ...grpc.CallOption) (*ClusterRestartOpenSearchOperation, error)
	SwitchMaster(context.Context, *opensearch.SwitchMasterRequest, ...grpc.CallOption) (*ClusterSwitchMasterOperation, error)
}

var _ ClusterClient = clusterClient{}

type clusterClient struct {
	connector transport.Connector
}

// NewClusterClient returns ClusterClient implementation.
func NewClusterClient(connector transport.Connector) ClusterClient {
	return clusterClient{connector}
}

// Get is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) Get(ctx context.Context, in *opensearch.GetClusterRequest, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) List(ctx context.Context, in *opensearch.ListClustersRequest, opts ...grpc.CallOption) (*opensearch.ListClustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterList, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).List(ctx, in, opts...)
}

// ClusterCreateOperation is used to monitor the state of Create operations.
type ClusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateOperation) Metadata() *opensearch.CreateClusterMetadata {
	return o.Operation.Metadata().(*opensearch.CreateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Create is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Create(ctx context.Context, in *opensearch.CreateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.CreateClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.CreateClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateOperation{*op}, nil
}

// ClusterUpdateOperation is used to monitor the state of Update operations.
type ClusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateOperation) Metadata() *opensearch.UpdateClusterMetadata {
	return o.Operation.Metadata().(*opensearch.UpdateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Update is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Update(ctx context.Context, in *opensearch.UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.UpdateClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.UpdateClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateOperation{*op}, nil
}

// ClusterDeleteOperation is used to monitor the state of Delete operations.
type ClusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteOperation) Metadata() *opensearch.DeleteClusterMetadata {
	return o.Operation.Metadata().(*opensearch.DeleteClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Delete(ctx context.Context, in *opensearch.DeleteClusterRequest, opts ...grpc.CallOption) (*ClusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.DeleteClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.DeleteClusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteOperation{*op}, nil
}

// ClusterBackupOperation is used to monitor the state of Backup operations.
type ClusterBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterBackupOperation) Metadata() *opensearch.BackupClusterMetadata {
	return o.Operation.Metadata().(*opensearch.BackupClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterBackupOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Backup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Backup(ctx context.Context, in *opensearch.BackupClusterRequest, opts ...grpc.CallOption) (*ClusterBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Backup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.BackupClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.BackupClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterBackupOperation{*op}, nil
}

// ClusterDeleteBackupOperation is used to monitor the state of DeleteBackup operations.
type ClusterDeleteBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteBackupOperation) Metadata() *opensearch.DeleteBackupMetadata {
	return o.Operation.Metadata().(*opensearch.DeleteBackupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteBackupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteBackup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteBackup(ctx context.Context, in *opensearch.DeleteBackupRequest, opts ...grpc.CallOption) (*ClusterDeleteBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).DeleteBackup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.DeleteBackupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.DeleteBackupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteBackupOperation{*op}, nil
}

// ClusterRestoreOperation is used to monitor the state of Restore operations.
type ClusterRestoreOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRestoreOperation) Metadata() *opensearch.RestoreClusterMetadata {
	return o.Operation.Metadata().(*opensearch.RestoreClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRestoreOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRestoreOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRestoreOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Restore is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Restore(ctx context.Context, in *opensearch.RestoreClusterRequest, opts ...grpc.CallOption) (*ClusterRestoreOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRestore, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Restore(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.RestoreClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.RestoreClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRestoreOperation{*op}, nil
}

// ClusterRescheduleMaintenanceOperation is used to monitor the state of RescheduleMaintenance operations.
type ClusterRescheduleMaintenanceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRescheduleMaintenanceOperation) Metadata() *opensearch.RescheduleMaintenanceMetadata {
	return o.Operation.Metadata().(*opensearch.RescheduleMaintenanceMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRescheduleMaintenanceOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRescheduleMaintenanceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRescheduleMaintenanceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// RescheduleMaintenance is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) RescheduleMaintenance(ctx context.Context, in *opensearch.RescheduleMaintenanceRequest, opts ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRescheduleMaintenance, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).RescheduleMaintenance(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.RescheduleMaintenanceMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.RescheduleMaintenanceMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRescheduleMaintenanceOperation{*op}, nil
}

// ListBackups is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) ListBackups(ctx context.Context, in *opensearch.ListClusterBackupsRequest, opts ...grpc.CallOption) (*opensearch.ListClusterBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListBackups, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).ListBackups(ctx, in, opts...)
}

// ClusterMoveOperation is used to monitor the state of Move operations.
type ClusterMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterMoveOperation) Metadata() *opensearch.MoveClusterMetadata {
	return o.Operation.Metadata().(*opensearch.MoveClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterMoveOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Move is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Move(ctx context.Context, in *opensearch.MoveClusterRequest, opts ...grpc.CallOption) (*ClusterMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.MoveClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.MoveClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterMoveOperation{*op}, nil
}

// ClusterStartOperation is used to monitor the state of Start operations.
type ClusterStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStartOperation) Metadata() *opensearch.StartClusterMetadata {
	return o.Operation.Metadata().(*opensearch.StartClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStartOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Start is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Start(ctx context.Context, in *opensearch.StartClusterRequest, opts ...grpc.CallOption) (*ClusterStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.StartClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.StartClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStartOperation{*op}, nil
}

// ClusterStopOperation is used to monitor the state of Stop operations.
type ClusterStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStopOperation) Metadata() *opensearch.StopClusterMetadata {
	return o.Operation.Metadata().(*opensearch.StopClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStopOperation) Response() *opensearch.Cluster {
	return o.Operation.Response().(*opensearch.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Cluster)
	return response, err
}

// Stop is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Stop(ctx context.Context, in *opensearch.StopClusterRequest, opts ...grpc.CallOption) (*ClusterStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.StopClusterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.StopClusterMetadata)(nil),
		ResponseType: (*opensearch.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStopOperation{*op}, nil
}

// ListLogs is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) ListLogs(ctx context.Context, in *opensearch.ListClusterLogsRequest, opts ...grpc.CallOption) (*opensearch.ListClusterLogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListLogs, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).ListLogs(ctx, in, opts...)
}

// StreamLogs is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) StreamLogs(ctx context.Context, in *opensearch.StreamClusterLogsRequest, opts ...grpc.CallOption) (opensearch.ClusterService_StreamLogsClient, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStreamLogs, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).StreamLogs(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) ListOperations(ctx context.Context, in *opensearch.ListClusterOperationsRequest, opts ...grpc.CallOption) (*opensearch.ListClusterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListHosts is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) ListHosts(ctx context.Context, in *opensearch.ListClusterHostsRequest, opts ...grpc.CallOption) (*opensearch.ListClusterHostsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListHosts, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).ListHosts(ctx, in, opts...)
}

// ClusterAddOpenSearchNodeGroupOperation is used to monitor the state of AddOpenSearchNodeGroup operations.
type ClusterAddOpenSearchNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddOpenSearchNodeGroupOperation) Metadata() *opensearch.AddNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.AddNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddOpenSearchNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterAddOpenSearchNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddOpenSearchNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddOpenSearchNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddOpenSearchNodeGroup(ctx context.Context, in *opensearch.AddOpenSearchNodeGroupRequest, opts ...grpc.CallOption) (*ClusterAddOpenSearchNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddOpenSearchNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).AddOpenSearchNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.AddNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.AddNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddOpenSearchNodeGroupOperation{*op}, nil
}

// ClusterDeleteOpenSearchNodeGroupOperation is used to monitor the state of DeleteOpenSearchNodeGroup operations.
type ClusterDeleteOpenSearchNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteOpenSearchNodeGroupOperation) Metadata() *opensearch.DeleteNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.DeleteNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteOpenSearchNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteOpenSearchNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteOpenSearchNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteOpenSearchNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteOpenSearchNodeGroup(ctx context.Context, in *opensearch.DeleteOpenSearchNodeGroupRequest, opts ...grpc.CallOption) (*ClusterDeleteOpenSearchNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteOpenSearchNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).DeleteOpenSearchNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.DeleteNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.DeleteNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteOpenSearchNodeGroupOperation{*op}, nil
}

// ClusterUpdateOpenSearchNodeGroupOperation is used to monitor the state of UpdateOpenSearchNodeGroup operations.
type ClusterUpdateOpenSearchNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateOpenSearchNodeGroupOperation) Metadata() *opensearch.UpdateNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.UpdateNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateOpenSearchNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateOpenSearchNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateOpenSearchNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateOpenSearchNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateOpenSearchNodeGroup(ctx context.Context, in *opensearch.UpdateOpenSearchNodeGroupRequest, opts ...grpc.CallOption) (*ClusterUpdateOpenSearchNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateOpenSearchNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).UpdateOpenSearchNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.UpdateNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.UpdateNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateOpenSearchNodeGroupOperation{*op}, nil
}

// ClusterAddDashboardsNodeGroupOperation is used to monitor the state of AddDashboardsNodeGroup operations.
type ClusterAddDashboardsNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddDashboardsNodeGroupOperation) Metadata() *opensearch.AddNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.AddNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddDashboardsNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterAddDashboardsNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddDashboardsNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddDashboardsNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddDashboardsNodeGroup(ctx context.Context, in *opensearch.AddDashboardsNodeGroupRequest, opts ...grpc.CallOption) (*ClusterAddDashboardsNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddDashboardsNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).AddDashboardsNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.AddNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.AddNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddDashboardsNodeGroupOperation{*op}, nil
}

// ClusterDeleteDashboardsNodeGroupOperation is used to monitor the state of DeleteDashboardsNodeGroup operations.
type ClusterDeleteDashboardsNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteDashboardsNodeGroupOperation) Metadata() *opensearch.DeleteNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.DeleteNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteDashboardsNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteDashboardsNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteDashboardsNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteDashboardsNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteDashboardsNodeGroup(ctx context.Context, in *opensearch.DeleteDashboardsNodeGroupRequest, opts ...grpc.CallOption) (*ClusterDeleteDashboardsNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteDashboardsNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).DeleteDashboardsNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.DeleteNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.DeleteNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteDashboardsNodeGroupOperation{*op}, nil
}

// ClusterUpdateDashboardsNodeGroupOperation is used to monitor the state of UpdateDashboardsNodeGroup operations.
type ClusterUpdateDashboardsNodeGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateDashboardsNodeGroupOperation) Metadata() *opensearch.UpdateNodeGroupMetadata {
	return o.Operation.Metadata().(*opensearch.UpdateNodeGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateDashboardsNodeGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateDashboardsNodeGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateDashboardsNodeGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateDashboardsNodeGroup is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateDashboardsNodeGroup(ctx context.Context, in *opensearch.UpdateDashboardsNodeGroupRequest, opts ...grpc.CallOption) (*ClusterUpdateDashboardsNodeGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateDashboardsNodeGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).UpdateDashboardsNodeGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.UpdateNodeGroupMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.UpdateNodeGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateDashboardsNodeGroupOperation{*op}, nil
}

// GetAuthSettings is an operation of Yandex.Cloud Opensearch Cluster service.
func (c clusterClient) GetAuthSettings(ctx context.Context, in *opensearch.GetAuthSettingsRequest, opts ...grpc.CallOption) (*opensearch.AuthSettings, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGetAuthSettings, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewClusterServiceClient(connection).GetAuthSettings(ctx, in, opts...)
}

// ClusterUpdateAuthSettingsOperation is used to monitor the state of UpdateAuthSettings operations.
type ClusterUpdateAuthSettingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateAuthSettingsOperation) Metadata() *opensearch.UpdateAuthSettingsMetadata {
	return o.Operation.Metadata().(*opensearch.UpdateAuthSettingsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateAuthSettingsOperation) Response() *opensearch.AuthSettings {
	return o.Operation.Response().(*opensearch.AuthSettings)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateAuthSettingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.AuthSettings, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.AuthSettings)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateAuthSettingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.AuthSettings, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.AuthSettings)
	return response, err
}

// UpdateAuthSettings is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateAuthSettings(ctx context.Context, in *opensearch.UpdateAuthSettingsRequest, opts ...grpc.CallOption) (*ClusterUpdateAuthSettingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateAuthSettings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).UpdateAuthSettings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.UpdateAuthSettingsMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.UpdateAuthSettingsMetadata)(nil),
		ResponseType: (*opensearch.AuthSettings)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateAuthSettingsOperation{*op}, nil
}

// ClusterRestartOpenSearchOperation is used to monitor the state of RestartOpenSearch operations.
type ClusterRestartOpenSearchOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRestartOpenSearchOperation) Metadata() *opensearch.RestartOpenSearchMetadata {
	return o.Operation.Metadata().(*opensearch.RestartOpenSearchMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRestartOpenSearchOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterRestartOpenSearchOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRestartOpenSearchOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RestartOpenSearch is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) RestartOpenSearch(ctx context.Context, in *opensearch.RestartOpenSearchRequest, opts ...grpc.CallOption) (*ClusterRestartOpenSearchOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRestartOpenSearch, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).RestartOpenSearch(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.RestartOpenSearchMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.RestartOpenSearchMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRestartOpenSearchOperation{*op}, nil
}

// ClusterSwitchMasterOperation is used to monitor the state of SwitchMaster operations.
type ClusterSwitchMasterOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterSwitchMasterOperation) Metadata() *opensearch.SwitchMasterMetadata {
	return o.Operation.Metadata().(*opensearch.SwitchMasterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterSwitchMasterOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterSwitchMasterOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterSwitchMasterOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SwitchMaster is an operation of Yandex.Cloud Opensearch Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) SwitchMaster(ctx context.Context, in *opensearch.SwitchMasterRequest, opts ...grpc.CallOption) (*ClusterSwitchMasterOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterSwitchMaster, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewClusterServiceClient(connection).SwitchMaster(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.SwitchMasterMetadata).GetClusterId()
		},
		MetadataType: (*opensearch.SwitchMasterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterSwitchMasterOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c clusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ClusterGet                       = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Get")
	ClusterList                      = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.List")
	ClusterCreate                    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Create")
	ClusterUpdate                    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Update")
	ClusterDelete                    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Delete")
	ClusterBackup                    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Backup")
	ClusterDeleteBackup              = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.DeleteBackup")
	ClusterRestore                   = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Restore")
	ClusterRescheduleMaintenance     = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.RescheduleMaintenance")
	ClusterListBackups               = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.ListBackups")
	ClusterMove                      = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Move")
	ClusterStart                     = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Start")
	ClusterStop                      = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.Stop")
	ClusterListLogs                  = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.ListLogs")
	ClusterStreamLogs                = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.StreamLogs")
	ClusterListOperations            = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.ListOperations")
	ClusterListHosts                 = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.ListHosts")
	ClusterAddOpenSearchNodeGroup    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.AddOpenSearchNodeGroup")
	ClusterDeleteOpenSearchNodeGroup = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.DeleteOpenSearchNodeGroup")
	ClusterUpdateOpenSearchNodeGroup = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.UpdateOpenSearchNodeGroup")
	ClusterAddDashboardsNodeGroup    = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.AddDashboardsNodeGroup")
	ClusterDeleteDashboardsNodeGroup = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.DeleteDashboardsNodeGroup")
	ClusterUpdateDashboardsNodeGroup = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.UpdateDashboardsNodeGroup")
	ClusterGetAuthSettings           = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.GetAuthSettings")
	ClusterUpdateAuthSettings        = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.UpdateAuthSettings")
	ClusterRestartOpenSearch         = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.RestartOpenSearch")
	ClusterSwitchMaster              = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ClusterService.SwitchMaster")
	ClusterOperationPoller           = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
