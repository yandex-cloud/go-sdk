// Code generated by sdkgen-v2. DO NOT EDIT.
package opensearchsdk

import (
	"context"

	opensearch "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/opensearch/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ExtensionClient provides methods for managing Extension resources of Yandex.Cloud Opensearch.
type ExtensionClient interface {
	Get(context.Context, *opensearch.GetExtensionRequest, ...grpc.CallOption) (*opensearch.Extension, error)
	List(context.Context, *opensearch.ListExtensionsRequest, ...grpc.CallOption) (*opensearch.ListExtensionsResponse, error)
	Create(context.Context, *opensearch.CreateExtensionRequest, ...grpc.CallOption) (*ExtensionCreateOperation, error)
	Update(context.Context, *opensearch.UpdateExtensionRequest, ...grpc.CallOption) (*ExtensionUpdateOperation, error)
	Delete(context.Context, *opensearch.DeleteExtensionRequest, ...grpc.CallOption) (*ExtensionDeleteOperation, error)
}

var _ ExtensionClient = extensionClient{}

type extensionClient struct {
	connector transport.Connector
}

// NewExtensionClient returns ExtensionClient implementation.
func NewExtensionClient(connector transport.Connector) ExtensionClient {
	return extensionClient{connector}
}

// Get is an operation of Yandex.Cloud Opensearch Extension service.
func (c extensionClient) Get(ctx context.Context, in *opensearch.GetExtensionRequest, opts ...grpc.CallOption) (*opensearch.Extension, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionGet, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewExtensionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Opensearch Extension service.
func (c extensionClient) List(ctx context.Context, in *opensearch.ListExtensionsRequest, opts ...grpc.CallOption) (*opensearch.ListExtensionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionList, opts...)
	if err != nil {
		return nil, err
	}
	return opensearch.NewExtensionServiceClient(connection).List(ctx, in, opts...)
}

// ExtensionCreateOperation is used to monitor the state of Create operations.
type ExtensionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExtensionCreateOperation) Metadata() *opensearch.CreateExtensionMetadata {
	return o.Operation.Metadata().(*opensearch.CreateExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ExtensionCreateOperation) Response() *opensearch.Extension {
	return o.Operation.Response().(*opensearch.Extension)
}

// Wait polls the operation until it's done.
func (o *ExtensionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Extension, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Extension)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExtensionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Extension, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Extension)
	return response, err
}

// Create is an operation of Yandex.Cloud Opensearch Extension service.
// It returns an object which should be used to monitor the operation state.
func (c extensionClient) Create(ctx context.Context, in *opensearch.CreateExtensionRequest, opts ...grpc.CallOption) (*ExtensionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewExtensionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.CreateExtensionMetadata).GetExtensionId()
		},
		MetadataType: (*opensearch.CreateExtensionMetadata)(nil),
		ResponseType: (*opensearch.Extension)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExtensionCreateOperation{*op}, nil
}

// ExtensionUpdateOperation is used to monitor the state of Update operations.
type ExtensionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExtensionUpdateOperation) Metadata() *opensearch.UpdateExtensionMetadata {
	return o.Operation.Metadata().(*opensearch.UpdateExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ExtensionUpdateOperation) Response() *opensearch.Extension {
	return o.Operation.Response().(*opensearch.Extension)
}

// Wait polls the operation until it's done.
func (o *ExtensionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*opensearch.Extension, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*opensearch.Extension)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExtensionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*opensearch.Extension, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*opensearch.Extension)
	return response, err
}

// Update is an operation of Yandex.Cloud Opensearch Extension service.
// It returns an object which should be used to monitor the operation state.
func (c extensionClient) Update(ctx context.Context, in *opensearch.UpdateExtensionRequest, opts ...grpc.CallOption) (*ExtensionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewExtensionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.UpdateExtensionMetadata).GetExtensionId()
		},
		MetadataType: (*opensearch.UpdateExtensionMetadata)(nil),
		ResponseType: (*opensearch.Extension)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExtensionUpdateOperation{*op}, nil
}

// ExtensionDeleteOperation is used to monitor the state of Delete operations.
type ExtensionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ExtensionDeleteOperation) Metadata() *opensearch.DeleteExtensionMetadata {
	return o.Operation.Metadata().(*opensearch.DeleteExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ExtensionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ExtensionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ExtensionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Opensearch Extension service.
// It returns an object which should be used to monitor the operation state.
func (c extensionClient) Delete(ctx context.Context, in *opensearch.DeleteExtensionRequest, opts ...grpc.CallOption) (*ExtensionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := opensearch.NewExtensionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*opensearch.DeleteExtensionMetadata).GetExtensionId()
		},
		MetadataType: (*opensearch.DeleteExtensionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ExtensionDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c extensionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ExtensionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ExtensionGet             = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ExtensionService.Get")
	ExtensionList            = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ExtensionService.List")
	ExtensionCreate          = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ExtensionService.Create")
	ExtensionUpdate          = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ExtensionService.Update")
	ExtensionDelete          = protoreflect.FullName("yandex.cloud.mdb.opensearch.v1.ExtensionService.Delete")
	ExtensionOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
