// Code generated by sdkgen-v2. DO NOT EDIT.
package clickhousesdk

import (
	"context"

	clickhouse "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BackupClient provides methods for managing Backup resources of Yandex.Cloud Clickhouse.
type BackupClient interface {
	Get(context.Context, *clickhouse.GetBackupRequest, ...grpc.CallOption) (*clickhouse.Backup, error)
	List(context.Context, *clickhouse.ListBackupsRequest, ...grpc.CallOption) (*clickhouse.ListBackupsResponse, error)
	Delete(context.Context, *clickhouse.DeleteBackupRequest, ...grpc.CallOption) (*BackupDeleteOperation, error)
}

var _ BackupClient = backupClient{}

type backupClient struct {
	connector transport.Connector
}

// NewBackupClient returns BackupClient implementation.
func NewBackupClient(connector transport.Connector) BackupClient {
	return backupClient{connector}
}

// Get is an operation of Yandex.Cloud Clickhouse Backup service.
func (c backupClient) Get(ctx context.Context, in *clickhouse.GetBackupRequest, opts ...grpc.CallOption) (*clickhouse.Backup, error) {
	connection, err := c.connector.GetConnection(ctx, BackupGet, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewBackupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Clickhouse Backup service.
func (c backupClient) List(ctx context.Context, in *clickhouse.ListBackupsRequest, opts ...grpc.CallOption) (*clickhouse.ListBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupList, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewBackupServiceClient(connection).List(ctx, in, opts...)
}

// BackupDeleteOperation is used to monitor the state of Delete operations.
type BackupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupDeleteOperation) Metadata() *clickhouse.DeleteBackupMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteBackupMetadata)
}

// Response retrieves the operation response.
func (o *BackupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Clickhouse Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) Delete(ctx context.Context, in *clickhouse.DeleteBackupRequest, opts ...grpc.CallOption) (*BackupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewBackupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteBackupMetadata).GetBackupId()
		},
		MetadataType: (*clickhouse.DeleteBackupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c backupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BackupGet             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.BackupService.Get")
	BackupList            = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.BackupService.List")
	BackupDelete          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.BackupService.Delete")
	BackupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
