// Code generated by sdkgen-v2. DO NOT EDIT.
package clickhousesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	clickhouse "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ClusterClient provides methods for managing Cluster resources of Yandex.Cloud Clickhouse.
type ClusterClient interface {
	Get(context.Context, *clickhouse.GetClusterRequest, ...grpc.CallOption) (*clickhouse.Cluster, error)
	List(context.Context, *clickhouse.ListClustersRequest, ...grpc.CallOption) (*clickhouse.ListClustersResponse, error)
	Create(context.Context, *clickhouse.CreateClusterRequest, ...grpc.CallOption) (*ClusterCreateOperation, error)
	Update(context.Context, *clickhouse.UpdateClusterRequest, ...grpc.CallOption) (*ClusterUpdateOperation, error)
	Delete(context.Context, *clickhouse.DeleteClusterRequest, ...grpc.CallOption) (*ClusterDeleteOperation, error)
	Start(context.Context, *clickhouse.StartClusterRequest, ...grpc.CallOption) (*ClusterStartOperation, error)
	Stop(context.Context, *clickhouse.StopClusterRequest, ...grpc.CallOption) (*ClusterStopOperation, error)
	Move(context.Context, *clickhouse.MoveClusterRequest, ...grpc.CallOption) (*ClusterMoveOperation, error)
	AddZookeeper(context.Context, *clickhouse.AddClusterZookeeperRequest, ...grpc.CallOption) (*ClusterAddZookeeperOperation, error)
	Backup(context.Context, *clickhouse.BackupClusterRequest, ...grpc.CallOption) (*ClusterBackupOperation, error)
	Restore(context.Context, *clickhouse.RestoreClusterRequest, ...grpc.CallOption) (*ClusterRestoreOperation, error)
	RescheduleMaintenance(context.Context, *clickhouse.RescheduleMaintenanceRequest, ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error)
	ListLogs(context.Context, *clickhouse.ListClusterLogsRequest, ...grpc.CallOption) (*clickhouse.ListClusterLogsResponse, error)
	StreamLogs(context.Context, *clickhouse.StreamClusterLogsRequest, ...grpc.CallOption) (clickhouse.ClusterService_StreamLogsClient, error)
	ListOperations(context.Context, *clickhouse.ListClusterOperationsRequest, ...grpc.CallOption) (*clickhouse.ListClusterOperationsResponse, error)
	ListBackups(context.Context, *clickhouse.ListClusterBackupsRequest, ...grpc.CallOption) (*clickhouse.ListClusterBackupsResponse, error)
	ListHosts(context.Context, *clickhouse.ListClusterHostsRequest, ...grpc.CallOption) (*clickhouse.ListClusterHostsResponse, error)
	AddHosts(context.Context, *clickhouse.AddClusterHostsRequest, ...grpc.CallOption) (*ClusterAddHostsOperation, error)
	UpdateHosts(context.Context, *clickhouse.UpdateClusterHostsRequest, ...grpc.CallOption) (*ClusterUpdateHostsOperation, error)
	DeleteHosts(context.Context, *clickhouse.DeleteClusterHostsRequest, ...grpc.CallOption) (*ClusterDeleteHostsOperation, error)
	RestartHosts(context.Context, *clickhouse.RestartClusterHostsRequest, ...grpc.CallOption) (*ClusterRestartHostsOperation, error)
	GetShard(context.Context, *clickhouse.GetClusterShardRequest, ...grpc.CallOption) (*clickhouse.Shard, error)
	ListShards(context.Context, *clickhouse.ListClusterShardsRequest, ...grpc.CallOption) (*clickhouse.ListClusterShardsResponse, error)
	AddShard(context.Context, *clickhouse.AddClusterShardRequest, ...grpc.CallOption) (*ClusterAddShardOperation, error)
	AddShards(context.Context, *clickhouse.AddClusterShardsRequest, ...grpc.CallOption) (*ClusterAddShardsOperation, error)
	UpdateShard(context.Context, *clickhouse.UpdateClusterShardRequest, ...grpc.CallOption) (*ClusterUpdateShardOperation, error)
	DeleteShard(context.Context, *clickhouse.DeleteClusterShardRequest, ...grpc.CallOption) (*ClusterDeleteShardOperation, error)
	DeleteShards(context.Context, *clickhouse.DeleteClusterShardsRequest, ...grpc.CallOption) (*ClusterDeleteShardsOperation, error)
	GetShardGroup(context.Context, *clickhouse.GetClusterShardGroupRequest, ...grpc.CallOption) (*clickhouse.ShardGroup, error)
	ListShardGroups(context.Context, *clickhouse.ListClusterShardGroupsRequest, ...grpc.CallOption) (*clickhouse.ListClusterShardGroupsResponse, error)
	CreateShardGroup(context.Context, *clickhouse.CreateClusterShardGroupRequest, ...grpc.CallOption) (*ClusterCreateShardGroupOperation, error)
	UpdateShardGroup(context.Context, *clickhouse.UpdateClusterShardGroupRequest, ...grpc.CallOption) (*ClusterUpdateShardGroupOperation, error)
	DeleteShardGroup(context.Context, *clickhouse.DeleteClusterShardGroupRequest, ...grpc.CallOption) (*ClusterDeleteShardGroupOperation, error)
	ListExternalDictionaries(context.Context, *clickhouse.ListClusterExternalDictionariesRequest, ...grpc.CallOption) (*clickhouse.ListClusterExternalDictionariesResponse, error)
	CreateExternalDictionary(context.Context, *clickhouse.CreateClusterExternalDictionaryRequest, ...grpc.CallOption) (*ClusterCreateExternalDictionaryOperation, error)
	UpdateExternalDictionary(context.Context, *clickhouse.UpdateClusterExternalDictionaryRequest, ...grpc.CallOption) (*ClusterUpdateExternalDictionaryOperation, error)
	DeleteExternalDictionary(context.Context, *clickhouse.DeleteClusterExternalDictionaryRequest, ...grpc.CallOption) (*ClusterDeleteExternalDictionaryOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ClusterSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ClusterUpdateAccessBindingsOperation, error)
}

var _ ClusterClient = clusterClient{}

type clusterClient struct {
	connector transport.Connector
}

// NewClusterClient returns ClusterClient implementation.
func NewClusterClient(connector transport.Connector) ClusterClient {
	return clusterClient{connector}
}

// Get is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) Get(ctx context.Context, in *clickhouse.GetClusterRequest, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGet, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) List(ctx context.Context, in *clickhouse.ListClustersRequest, opts ...grpc.CallOption) (*clickhouse.ListClustersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterList, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).List(ctx, in, opts...)
}

// ClusterCreateOperation is used to monitor the state of Create operations.
type ClusterCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateOperation) Metadata() *clickhouse.CreateClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Create is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Create(ctx context.Context, in *clickhouse.CreateClusterRequest, opts ...grpc.CallOption) (*ClusterCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.CreateClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.CreateClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateOperation{*op}, nil
}

// ClusterUpdateOperation is used to monitor the state of Update operations.
type ClusterUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateOperation) Metadata() *clickhouse.UpdateClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Update is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Update(ctx context.Context, in *clickhouse.UpdateClusterRequest, opts ...grpc.CallOption) (*ClusterUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.UpdateClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.UpdateClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateOperation{*op}, nil
}

// ClusterDeleteOperation is used to monitor the state of Delete operations.
type ClusterDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteOperation) Metadata() *clickhouse.DeleteClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Delete(ctx context.Context, in *clickhouse.DeleteClusterRequest, opts ...grpc.CallOption) (*ClusterDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteOperation{*op}, nil
}

// ClusterStartOperation is used to monitor the state of Start operations.
type ClusterStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStartOperation) Metadata() *clickhouse.StartClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.StartClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStartOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Start is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Start(ctx context.Context, in *clickhouse.StartClusterRequest, opts ...grpc.CallOption) (*ClusterStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.StartClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.StartClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStartOperation{*op}, nil
}

// ClusterStopOperation is used to monitor the state of Stop operations.
type ClusterStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterStopOperation) Metadata() *clickhouse.StopClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.StopClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterStopOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Stop is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Stop(ctx context.Context, in *clickhouse.StopClusterRequest, opts ...grpc.CallOption) (*ClusterStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.StopClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.StopClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterStopOperation{*op}, nil
}

// ClusterMoveOperation is used to monitor the state of Move operations.
type ClusterMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterMoveOperation) Metadata() *clickhouse.MoveClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.MoveClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterMoveOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Move is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Move(ctx context.Context, in *clickhouse.MoveClusterRequest, opts ...grpc.CallOption) (*ClusterMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.MoveClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.MoveClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterMoveOperation{*op}, nil
}

// ClusterAddZookeeperOperation is used to monitor the state of AddZookeeper operations.
type ClusterAddZookeeperOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddZookeeperOperation) Metadata() *clickhouse.AddClusterZookeeperMetadata {
	return o.Operation.Metadata().(*clickhouse.AddClusterZookeeperMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddZookeeperOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterAddZookeeperOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddZookeeperOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// AddZookeeper is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddZookeeper(ctx context.Context, in *clickhouse.AddClusterZookeeperRequest, opts ...grpc.CallOption) (*ClusterAddZookeeperOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddZookeeper, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).AddZookeeper(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.AddClusterZookeeperMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.AddClusterZookeeperMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddZookeeperOperation{*op}, nil
}

// ClusterBackupOperation is used to monitor the state of Backup operations.
type ClusterBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterBackupOperation) Metadata() *clickhouse.BackupClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.BackupClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterBackupOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Backup is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Backup(ctx context.Context, in *clickhouse.BackupClusterRequest, opts ...grpc.CallOption) (*ClusterBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Backup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.BackupClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.BackupClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterBackupOperation{*op}, nil
}

// ClusterRestoreOperation is used to monitor the state of Restore operations.
type ClusterRestoreOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRestoreOperation) Metadata() *clickhouse.RestoreClusterMetadata {
	return o.Operation.Metadata().(*clickhouse.RestoreClusterMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRestoreOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRestoreOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRestoreOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// Restore is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) Restore(ctx context.Context, in *clickhouse.RestoreClusterRequest, opts ...grpc.CallOption) (*ClusterRestoreOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRestore, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).Restore(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.RestoreClusterMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.RestoreClusterMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRestoreOperation{*op}, nil
}

// ClusterRescheduleMaintenanceOperation is used to monitor the state of RescheduleMaintenance operations.
type ClusterRescheduleMaintenanceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRescheduleMaintenanceOperation) Metadata() *clickhouse.RescheduleMaintenanceMetadata {
	return o.Operation.Metadata().(*clickhouse.RescheduleMaintenanceMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRescheduleMaintenanceOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterRescheduleMaintenanceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRescheduleMaintenanceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// RescheduleMaintenance is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) RescheduleMaintenance(ctx context.Context, in *clickhouse.RescheduleMaintenanceRequest, opts ...grpc.CallOption) (*ClusterRescheduleMaintenanceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRescheduleMaintenance, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).RescheduleMaintenance(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.RescheduleMaintenanceMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.RescheduleMaintenanceMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRescheduleMaintenanceOperation{*op}, nil
}

// ListLogs is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListLogs(ctx context.Context, in *clickhouse.ListClusterLogsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterLogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListLogs, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListLogs(ctx, in, opts...)
}

// StreamLogs is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) StreamLogs(ctx context.Context, in *clickhouse.StreamClusterLogsRequest, opts ...grpc.CallOption) (clickhouse.ClusterService_StreamLogsClient, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterStreamLogs, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).StreamLogs(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListOperations(ctx context.Context, in *clickhouse.ListClusterOperationsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListBackups is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListBackups(ctx context.Context, in *clickhouse.ListClusterBackupsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListBackups, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListBackups(ctx, in, opts...)
}

// ListHosts is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListHosts(ctx context.Context, in *clickhouse.ListClusterHostsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterHostsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListHosts, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListHosts(ctx, in, opts...)
}

// ClusterAddHostsOperation is used to monitor the state of AddHosts operations.
type ClusterAddHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddHostsOperation) Metadata() *clickhouse.AddClusterHostsMetadata {
	return o.Operation.Metadata().(*clickhouse.AddClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterAddHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddHosts is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddHosts(ctx context.Context, in *clickhouse.AddClusterHostsRequest, opts ...grpc.CallOption) (*ClusterAddHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).AddHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.AddClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.AddClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddHostsOperation{*op}, nil
}

// ClusterUpdateHostsOperation is used to monitor the state of UpdateHosts operations.
type ClusterUpdateHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateHostsOperation) Metadata() *clickhouse.UpdateClusterHostsMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateHosts is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateHosts(ctx context.Context, in *clickhouse.UpdateClusterHostsRequest, opts ...grpc.CallOption) (*ClusterUpdateHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).UpdateHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.UpdateClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.UpdateClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateHostsOperation{*op}, nil
}

// ClusterDeleteHostsOperation is used to monitor the state of DeleteHosts operations.
type ClusterDeleteHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteHostsOperation) Metadata() *clickhouse.DeleteClusterHostsMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteHosts is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteHosts(ctx context.Context, in *clickhouse.DeleteClusterHostsRequest, opts ...grpc.CallOption) (*ClusterDeleteHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).DeleteHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteHostsOperation{*op}, nil
}

// ClusterRestartHostsOperation is used to monitor the state of RestartHosts operations.
type ClusterRestartHostsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterRestartHostsOperation) Metadata() *clickhouse.RestartClusterHostsMetadata {
	return o.Operation.Metadata().(*clickhouse.RestartClusterHostsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterRestartHostsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterRestartHostsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterRestartHostsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RestartHosts is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) RestartHosts(ctx context.Context, in *clickhouse.RestartClusterHostsRequest, opts ...grpc.CallOption) (*ClusterRestartHostsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterRestartHosts, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).RestartHosts(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.RestartClusterHostsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.RestartClusterHostsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterRestartHostsOperation{*op}, nil
}

// GetShard is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) GetShard(ctx context.Context, in *clickhouse.GetClusterShardRequest, opts ...grpc.CallOption) (*clickhouse.Shard, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGetShard, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).GetShard(ctx, in, opts...)
}

// ListShards is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListShards(ctx context.Context, in *clickhouse.ListClusterShardsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterShardsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListShards, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListShards(ctx, in, opts...)
}

// ClusterAddShardOperation is used to monitor the state of AddShard operations.
type ClusterAddShardOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddShardOperation) Metadata() *clickhouse.AddClusterShardMetadata {
	return o.Operation.Metadata().(*clickhouse.AddClusterShardMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddShardOperation) Response() *clickhouse.Shard {
	return o.Operation.Response().(*clickhouse.Shard)
}

// Wait polls the operation until it's done.
func (o *ClusterAddShardOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Shard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Shard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddShardOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Shard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Shard)
	return response, err
}

// AddShard is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddShard(ctx context.Context, in *clickhouse.AddClusterShardRequest, opts ...grpc.CallOption) (*ClusterAddShardOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddShard, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).AddShard(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.AddClusterShardMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.AddClusterShardMetadata)(nil),
		ResponseType: (*clickhouse.Shard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddShardOperation{*op}, nil
}

// ClusterAddShardsOperation is used to monitor the state of AddShards operations.
type ClusterAddShardsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterAddShardsOperation) Metadata() *clickhouse.AddClusterShardsMetadata {
	return o.Operation.Metadata().(*clickhouse.AddClusterShardsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterAddShardsOperation) Response() *clickhouse.Shards {
	return o.Operation.Response().(*clickhouse.Shards)
}

// Wait polls the operation until it's done.
func (o *ClusterAddShardsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Shards, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Shards)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterAddShardsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Shards, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Shards)
	return response, err
}

// AddShards is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) AddShards(ctx context.Context, in *clickhouse.AddClusterShardsRequest, opts ...grpc.CallOption) (*ClusterAddShardsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterAddShards, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).AddShards(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.AddClusterShardsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.AddClusterShardsMetadata)(nil),
		ResponseType: (*clickhouse.Shards)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterAddShardsOperation{*op}, nil
}

// ClusterUpdateShardOperation is used to monitor the state of UpdateShard operations.
type ClusterUpdateShardOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateShardOperation) Metadata() *clickhouse.UpdateClusterShardMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterShardMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateShardOperation) Response() *clickhouse.Shard {
	return o.Operation.Response().(*clickhouse.Shard)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateShardOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Shard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Shard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateShardOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Shard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Shard)
	return response, err
}

// UpdateShard is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateShard(ctx context.Context, in *clickhouse.UpdateClusterShardRequest, opts ...grpc.CallOption) (*ClusterUpdateShardOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateShard, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).UpdateShard(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.UpdateClusterShardMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.UpdateClusterShardMetadata)(nil),
		ResponseType: (*clickhouse.Shard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateShardOperation{*op}, nil
}

// ClusterDeleteShardOperation is used to monitor the state of DeleteShard operations.
type ClusterDeleteShardOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteShardOperation) Metadata() *clickhouse.DeleteClusterShardMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterShardMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteShardOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteShardOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteShardOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteShard is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteShard(ctx context.Context, in *clickhouse.DeleteClusterShardRequest, opts ...grpc.CallOption) (*ClusterDeleteShardOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteShard, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).DeleteShard(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterShardMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterShardMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteShardOperation{*op}, nil
}

// ClusterDeleteShardsOperation is used to monitor the state of DeleteShards operations.
type ClusterDeleteShardsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteShardsOperation) Metadata() *clickhouse.DeleteClusterShardsMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterShardsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteShardsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteShardsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteShardsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteShards is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteShards(ctx context.Context, in *clickhouse.DeleteClusterShardsRequest, opts ...grpc.CallOption) (*ClusterDeleteShardsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteShards, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).DeleteShards(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterShardsMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterShardsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteShardsOperation{*op}, nil
}

// GetShardGroup is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) GetShardGroup(ctx context.Context, in *clickhouse.GetClusterShardGroupRequest, opts ...grpc.CallOption) (*clickhouse.ShardGroup, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterGetShardGroup, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).GetShardGroup(ctx, in, opts...)
}

// ListShardGroups is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListShardGroups(ctx context.Context, in *clickhouse.ListClusterShardGroupsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterShardGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListShardGroups, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListShardGroups(ctx, in, opts...)
}

// ClusterCreateShardGroupOperation is used to monitor the state of CreateShardGroup operations.
type ClusterCreateShardGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateShardGroupOperation) Metadata() *clickhouse.CreateClusterShardGroupMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateClusterShardGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateShardGroupOperation) Response() *clickhouse.ShardGroup {
	return o.Operation.Response().(*clickhouse.ShardGroup)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateShardGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.ShardGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.ShardGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateShardGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.ShardGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.ShardGroup)
	return response, err
}

// CreateShardGroup is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) CreateShardGroup(ctx context.Context, in *clickhouse.CreateClusterShardGroupRequest, opts ...grpc.CallOption) (*ClusterCreateShardGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreateShardGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).CreateShardGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.CreateClusterShardGroupMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.CreateClusterShardGroupMetadata)(nil),
		ResponseType: (*clickhouse.ShardGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateShardGroupOperation{*op}, nil
}

// ClusterUpdateShardGroupOperation is used to monitor the state of UpdateShardGroup operations.
type ClusterUpdateShardGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateShardGroupOperation) Metadata() *clickhouse.UpdateClusterShardGroupMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterShardGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateShardGroupOperation) Response() *clickhouse.ShardGroup {
	return o.Operation.Response().(*clickhouse.ShardGroup)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateShardGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.ShardGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.ShardGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateShardGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.ShardGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.ShardGroup)
	return response, err
}

// UpdateShardGroup is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateShardGroup(ctx context.Context, in *clickhouse.UpdateClusterShardGroupRequest, opts ...grpc.CallOption) (*ClusterUpdateShardGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateShardGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).UpdateShardGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.UpdateClusterShardGroupMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.UpdateClusterShardGroupMetadata)(nil),
		ResponseType: (*clickhouse.ShardGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateShardGroupOperation{*op}, nil
}

// ClusterDeleteShardGroupOperation is used to monitor the state of DeleteShardGroup operations.
type ClusterDeleteShardGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteShardGroupOperation) Metadata() *clickhouse.DeleteClusterShardGroupMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterShardGroupMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteShardGroupOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteShardGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteShardGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteShardGroup is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteShardGroup(ctx context.Context, in *clickhouse.DeleteClusterShardGroupRequest, opts ...grpc.CallOption) (*ClusterDeleteShardGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteShardGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).DeleteShardGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterShardGroupMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterShardGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteShardGroupOperation{*op}, nil
}

// ListExternalDictionaries is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListExternalDictionaries(ctx context.Context, in *clickhouse.ListClusterExternalDictionariesRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterExternalDictionariesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListExternalDictionaries, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListExternalDictionaries(ctx, in, opts...)
}

// ClusterCreateExternalDictionaryOperation is used to monitor the state of CreateExternalDictionary operations.
type ClusterCreateExternalDictionaryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterCreateExternalDictionaryOperation) Metadata() *clickhouse.CreateClusterExternalDictionaryMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateClusterExternalDictionaryMetadata)
}

// Response retrieves the operation response.
func (o *ClusterCreateExternalDictionaryOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterCreateExternalDictionaryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterCreateExternalDictionaryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// CreateExternalDictionary is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) CreateExternalDictionary(ctx context.Context, in *clickhouse.CreateClusterExternalDictionaryRequest, opts ...grpc.CallOption) (*ClusterCreateExternalDictionaryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterCreateExternalDictionary, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).CreateExternalDictionary(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.CreateClusterExternalDictionaryMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.CreateClusterExternalDictionaryMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterCreateExternalDictionaryOperation{*op}, nil
}

// ClusterUpdateExternalDictionaryOperation is used to monitor the state of UpdateExternalDictionary operations.
type ClusterUpdateExternalDictionaryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateExternalDictionaryOperation) Metadata() *clickhouse.UpdateClusterExternalDictionaryMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterExternalDictionaryMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateExternalDictionaryOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateExternalDictionaryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateExternalDictionaryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// UpdateExternalDictionary is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateExternalDictionary(ctx context.Context, in *clickhouse.UpdateClusterExternalDictionaryRequest, opts ...grpc.CallOption) (*ClusterUpdateExternalDictionaryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateExternalDictionary, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).UpdateExternalDictionary(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.UpdateClusterExternalDictionaryMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.UpdateClusterExternalDictionaryMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateExternalDictionaryOperation{*op}, nil
}

// ClusterDeleteExternalDictionaryOperation is used to monitor the state of DeleteExternalDictionary operations.
type ClusterDeleteExternalDictionaryOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterDeleteExternalDictionaryOperation) Metadata() *clickhouse.DeleteClusterExternalDictionaryMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterExternalDictionaryMetadata)
}

// Response retrieves the operation response.
func (o *ClusterDeleteExternalDictionaryOperation) Response() *clickhouse.Cluster {
	return o.Operation.Response().(*clickhouse.Cluster)
}

// Wait polls the operation until it's done.
func (o *ClusterDeleteExternalDictionaryOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterDeleteExternalDictionaryOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.Cluster, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.Cluster)
	return response, err
}

// DeleteExternalDictionary is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) DeleteExternalDictionary(ctx context.Context, in *clickhouse.DeleteClusterExternalDictionaryRequest, opts ...grpc.CallOption) (*ClusterDeleteExternalDictionaryOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterDeleteExternalDictionary, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).DeleteExternalDictionary(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*clickhouse.DeleteClusterExternalDictionaryMetadata).GetClusterId()
		},
		MetadataType: (*clickhouse.DeleteClusterExternalDictionaryMetadata)(nil),
		ResponseType: (*clickhouse.Cluster)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterDeleteExternalDictionaryOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Clickhouse Cluster service.
func (c clusterClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ClusterSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ClusterSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *ClusterSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ClusterSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterSetAccessBindingsOperation{*op}, nil
}

// ClusterUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ClusterUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *ClusterUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Clickhouse Cluster service.
// It returns an object which should be used to monitor the operation state.
func (c clusterClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ClusterUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c clusterClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ClusterGet                      = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Get")
	ClusterList                     = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.List")
	ClusterCreate                   = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Create")
	ClusterUpdate                   = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Update")
	ClusterDelete                   = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Delete")
	ClusterStart                    = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Start")
	ClusterStop                     = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Stop")
	ClusterMove                     = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Move")
	ClusterAddZookeeper             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.AddZookeeper")
	ClusterBackup                   = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Backup")
	ClusterRestore                  = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.Restore")
	ClusterRescheduleMaintenance    = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.RescheduleMaintenance")
	ClusterListLogs                 = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListLogs")
	ClusterStreamLogs               = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.StreamLogs")
	ClusterListOperations           = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListOperations")
	ClusterListBackups              = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListBackups")
	ClusterListHosts                = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListHosts")
	ClusterAddHosts                 = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.AddHosts")
	ClusterUpdateHosts              = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateHosts")
	ClusterDeleteHosts              = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteHosts")
	ClusterRestartHosts             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.RestartHosts")
	ClusterGetShard                 = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShard")
	ClusterListShards               = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShards")
	ClusterAddShard                 = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShard")
	ClusterAddShards                = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShards")
	ClusterUpdateShard              = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShard")
	ClusterDeleteShard              = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShard")
	ClusterDeleteShards             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShards")
	ClusterGetShardGroup            = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShardGroup")
	ClusterListShardGroups          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShardGroups")
	ClusterCreateShardGroup         = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateShardGroup")
	ClusterUpdateShardGroup         = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShardGroup")
	ClusterDeleteShardGroup         = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShardGroup")
	ClusterListExternalDictionaries = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListExternalDictionaries")
	ClusterCreateExternalDictionary = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateExternalDictionary")
	ClusterUpdateExternalDictionary = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateExternalDictionary")
	ClusterDeleteExternalDictionary = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteExternalDictionary")
	ClusterListAccessBindings       = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.ListAccessBindings")
	ClusterSetAccessBindings        = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.SetAccessBindings")
	ClusterUpdateAccessBindings     = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateAccessBindings")
	ClusterOperationPoller          = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
