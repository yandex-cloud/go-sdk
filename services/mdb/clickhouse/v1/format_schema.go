// Code generated by sdkgen-v2. DO NOT EDIT.
package clickhousesdk

import (
	"context"

	clickhouse "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// FormatSchemaClient provides methods for managing FormatSchema resources of Yandex.Cloud Clickhouse.
type FormatSchemaClient interface {
	Get(context.Context, *clickhouse.GetFormatSchemaRequest, ...grpc.CallOption) (*clickhouse.FormatSchema, error)
	List(context.Context, *clickhouse.ListFormatSchemasRequest, ...grpc.CallOption) (*clickhouse.ListFormatSchemasResponse, error)
	Create(context.Context, *clickhouse.CreateFormatSchemaRequest, ...grpc.CallOption) (*FormatSchemaCreateOperation, error)
	Update(context.Context, *clickhouse.UpdateFormatSchemaRequest, ...grpc.CallOption) (*FormatSchemaUpdateOperation, error)
	Delete(context.Context, *clickhouse.DeleteFormatSchemaRequest, ...grpc.CallOption) (*FormatSchemaDeleteOperation, error)
}

var _ FormatSchemaClient = formatSchemaClient{}

type formatSchemaClient struct {
	connector transport.Connector
}

// NewFormatSchemaClient returns FormatSchemaClient implementation.
func NewFormatSchemaClient(connector transport.Connector) FormatSchemaClient {
	return formatSchemaClient{connector}
}

// Get is an operation of Yandex.Cloud Clickhouse FormatSchema service.
func (c formatSchemaClient) Get(ctx context.Context, in *clickhouse.GetFormatSchemaRequest, opts ...grpc.CallOption) (*clickhouse.FormatSchema, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaGet, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewFormatSchemaServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Clickhouse FormatSchema service.
func (c formatSchemaClient) List(ctx context.Context, in *clickhouse.ListFormatSchemasRequest, opts ...grpc.CallOption) (*clickhouse.ListFormatSchemasResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaList, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewFormatSchemaServiceClient(connection).List(ctx, in, opts...)
}

// FormatSchemaCreateOperation is used to monitor the state of Create operations.
type FormatSchemaCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FormatSchemaCreateOperation) Metadata() *clickhouse.CreateFormatSchemaMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateFormatSchemaMetadata)
}

// Response retrieves the operation response.
func (o *FormatSchemaCreateOperation) Response() *clickhouse.FormatSchema {
	return o.Operation.Response().(*clickhouse.FormatSchema)
}

// Wait polls the operation until it's done.
func (o *FormatSchemaCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.FormatSchema, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.FormatSchema)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FormatSchemaCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.FormatSchema, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.FormatSchema)
	return response, err
}

// Create is an operation of Yandex.Cloud Clickhouse FormatSchema service.
// It returns an object which should be used to monitor the operation state.
func (c formatSchemaClient) Create(ctx context.Context, in *clickhouse.CreateFormatSchemaRequest, opts ...grpc.CallOption) (*FormatSchemaCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewFormatSchemaServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.CreateFormatSchemaMetadata)(nil),
		ResponseType: (*clickhouse.FormatSchema)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FormatSchemaCreateOperation{*op}, nil
}

// FormatSchemaUpdateOperation is used to monitor the state of Update operations.
type FormatSchemaUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FormatSchemaUpdateOperation) Metadata() *clickhouse.UpdateFormatSchemaMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateFormatSchemaMetadata)
}

// Response retrieves the operation response.
func (o *FormatSchemaUpdateOperation) Response() *clickhouse.FormatSchema {
	return o.Operation.Response().(*clickhouse.FormatSchema)
}

// Wait polls the operation until it's done.
func (o *FormatSchemaUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.FormatSchema, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.FormatSchema)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FormatSchemaUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.FormatSchema, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.FormatSchema)
	return response, err
}

// Update is an operation of Yandex.Cloud Clickhouse FormatSchema service.
// It returns an object which should be used to monitor the operation state.
func (c formatSchemaClient) Update(ctx context.Context, in *clickhouse.UpdateFormatSchemaRequest, opts ...grpc.CallOption) (*FormatSchemaUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewFormatSchemaServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.UpdateFormatSchemaMetadata)(nil),
		ResponseType: (*clickhouse.FormatSchema)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FormatSchemaUpdateOperation{*op}, nil
}

// FormatSchemaDeleteOperation is used to monitor the state of Delete operations.
type FormatSchemaDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FormatSchemaDeleteOperation) Metadata() *clickhouse.DeleteFormatSchemaMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteFormatSchemaMetadata)
}

// Response retrieves the operation response.
func (o *FormatSchemaDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FormatSchemaDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FormatSchemaDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Clickhouse FormatSchema service.
// It returns an object which should be used to monitor the operation state.
func (c formatSchemaClient) Delete(ctx context.Context, in *clickhouse.DeleteFormatSchemaRequest, opts ...grpc.CallOption) (*FormatSchemaDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewFormatSchemaServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.DeleteFormatSchemaMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FormatSchemaDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c formatSchemaClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FormatSchemaOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	FormatSchemaGet             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Get")
	FormatSchemaList            = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.List")
	FormatSchemaCreate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Create")
	FormatSchemaUpdate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Update")
	FormatSchemaDelete          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Delete")
	FormatSchemaOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
