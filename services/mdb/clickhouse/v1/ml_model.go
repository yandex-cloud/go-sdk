// Code generated by sdkgen-v2. DO NOT EDIT.
package clickhousesdk

import (
	"context"

	clickhouse "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MlModelClient provides methods for managing MlModel resources of Yandex.Cloud Clickhouse.
type MlModelClient interface {
	Get(context.Context, *clickhouse.GetMlModelRequest, ...grpc.CallOption) (*clickhouse.MlModel, error)
	List(context.Context, *clickhouse.ListMlModelsRequest, ...grpc.CallOption) (*clickhouse.ListMlModelsResponse, error)
	Create(context.Context, *clickhouse.CreateMlModelRequest, ...grpc.CallOption) (*MlModelCreateOperation, error)
	Update(context.Context, *clickhouse.UpdateMlModelRequest, ...grpc.CallOption) (*MlModelUpdateOperation, error)
	Delete(context.Context, *clickhouse.DeleteMlModelRequest, ...grpc.CallOption) (*MlModelDeleteOperation, error)
}

var _ MlModelClient = mlModelClient{}

type mlModelClient struct {
	connector transport.Connector
}

// NewMlModelClient returns MlModelClient implementation.
func NewMlModelClient(connector transport.Connector) MlModelClient {
	return mlModelClient{connector}
}

// Get is an operation of Yandex.Cloud Clickhouse MlModel service.
func (c mlModelClient) Get(ctx context.Context, in *clickhouse.GetMlModelRequest, opts ...grpc.CallOption) (*clickhouse.MlModel, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelGet, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewMlModelServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Clickhouse MlModel service.
func (c mlModelClient) List(ctx context.Context, in *clickhouse.ListMlModelsRequest, opts ...grpc.CallOption) (*clickhouse.ListMlModelsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelList, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewMlModelServiceClient(connection).List(ctx, in, opts...)
}

// MlModelCreateOperation is used to monitor the state of Create operations.
type MlModelCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MlModelCreateOperation) Metadata() *clickhouse.CreateMlModelMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateMlModelMetadata)
}

// Response retrieves the operation response.
func (o *MlModelCreateOperation) Response() *clickhouse.MlModel {
	return o.Operation.Response().(*clickhouse.MlModel)
}

// Wait polls the operation until it's done.
func (o *MlModelCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.MlModel, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.MlModel)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MlModelCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.MlModel, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.MlModel)
	return response, err
}

// Create is an operation of Yandex.Cloud Clickhouse MlModel service.
// It returns an object which should be used to monitor the operation state.
func (c mlModelClient) Create(ctx context.Context, in *clickhouse.CreateMlModelRequest, opts ...grpc.CallOption) (*MlModelCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewMlModelServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.CreateMlModelMetadata)(nil),
		ResponseType: (*clickhouse.MlModel)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MlModelCreateOperation{*op}, nil
}

// MlModelUpdateOperation is used to monitor the state of Update operations.
type MlModelUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MlModelUpdateOperation) Metadata() *clickhouse.UpdateMlModelMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateMlModelMetadata)
}

// Response retrieves the operation response.
func (o *MlModelUpdateOperation) Response() *clickhouse.MlModel {
	return o.Operation.Response().(*clickhouse.MlModel)
}

// Wait polls the operation until it's done.
func (o *MlModelUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.MlModel, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.MlModel)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MlModelUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.MlModel, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.MlModel)
	return response, err
}

// Update is an operation of Yandex.Cloud Clickhouse MlModel service.
// It returns an object which should be used to monitor the operation state.
func (c mlModelClient) Update(ctx context.Context, in *clickhouse.UpdateMlModelRequest, opts ...grpc.CallOption) (*MlModelUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewMlModelServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.UpdateMlModelMetadata)(nil),
		ResponseType: (*clickhouse.MlModel)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MlModelUpdateOperation{*op}, nil
}

// MlModelDeleteOperation is used to monitor the state of Delete operations.
type MlModelDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *MlModelDeleteOperation) Metadata() *clickhouse.DeleteMlModelMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteMlModelMetadata)
}

// Response retrieves the operation response.
func (o *MlModelDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *MlModelDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *MlModelDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Clickhouse MlModel service.
// It returns an object which should be used to monitor the operation state.
func (c mlModelClient) Delete(ctx context.Context, in *clickhouse.DeleteMlModelRequest, opts ...grpc.CallOption) (*MlModelDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewMlModelServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.DeleteMlModelMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &MlModelDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c mlModelClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, MlModelOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	MlModelGet             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.MlModelService.Get")
	MlModelList            = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.MlModelService.List")
	MlModelCreate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.MlModelService.Create")
	MlModelUpdate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.MlModelService.Update")
	MlModelDelete          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.MlModelService.Delete")
	MlModelOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
