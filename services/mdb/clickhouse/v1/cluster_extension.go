// Code generated by sdkgen-v2. DO NOT EDIT.
package clickhousesdk

import (
	"context"

	clickhouse "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ClusterExtensionClient provides methods for managing ClusterExtension resources of Yandex.Cloud Clickhouse.
type ClusterExtensionClient interface {
	Get(context.Context, *clickhouse.GetClusterExtensionRequest, ...grpc.CallOption) (*clickhouse.ClusterExtension, error)
	List(context.Context, *clickhouse.ListClusterExtensionsRequest, ...grpc.CallOption) (*clickhouse.ListClusterExtensionsResponse, error)
	Create(context.Context, *clickhouse.CreateClusterExtensionRequest, ...grpc.CallOption) (*ClusterExtensionCreateOperation, error)
	Delete(context.Context, *clickhouse.DeleteClusterExtensionRequest, ...grpc.CallOption) (*ClusterExtensionDeleteOperation, error)
	Update(context.Context, *clickhouse.UpdateClusterExtensionRequest, ...grpc.CallOption) (*ClusterExtensionUpdateOperation, error)
	SetExtensions(context.Context, *clickhouse.SetClusterExtensionsRequest, ...grpc.CallOption) (*ClusterExtensionSetExtensionsOperation, error)
}

var _ ClusterExtensionClient = clusterExtensionClient{}

type clusterExtensionClient struct {
	connector transport.Connector
}

// NewClusterExtensionClient returns ClusterExtensionClient implementation.
func NewClusterExtensionClient(connector transport.Connector) ClusterExtensionClient {
	return clusterExtensionClient{connector}
}

// Get is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
func (c clusterExtensionClient) Get(ctx context.Context, in *clickhouse.GetClusterExtensionRequest, opts ...grpc.CallOption) (*clickhouse.ClusterExtension, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionGet, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterExtensionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
func (c clusterExtensionClient) List(ctx context.Context, in *clickhouse.ListClusterExtensionsRequest, opts ...grpc.CallOption) (*clickhouse.ListClusterExtensionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionList, opts...)
	if err != nil {
		return nil, err
	}
	return clickhouse.NewClusterExtensionServiceClient(connection).List(ctx, in, opts...)
}

// ClusterExtensionCreateOperation is used to monitor the state of Create operations.
type ClusterExtensionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterExtensionCreateOperation) Metadata() *clickhouse.CreateClusterExtensionMetadata {
	return o.Operation.Metadata().(*clickhouse.CreateClusterExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ClusterExtensionCreateOperation) Response() *clickhouse.ClusterExtension {
	return o.Operation.Response().(*clickhouse.ClusterExtension)
}

// Wait polls the operation until it's done.
func (o *ClusterExtensionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.ClusterExtension, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtension)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterExtensionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.ClusterExtension, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtension)
	return response, err
}

// Create is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
// It returns an object which should be used to monitor the operation state.
func (c clusterExtensionClient) Create(ctx context.Context, in *clickhouse.CreateClusterExtensionRequest, opts ...grpc.CallOption) (*ClusterExtensionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterExtensionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.CreateClusterExtensionMetadata)(nil),
		ResponseType: (*clickhouse.ClusterExtension)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterExtensionCreateOperation{*op}, nil
}

// ClusterExtensionDeleteOperation is used to monitor the state of Delete operations.
type ClusterExtensionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterExtensionDeleteOperation) Metadata() *clickhouse.DeleteClusterExtensionMetadata {
	return o.Operation.Metadata().(*clickhouse.DeleteClusterExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ClusterExtensionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ClusterExtensionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterExtensionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
// It returns an object which should be used to monitor the operation state.
func (c clusterExtensionClient) Delete(ctx context.Context, in *clickhouse.DeleteClusterExtensionRequest, opts ...grpc.CallOption) (*ClusterExtensionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterExtensionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.DeleteClusterExtensionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterExtensionDeleteOperation{*op}, nil
}

// ClusterExtensionUpdateOperation is used to monitor the state of Update operations.
type ClusterExtensionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterExtensionUpdateOperation) Metadata() *clickhouse.UpdateClusterExtensionMetadata {
	return o.Operation.Metadata().(*clickhouse.UpdateClusterExtensionMetadata)
}

// Response retrieves the operation response.
func (o *ClusterExtensionUpdateOperation) Response() *clickhouse.ClusterExtension {
	return o.Operation.Response().(*clickhouse.ClusterExtension)
}

// Wait polls the operation until it's done.
func (o *ClusterExtensionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.ClusterExtension, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtension)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterExtensionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.ClusterExtension, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtension)
	return response, err
}

// Update is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
// It returns an object which should be used to monitor the operation state.
func (c clusterExtensionClient) Update(ctx context.Context, in *clickhouse.UpdateClusterExtensionRequest, opts ...grpc.CallOption) (*ClusterExtensionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterExtensionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.UpdateClusterExtensionMetadata)(nil),
		ResponseType: (*clickhouse.ClusterExtension)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterExtensionUpdateOperation{*op}, nil
}

// ClusterExtensionSetExtensionsOperation is used to monitor the state of SetExtensions operations.
type ClusterExtensionSetExtensionsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ClusterExtensionSetExtensionsOperation) Metadata() *clickhouse.SetClusterExtensionsMetadata {
	return o.Operation.Metadata().(*clickhouse.SetClusterExtensionsMetadata)
}

// Response retrieves the operation response.
func (o *ClusterExtensionSetExtensionsOperation) Response() *clickhouse.ClusterExtensions {
	return o.Operation.Response().(*clickhouse.ClusterExtensions)
}

// Wait polls the operation until it's done.
func (o *ClusterExtensionSetExtensionsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*clickhouse.ClusterExtensions, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtensions)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ClusterExtensionSetExtensionsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*clickhouse.ClusterExtensions, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*clickhouse.ClusterExtensions)
	return response, err
}

// SetExtensions is an operation of Yandex.Cloud Clickhouse ClusterExtension service.
// It returns an object which should be used to monitor the operation state.
func (c clusterExtensionClient) SetExtensions(ctx context.Context, in *clickhouse.SetClusterExtensionsRequest, opts ...grpc.CallOption) (*ClusterExtensionSetExtensionsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionSetExtensions, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := clickhouse.NewClusterExtensionServiceClient(connection).SetExtensions(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*clickhouse.SetClusterExtensionsMetadata)(nil),
		ResponseType: (*clickhouse.ClusterExtensions)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ClusterExtensionSetExtensionsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c clusterExtensionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ClusterExtensionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ClusterExtensionGet             = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.Get")
	ClusterExtensionList            = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.List")
	ClusterExtensionCreate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.Create")
	ClusterExtensionDelete          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.Delete")
	ClusterExtensionUpdate          = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.Update")
	ClusterExtensionSetExtensions   = protoreflect.FullName("yandex.cloud.mdb.clickhouse.v1.ClusterExtensionService.SetExtensions")
	ClusterExtensionOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
