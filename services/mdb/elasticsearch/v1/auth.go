// Code generated by sdkgen-v2. DO NOT EDIT.
package elasticsearchsdk

import (
	"context"

	elasticsearch "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/elasticsearch/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AuthClient provides methods for managing Auth resources of Yandex.Cloud Elasticsearch.
type AuthClient interface {
	ListProviders(context.Context, *elasticsearch.ListAuthProvidersRequest, ...grpc.CallOption) (*elasticsearch.ListAuthProvidersResponse, error)
	GetProvider(context.Context, *elasticsearch.GetAuthProviderRequest, ...grpc.CallOption) (*elasticsearch.AuthProvider, error)
	AddProviders(context.Context, *elasticsearch.AddAuthProvidersRequest, ...grpc.CallOption) (*AuthAddProvidersOperation, error)
	UpdateProviders(context.Context, *elasticsearch.UpdateAuthProvidersRequest, ...grpc.CallOption) (*AuthUpdateProvidersOperation, error)
	DeleteProviders(context.Context, *elasticsearch.DeleteAuthProvidersRequest, ...grpc.CallOption) (*AuthDeleteProvidersOperation, error)
	UpdateProvider(context.Context, *elasticsearch.UpdateAuthProviderRequest, ...grpc.CallOption) (*AuthUpdateProviderOperation, error)
	DeleteProvider(context.Context, *elasticsearch.DeleteAuthProviderRequest, ...grpc.CallOption) (*AuthDeleteProviderOperation, error)
}

var _ AuthClient = authClient{}

type authClient struct {
	connector transport.Connector
}

// NewAuthClient returns AuthClient implementation.
func NewAuthClient(connector transport.Connector) AuthClient {
	return authClient{connector}
}

// ListProviders is an operation of Yandex.Cloud Elasticsearch Auth service.
func (c authClient) ListProviders(ctx context.Context, in *elasticsearch.ListAuthProvidersRequest, opts ...grpc.CallOption) (*elasticsearch.ListAuthProvidersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AuthListProviders, opts...)
	if err != nil {
		return nil, err
	}
	return elasticsearch.NewAuthServiceClient(connection).ListProviders(ctx, in, opts...)
}

// GetProvider is an operation of Yandex.Cloud Elasticsearch Auth service.
func (c authClient) GetProvider(ctx context.Context, in *elasticsearch.GetAuthProviderRequest, opts ...grpc.CallOption) (*elasticsearch.AuthProvider, error) {
	connection, err := c.connector.GetConnection(ctx, AuthGetProvider, opts...)
	if err != nil {
		return nil, err
	}
	return elasticsearch.NewAuthServiceClient(connection).GetProvider(ctx, in, opts...)
}

// AuthAddProvidersOperation is used to monitor the state of AddProviders operations.
type AuthAddProvidersOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AuthAddProvidersOperation) Metadata() *elasticsearch.AddAuthProvidersMetadata {
	return o.Operation.Metadata().(*elasticsearch.AddAuthProvidersMetadata)
}

// Response retrieves the operation response.
func (o *AuthAddProvidersOperation) Response() *elasticsearch.AuthProviders {
	return o.Operation.Response().(*elasticsearch.AuthProviders)
}

// Wait polls the operation until it's done.
func (o *AuthAddProvidersOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AuthAddProvidersOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// AddProviders is an operation of Yandex.Cloud Elasticsearch Auth service.
// It returns an object which should be used to monitor the operation state.
func (c authClient) AddProviders(ctx context.Context, in *elasticsearch.AddAuthProvidersRequest, opts ...grpc.CallOption) (*AuthAddProvidersOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthAddProviders, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := elasticsearch.NewAuthServiceClient(connection).AddProviders(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*elasticsearch.AddAuthProvidersMetadata)(nil),
		ResponseType: (*elasticsearch.AuthProviders)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AuthAddProvidersOperation{*op}, nil
}

// AuthUpdateProvidersOperation is used to monitor the state of UpdateProviders operations.
type AuthUpdateProvidersOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AuthUpdateProvidersOperation) Metadata() *elasticsearch.UpdateAuthProvidersMetadata {
	return o.Operation.Metadata().(*elasticsearch.UpdateAuthProvidersMetadata)
}

// Response retrieves the operation response.
func (o *AuthUpdateProvidersOperation) Response() *elasticsearch.AuthProviders {
	return o.Operation.Response().(*elasticsearch.AuthProviders)
}

// Wait polls the operation until it's done.
func (o *AuthUpdateProvidersOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AuthUpdateProvidersOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// UpdateProviders is an operation of Yandex.Cloud Elasticsearch Auth service.
// It returns an object which should be used to monitor the operation state.
func (c authClient) UpdateProviders(ctx context.Context, in *elasticsearch.UpdateAuthProvidersRequest, opts ...grpc.CallOption) (*AuthUpdateProvidersOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthUpdateProviders, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := elasticsearch.NewAuthServiceClient(connection).UpdateProviders(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*elasticsearch.UpdateAuthProvidersMetadata)(nil),
		ResponseType: (*elasticsearch.AuthProviders)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AuthUpdateProvidersOperation{*op}, nil
}

// AuthDeleteProvidersOperation is used to monitor the state of DeleteProviders operations.
type AuthDeleteProvidersOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AuthDeleteProvidersOperation) Metadata() *elasticsearch.DeleteAuthProvidersMetadata {
	return o.Operation.Metadata().(*elasticsearch.DeleteAuthProvidersMetadata)
}

// Response retrieves the operation response.
func (o *AuthDeleteProvidersOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AuthDeleteProvidersOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AuthDeleteProvidersOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteProviders is an operation of Yandex.Cloud Elasticsearch Auth service.
// It returns an object which should be used to monitor the operation state.
func (c authClient) DeleteProviders(ctx context.Context, in *elasticsearch.DeleteAuthProvidersRequest, opts ...grpc.CallOption) (*AuthDeleteProvidersOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthDeleteProviders, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := elasticsearch.NewAuthServiceClient(connection).DeleteProviders(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*elasticsearch.DeleteAuthProvidersMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AuthDeleteProvidersOperation{*op}, nil
}

// AuthUpdateProviderOperation is used to monitor the state of UpdateProvider operations.
type AuthUpdateProviderOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AuthUpdateProviderOperation) Metadata() *elasticsearch.UpdateAuthProvidersMetadata {
	return o.Operation.Metadata().(*elasticsearch.UpdateAuthProvidersMetadata)
}

// Response retrieves the operation response.
func (o *AuthUpdateProviderOperation) Response() *elasticsearch.AuthProviders {
	return o.Operation.Response().(*elasticsearch.AuthProviders)
}

// Wait polls the operation until it's done.
func (o *AuthUpdateProviderOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AuthUpdateProviderOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*elasticsearch.AuthProviders, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*elasticsearch.AuthProviders)
	return response, err
}

// UpdateProvider is an operation of Yandex.Cloud Elasticsearch Auth service.
// It returns an object which should be used to monitor the operation state.
func (c authClient) UpdateProvider(ctx context.Context, in *elasticsearch.UpdateAuthProviderRequest, opts ...grpc.CallOption) (*AuthUpdateProviderOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthUpdateProvider, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := elasticsearch.NewAuthServiceClient(connection).UpdateProvider(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*elasticsearch.UpdateAuthProvidersMetadata)(nil),
		ResponseType: (*elasticsearch.AuthProviders)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AuthUpdateProviderOperation{*op}, nil
}

// AuthDeleteProviderOperation is used to monitor the state of DeleteProvider operations.
type AuthDeleteProviderOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AuthDeleteProviderOperation) Metadata() *elasticsearch.DeleteAuthProvidersMetadata {
	return o.Operation.Metadata().(*elasticsearch.DeleteAuthProvidersMetadata)
}

// Response retrieves the operation response.
func (o *AuthDeleteProviderOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AuthDeleteProviderOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AuthDeleteProviderOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteProvider is an operation of Yandex.Cloud Elasticsearch Auth service.
// It returns an object which should be used to monitor the operation state.
func (c authClient) DeleteProvider(ctx context.Context, in *elasticsearch.DeleteAuthProviderRequest, opts ...grpc.CallOption) (*AuthDeleteProviderOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthDeleteProvider, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := elasticsearch.NewAuthServiceClient(connection).DeleteProvider(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*elasticsearch.DeleteAuthProvidersMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AuthDeleteProviderOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c authClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AuthOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AuthListProviders   = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.ListProviders")
	AuthGetProvider     = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.GetProvider")
	AuthAddProviders    = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.AddProviders")
	AuthUpdateProviders = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.UpdateProviders")
	AuthDeleteProviders = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.DeleteProviders")
	AuthUpdateProvider  = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.UpdateProvider")
	AuthDeleteProvider  = protoreflect.FullName("yandex.cloud.mdb.elasticsearch.v1.AuthService.DeleteProvider")
	AuthOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
