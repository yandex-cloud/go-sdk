// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ResourceClient provides methods for managing Resource resources of Yandex.Cloud Cdn.
type ResourceClient interface {
	Get(context.Context, *cdn.GetResourceRequest, ...grpc.CallOption) (*cdn.Resource, error)
	List(context.Context, *cdn.ListResourcesRequest, ...grpc.CallOption) (*cdn.ListResourcesResponse, error)
	Create(context.Context, *cdn.CreateResourceRequest, ...grpc.CallOption) (*ResourceCreateOperation, error)
	Update(context.Context, *cdn.UpdateResourceRequest, ...grpc.CallOption) (*ResourceUpdateOperation, error)
	Delete(context.Context, *cdn.DeleteResourceRequest, ...grpc.CallOption) (*ResourceDeleteOperation, error)
	GetProviderCName(context.Context, *cdn.GetProviderCNameRequest, ...grpc.CallOption) (*cdn.GetProviderCNameResponse, error)
}

var _ ResourceClient = resourceClient{}

type resourceClient struct {
	connector transport.Connector
}

// NewResourceClient returns ResourceClient implementation.
func NewResourceClient(connector transport.Connector) ResourceClient {
	return resourceClient{connector}
}

// Get is an operation of Yandex.Cloud Cdn Resource service.
func (c resourceClient) Get(ctx context.Context, in *cdn.GetResourceRequest, opts ...grpc.CallOption) (*cdn.Resource, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewResourceServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cdn Resource service.
func (c resourceClient) List(ctx context.Context, in *cdn.ListResourcesRequest, opts ...grpc.CallOption) (*cdn.ListResourcesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceList, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewResourceServiceClient(connection).List(ctx, in, opts...)
}

// ResourceCreateOperation is used to monitor the state of Create operations.
type ResourceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceCreateOperation) Metadata() *cdn.CreateResourceMetadata {
	return o.Operation.Metadata().(*cdn.CreateResourceMetadata)
}

// Response retrieves the operation response.
func (o *ResourceCreateOperation) Response() *cdn.Resource {
	return o.Operation.Response().(*cdn.Resource)
}

// Wait polls the operation until it's done.
func (o *ResourceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Resource, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Resource)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Resource, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Resource)
	return response, err
}

// Create is an operation of Yandex.Cloud Cdn Resource service.
// It returns an object which should be used to monitor the operation state.
func (c resourceClient) Create(ctx context.Context, in *cdn.CreateResourceRequest, opts ...grpc.CallOption) (*ResourceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cdn.CreateResourceMetadata).GetResourceId()
		},
		MetadataType: (*cdn.CreateResourceMetadata)(nil),
		ResponseType: (*cdn.Resource)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceCreateOperation{*op}, nil
}

// ResourceUpdateOperation is used to monitor the state of Update operations.
type ResourceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceUpdateOperation) Metadata() *cdn.UpdateResourceMetadata {
	return o.Operation.Metadata().(*cdn.UpdateResourceMetadata)
}

// Response retrieves the operation response.
func (o *ResourceUpdateOperation) Response() *cdn.Resource {
	return o.Operation.Response().(*cdn.Resource)
}

// Wait polls the operation until it's done.
func (o *ResourceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Resource, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Resource)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Resource, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Resource)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn Resource service.
// It returns an object which should be used to monitor the operation state.
func (c resourceClient) Update(ctx context.Context, in *cdn.UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cdn.UpdateResourceMetadata).GetResourceId()
		},
		MetadataType: (*cdn.UpdateResourceMetadata)(nil),
		ResponseType: (*cdn.Resource)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceUpdateOperation{*op}, nil
}

// ResourceDeleteOperation is used to monitor the state of Delete operations.
type ResourceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceDeleteOperation) Metadata() *cdn.DeleteResourceMetadata {
	return o.Operation.Metadata().(*cdn.DeleteResourceMetadata)
}

// Response retrieves the operation response.
func (o *ResourceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ResourceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cdn Resource service.
// It returns an object which should be used to monitor the operation state.
func (c resourceClient) Delete(ctx context.Context, in *cdn.DeleteResourceRequest, opts ...grpc.CallOption) (*ResourceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cdn.DeleteResourceMetadata).GetResourceId()
		},
		MetadataType: (*cdn.DeleteResourceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceDeleteOperation{*op}, nil
}

// GetProviderCName is an operation of Yandex.Cloud Cdn Resource service.
func (c resourceClient) GetProviderCName(ctx context.Context, in *cdn.GetProviderCNameRequest, opts ...grpc.CallOption) (*cdn.GetProviderCNameResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceGetProviderCName, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewResourceServiceClient(connection).GetProviderCName(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c resourceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ResourceGet              = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.Get")
	ResourceList             = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.List")
	ResourceCreate           = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.Create")
	ResourceUpdate           = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.Update")
	ResourceDelete           = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.Delete")
	ResourceGetProviderCName = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceService.GetProviderCName")
	ResourceOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
