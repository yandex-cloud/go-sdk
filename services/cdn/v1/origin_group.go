// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// OriginGroupClient provides methods for managing OriginGroup resources of Yandex.Cloud Cdn.
type OriginGroupClient interface {
	Get(context.Context, *cdn.GetOriginGroupRequest, ...grpc.CallOption) (*cdn.OriginGroup, error)
	List(context.Context, *cdn.ListOriginGroupsRequest, ...grpc.CallOption) (*cdn.ListOriginGroupsResponse, error)
	Create(context.Context, *cdn.CreateOriginGroupRequest, ...grpc.CallOption) (*OriginGroupCreateOperation, error)
	Update(context.Context, *cdn.UpdateOriginGroupRequest, ...grpc.CallOption) (*OriginGroupUpdateOperation, error)
	Delete(context.Context, *cdn.DeleteOriginGroupRequest, ...grpc.CallOption) (*OriginGroupDeleteOperation, error)
}

var _ OriginGroupClient = originGroupClient{}

type originGroupClient struct {
	connector transport.Connector
}

// NewOriginGroupClient returns OriginGroupClient implementation.
func NewOriginGroupClient(connector transport.Connector) OriginGroupClient {
	return originGroupClient{connector}
}

// Get is an operation of Yandex.Cloud Cdn OriginGroup service.
func (c originGroupClient) Get(ctx context.Context, in *cdn.GetOriginGroupRequest, opts ...grpc.CallOption) (*cdn.OriginGroup, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewOriginGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cdn OriginGroup service.
func (c originGroupClient) List(ctx context.Context, in *cdn.ListOriginGroupsRequest, opts ...grpc.CallOption) (*cdn.ListOriginGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewOriginGroupServiceClient(connection).List(ctx, in, opts...)
}

// OriginGroupCreateOperation is used to monitor the state of Create operations.
type OriginGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginGroupCreateOperation) Metadata() *cdn.CreateOriginGroupMetadata {
	return o.Operation.Metadata().(*cdn.CreateOriginGroupMetadata)
}

// Response retrieves the operation response.
func (o *OriginGroupCreateOperation) Response() *cdn.OriginGroup {
	return o.Operation.Response().(*cdn.OriginGroup)
}

// Wait polls the operation until it's done.
func (o *OriginGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.OriginGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.OriginGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.OriginGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.OriginGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud Cdn OriginGroup service.
// It returns an object which should be used to monitor the operation state.
func (c originGroupClient) Create(ctx context.Context, in *cdn.CreateOriginGroupRequest, opts ...grpc.CallOption) (*OriginGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.CreateOriginGroupMetadata)(nil),
		ResponseType: (*cdn.OriginGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginGroupCreateOperation{*op}, nil
}

// OriginGroupUpdateOperation is used to monitor the state of Update operations.
type OriginGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginGroupUpdateOperation) Metadata() *cdn.UpdateOriginGroupMetadata {
	return o.Operation.Metadata().(*cdn.UpdateOriginGroupMetadata)
}

// Response retrieves the operation response.
func (o *OriginGroupUpdateOperation) Response() *cdn.OriginGroup {
	return o.Operation.Response().(*cdn.OriginGroup)
}

// Wait polls the operation until it's done.
func (o *OriginGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.OriginGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.OriginGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.OriginGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.OriginGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn OriginGroup service.
// It returns an object which should be used to monitor the operation state.
func (c originGroupClient) Update(ctx context.Context, in *cdn.UpdateOriginGroupRequest, opts ...grpc.CallOption) (*OriginGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.UpdateOriginGroupMetadata)(nil),
		ResponseType: (*cdn.OriginGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginGroupUpdateOperation{*op}, nil
}

// OriginGroupDeleteOperation is used to monitor the state of Delete operations.
type OriginGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginGroupDeleteOperation) Metadata() *cdn.DeleteOriginGroupMetadata {
	return o.Operation.Metadata().(*cdn.DeleteOriginGroupMetadata)
}

// Response retrieves the operation response.
func (o *OriginGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *OriginGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cdn OriginGroup service.
// It returns an object which should be used to monitor the operation state.
func (c originGroupClient) Delete(ctx context.Context, in *cdn.DeleteOriginGroupRequest, opts ...grpc.CallOption) (*OriginGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.DeleteOriginGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginGroupDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c originGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	OriginGroupGet             = protoreflect.FullName("yandex.cloud.cdn.v1.OriginGroupService.Get")
	OriginGroupList            = protoreflect.FullName("yandex.cloud.cdn.v1.OriginGroupService.List")
	OriginGroupCreate          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginGroupService.Create")
	OriginGroupUpdate          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginGroupService.Update")
	OriginGroupDelete          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginGroupService.Delete")
	OriginGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
