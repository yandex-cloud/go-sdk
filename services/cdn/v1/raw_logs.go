// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RawLogsClient provides methods for managing RawLogs resources of Yandex.Cloud Cdn.
type RawLogsClient interface {
	Activate(context.Context, *cdn.ActivateRawLogsRequest, ...grpc.CallOption) (*RawLogsActivateOperation, error)
	Deactivate(context.Context, *cdn.DeactivateRawLogsRequest, ...grpc.CallOption) (*RawLogsDeactivateOperation, error)
	Get(context.Context, *cdn.GetRawLogsRequest, ...grpc.CallOption) (*cdn.GetRawLogsResponse, error)
	Update(context.Context, *cdn.UpdateRawLogsRequest, ...grpc.CallOption) (*RawLogsUpdateOperation, error)
}

var _ RawLogsClient = rawLogsClient{}

type rawLogsClient struct {
	connector transport.Connector
}

// NewRawLogsClient returns RawLogsClient implementation.
func NewRawLogsClient(connector transport.Connector) RawLogsClient {
	return rawLogsClient{connector}
}

// RawLogsActivateOperation is used to monitor the state of Activate operations.
type RawLogsActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RawLogsActivateOperation) Metadata() *cdn.ActivateRawLogsMetadata {
	return o.Operation.Metadata().(*cdn.ActivateRawLogsMetadata)
}

// Response retrieves the operation response.
func (o *RawLogsActivateOperation) Response() *cdn.ActivateRawLogsResponse {
	return o.Operation.Response().(*cdn.ActivateRawLogsResponse)
}

// Wait polls the operation until it's done.
func (o *RawLogsActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.ActivateRawLogsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.ActivateRawLogsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RawLogsActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.ActivateRawLogsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.ActivateRawLogsResponse)
	return response, err
}

// Activate is an operation of Yandex.Cloud Cdn RawLogs service.
// It returns an object which should be used to monitor the operation state.
func (c rawLogsClient) Activate(ctx context.Context, in *cdn.ActivateRawLogsRequest, opts ...grpc.CallOption) (*RawLogsActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RawLogsActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewRawLogsServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.ActivateRawLogsMetadata)(nil),
		ResponseType: (*cdn.ActivateRawLogsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RawLogsActivateOperation{*op}, nil
}

// RawLogsDeactivateOperation is used to monitor the state of Deactivate operations.
type RawLogsDeactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RawLogsDeactivateOperation) Metadata() *cdn.DeactivateRawLogsMetadata {
	return o.Operation.Metadata().(*cdn.DeactivateRawLogsMetadata)
}

// Response retrieves the operation response.
func (o *RawLogsDeactivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RawLogsDeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RawLogsDeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud Cdn RawLogs service.
// It returns an object which should be used to monitor the operation state.
func (c rawLogsClient) Deactivate(ctx context.Context, in *cdn.DeactivateRawLogsRequest, opts ...grpc.CallOption) (*RawLogsDeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RawLogsDeactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewRawLogsServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.DeactivateRawLogsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RawLogsDeactivateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Cdn RawLogs service.
func (c rawLogsClient) Get(ctx context.Context, in *cdn.GetRawLogsRequest, opts ...grpc.CallOption) (*cdn.GetRawLogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RawLogsGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewRawLogsServiceClient(connection).Get(ctx, in, opts...)
}

// RawLogsUpdateOperation is used to monitor the state of Update operations.
type RawLogsUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RawLogsUpdateOperation) Metadata() *cdn.UpdateRawLogsMetadata {
	return o.Operation.Metadata().(*cdn.UpdateRawLogsMetadata)
}

// Response retrieves the operation response.
func (o *RawLogsUpdateOperation) Response() *cdn.UpdateRawLogsResponse {
	return o.Operation.Response().(*cdn.UpdateRawLogsResponse)
}

// Wait polls the operation until it's done.
func (o *RawLogsUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.UpdateRawLogsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.UpdateRawLogsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RawLogsUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.UpdateRawLogsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.UpdateRawLogsResponse)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn RawLogs service.
// It returns an object which should be used to monitor the operation state.
func (c rawLogsClient) Update(ctx context.Context, in *cdn.UpdateRawLogsRequest, opts ...grpc.CallOption) (*RawLogsUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RawLogsUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewRawLogsServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.UpdateRawLogsMetadata)(nil),
		ResponseType: (*cdn.UpdateRawLogsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RawLogsUpdateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c rawLogsClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RawLogsOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RawLogsActivate        = protoreflect.FullName("yandex.cloud.cdn.v1.RawLogsService.Activate")
	RawLogsDeactivate      = protoreflect.FullName("yandex.cloud.cdn.v1.RawLogsService.Deactivate")
	RawLogsGet             = protoreflect.FullName("yandex.cloud.cdn.v1.RawLogsService.Get")
	RawLogsUpdate          = protoreflect.FullName("yandex.cloud.cdn.v1.RawLogsService.Update")
	RawLogsOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
