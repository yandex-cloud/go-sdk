// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// OriginClient provides methods for managing Origin resources of Yandex.Cloud Cdn.
type OriginClient interface {
	Get(context.Context, *cdn.GetOriginRequest, ...grpc.CallOption) (*cdn.Origin, error)
	List(context.Context, *cdn.ListOriginsRequest, ...grpc.CallOption) (*cdn.ListOriginsResponse, error)
	Create(context.Context, *cdn.CreateOriginRequest, ...grpc.CallOption) (*OriginCreateOperation, error)
	Update(context.Context, *cdn.UpdateOriginRequest, ...grpc.CallOption) (*OriginUpdateOperation, error)
	Delete(context.Context, *cdn.DeleteOriginRequest, ...grpc.CallOption) (*OriginDeleteOperation, error)
}

var _ OriginClient = originClient{}

type originClient struct {
	connector transport.Connector
}

// NewOriginClient returns OriginClient implementation.
func NewOriginClient(connector transport.Connector) OriginClient {
	return originClient{connector}
}

// Get is an operation of Yandex.Cloud Cdn Origin service.
func (c originClient) Get(ctx context.Context, in *cdn.GetOriginRequest, opts ...grpc.CallOption) (*cdn.Origin, error) {
	connection, err := c.connector.GetConnection(ctx, OriginGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewOriginServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cdn Origin service.
func (c originClient) List(ctx context.Context, in *cdn.ListOriginsRequest, opts ...grpc.CallOption) (*cdn.ListOriginsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, OriginList, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewOriginServiceClient(connection).List(ctx, in, opts...)
}

// OriginCreateOperation is used to monitor the state of Create operations.
type OriginCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginCreateOperation) Metadata() *cdn.CreateOriginMetadata {
	return o.Operation.Metadata().(*cdn.CreateOriginMetadata)
}

// Response retrieves the operation response.
func (o *OriginCreateOperation) Response() *cdn.Origin {
	return o.Operation.Response().(*cdn.Origin)
}

// Wait polls the operation until it's done.
func (o *OriginCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Origin, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Origin)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Origin, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Origin)
	return response, err
}

// Create is an operation of Yandex.Cloud Cdn Origin service.
// It returns an object which should be used to monitor the operation state.
func (c originClient) Create(ctx context.Context, in *cdn.CreateOriginRequest, opts ...grpc.CallOption) (*OriginCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.CreateOriginMetadata)(nil),
		ResponseType: (*cdn.Origin)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginCreateOperation{*op}, nil
}

// OriginUpdateOperation is used to monitor the state of Update operations.
type OriginUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginUpdateOperation) Metadata() *cdn.UpdateOriginMetadata {
	return o.Operation.Metadata().(*cdn.UpdateOriginMetadata)
}

// Response retrieves the operation response.
func (o *OriginUpdateOperation) Response() *cdn.Origin {
	return o.Operation.Response().(*cdn.Origin)
}

// Wait polls the operation until it's done.
func (o *OriginUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Origin, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Origin)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Origin, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Origin)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn Origin service.
// It returns an object which should be used to monitor the operation state.
func (c originClient) Update(ctx context.Context, in *cdn.UpdateOriginRequest, opts ...grpc.CallOption) (*OriginUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.UpdateOriginMetadata)(nil),
		ResponseType: (*cdn.Origin)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginUpdateOperation{*op}, nil
}

// OriginDeleteOperation is used to monitor the state of Delete operations.
type OriginDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *OriginDeleteOperation) Metadata() *cdn.DeleteOriginMetadata {
	return o.Operation.Metadata().(*cdn.DeleteOriginMetadata)
}

// Response retrieves the operation response.
func (o *OriginDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *OriginDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *OriginDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cdn Origin service.
// It returns an object which should be used to monitor the operation state.
func (c originClient) Delete(ctx context.Context, in *cdn.DeleteOriginRequest, opts ...grpc.CallOption) (*OriginDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewOriginServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.DeleteOriginMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &OriginDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c originClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, OriginOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	OriginGet             = protoreflect.FullName("yandex.cloud.cdn.v1.OriginService.Get")
	OriginList            = protoreflect.FullName("yandex.cloud.cdn.v1.OriginService.List")
	OriginCreate          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginService.Create")
	OriginUpdate          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginService.Update")
	OriginDelete          = protoreflect.FullName("yandex.cloud.cdn.v1.OriginService.Delete")
	OriginOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
