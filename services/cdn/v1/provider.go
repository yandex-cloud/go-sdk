// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ProviderClient provides methods for managing Provider resources of Yandex.Cloud Cdn.
type ProviderClient interface {
	Activate(context.Context, *cdn.ActivateProviderRequest, ...grpc.CallOption) (*ProviderActivateOperation, error)
	ListActivated(context.Context, *cdn.ListActivatedProvidersRequest, ...grpc.CallOption) (*cdn.ListActivatedProvidersResponse, error)
}

var _ ProviderClient = providerClient{}

type providerClient struct {
	connector transport.Connector
}

// NewProviderClient returns ProviderClient implementation.
func NewProviderClient(connector transport.Connector) ProviderClient {
	return providerClient{connector}
}

// ProviderActivateOperation is used to monitor the state of Activate operations.
type ProviderActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProviderActivateOperation) Metadata() *cdn.ActivateProviderMetadata {
	return o.Operation.Metadata().(*cdn.ActivateProviderMetadata)
}

// Response retrieves the operation response.
func (o *ProviderActivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProviderActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProviderActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Activate is an operation of Yandex.Cloud Cdn Provider service.
// It returns an object which should be used to monitor the operation state.
func (c providerClient) Activate(ctx context.Context, in *cdn.ActivateProviderRequest, opts ...grpc.CallOption) (*ProviderActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProviderActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewProviderServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.ActivateProviderMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProviderActivateOperation{*op}, nil
}

// ListActivated is an operation of Yandex.Cloud Cdn Provider service.
func (c providerClient) ListActivated(ctx context.Context, in *cdn.ListActivatedProvidersRequest, opts ...grpc.CallOption) (*cdn.ListActivatedProvidersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProviderListActivated, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewProviderServiceClient(connection).ListActivated(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c providerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProviderOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ProviderActivate        = protoreflect.FullName("yandex.cloud.cdn.v1.ProviderService.Activate")
	ProviderListActivated   = protoreflect.FullName("yandex.cloud.cdn.v1.ProviderService.ListActivated")
	ProviderOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
