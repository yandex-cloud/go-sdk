// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CacheClient provides methods for managing Cache resources of Yandex.Cloud Cdn.
type CacheClient interface {
	Purge(context.Context, *cdn.PurgeCacheRequest, ...grpc.CallOption) (*CachePurgeOperation, error)
	Prefetch(context.Context, *cdn.PrefetchCacheRequest, ...grpc.CallOption) (*CachePrefetchOperation, error)
}

var _ CacheClient = cacheClient{}

type cacheClient struct {
	connector transport.Connector
}

// NewCacheClient returns CacheClient implementation.
func NewCacheClient(connector transport.Connector) CacheClient {
	return cacheClient{connector}
}

// CachePurgeOperation is used to monitor the state of Purge operations.
type CachePurgeOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CachePurgeOperation) Metadata() *cdn.PurgeCacheMetadata {
	return o.Operation.Metadata().(*cdn.PurgeCacheMetadata)
}

// Response retrieves the operation response.
func (o *CachePurgeOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CachePurgeOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CachePurgeOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Purge is an operation of Yandex.Cloud Cdn Cache service.
// It returns an object which should be used to monitor the operation state.
func (c cacheClient) Purge(ctx context.Context, in *cdn.PurgeCacheRequest, opts ...grpc.CallOption) (*CachePurgeOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CachePurge, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewCacheServiceClient(connection).Purge(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.PurgeCacheMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CachePurgeOperation{*op}, nil
}

// CachePrefetchOperation is used to monitor the state of Prefetch operations.
type CachePrefetchOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CachePrefetchOperation) Metadata() *cdn.PrefetchCacheMetadata {
	return o.Operation.Metadata().(*cdn.PrefetchCacheMetadata)
}

// Response retrieves the operation response.
func (o *CachePrefetchOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CachePrefetchOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CachePrefetchOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Prefetch is an operation of Yandex.Cloud Cdn Cache service.
// It returns an object which should be used to monitor the operation state.
func (c cacheClient) Prefetch(ctx context.Context, in *cdn.PrefetchCacheRequest, opts ...grpc.CallOption) (*CachePrefetchOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CachePrefetch, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewCacheServiceClient(connection).Prefetch(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.PrefetchCacheMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CachePrefetchOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c cacheClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CacheOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CachePurge           = protoreflect.FullName("yandex.cloud.cdn.v1.CacheService.Purge")
	CachePrefetch        = protoreflect.FullName("yandex.cloud.cdn.v1.CacheService.Prefetch")
	CacheOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
