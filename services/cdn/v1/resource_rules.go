// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ResourceRulesClient provides methods for managing ResourceRules resources of Yandex.Cloud Cdn.
type ResourceRulesClient interface {
	List(context.Context, *cdn.ListResourceRulesRequest, ...grpc.CallOption) (*cdn.ListResourceRulesResponse, error)
	Create(context.Context, *cdn.CreateResourceRuleRequest, ...grpc.CallOption) (*ResourceRulesCreateOperation, error)
	Get(context.Context, *cdn.GetResourceRuleRequest, ...grpc.CallOption) (*cdn.Rule, error)
	Update(context.Context, *cdn.UpdateResourceRuleRequest, ...grpc.CallOption) (*ResourceRulesUpdateOperation, error)
	Delete(context.Context, *cdn.DeleteResourceRuleRequest, ...grpc.CallOption) (*ResourceRulesDeleteOperation, error)
}

var _ ResourceRulesClient = resourceRulesClient{}

type resourceRulesClient struct {
	connector transport.Connector
}

// NewResourceRulesClient returns ResourceRulesClient implementation.
func NewResourceRulesClient(connector transport.Connector) ResourceRulesClient {
	return resourceRulesClient{connector}
}

// List is an operation of Yandex.Cloud Cdn ResourceRules service.
func (c resourceRulesClient) List(ctx context.Context, in *cdn.ListResourceRulesRequest, opts ...grpc.CallOption) (*cdn.ListResourceRulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesList, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewResourceRulesServiceClient(connection).List(ctx, in, opts...)
}

// ResourceRulesCreateOperation is used to monitor the state of Create operations.
type ResourceRulesCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceRulesCreateOperation) Metadata() *cdn.CreateResourceRuleMetadata {
	return o.Operation.Metadata().(*cdn.CreateResourceRuleMetadata)
}

// Response retrieves the operation response.
func (o *ResourceRulesCreateOperation) Response() *cdn.Rule {
	return o.Operation.Response().(*cdn.Rule)
}

// Wait polls the operation until it's done.
func (o *ResourceRulesCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Rule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Rule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceRulesCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Rule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Rule)
	return response, err
}

// Create is an operation of Yandex.Cloud Cdn ResourceRules service.
// It returns an object which should be used to monitor the operation state.
func (c resourceRulesClient) Create(ctx context.Context, in *cdn.CreateResourceRuleRequest, opts ...grpc.CallOption) (*ResourceRulesCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceRulesServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.CreateResourceRuleMetadata)(nil),
		ResponseType: (*cdn.Rule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceRulesCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Cdn ResourceRules service.
func (c resourceRulesClient) Get(ctx context.Context, in *cdn.GetResourceRuleRequest, opts ...grpc.CallOption) (*cdn.Rule, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewResourceRulesServiceClient(connection).Get(ctx, in, opts...)
}

// ResourceRulesUpdateOperation is used to monitor the state of Update operations.
type ResourceRulesUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceRulesUpdateOperation) Metadata() *cdn.UpdateResourceRuleMetadata {
	return o.Operation.Metadata().(*cdn.UpdateResourceRuleMetadata)
}

// Response retrieves the operation response.
func (o *ResourceRulesUpdateOperation) Response() *cdn.Rule {
	return o.Operation.Response().(*cdn.Rule)
}

// Wait polls the operation until it's done.
func (o *ResourceRulesUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.Rule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.Rule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceRulesUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.Rule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.Rule)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn ResourceRules service.
// It returns an object which should be used to monitor the operation state.
func (c resourceRulesClient) Update(ctx context.Context, in *cdn.UpdateResourceRuleRequest, opts ...grpc.CallOption) (*ResourceRulesUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceRulesServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.UpdateResourceRuleMetadata)(nil),
		ResponseType: (*cdn.Rule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceRulesUpdateOperation{*op}, nil
}

// ResourceRulesDeleteOperation is used to monitor the state of Delete operations.
type ResourceRulesDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ResourceRulesDeleteOperation) Metadata() *cdn.DeleteResourceRuleMetadata {
	return o.Operation.Metadata().(*cdn.DeleteResourceRuleMetadata)
}

// Response retrieves the operation response.
func (o *ResourceRulesDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ResourceRulesDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ResourceRulesDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cdn ResourceRules service.
// It returns an object which should be used to monitor the operation state.
func (c resourceRulesClient) Delete(ctx context.Context, in *cdn.DeleteResourceRuleRequest, opts ...grpc.CallOption) (*ResourceRulesDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewResourceRulesServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.DeleteResourceRuleMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ResourceRulesDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c resourceRulesClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ResourceRulesOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ResourceRulesList            = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceRulesService.List")
	ResourceRulesCreate          = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceRulesService.Create")
	ResourceRulesGet             = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceRulesService.Get")
	ResourceRulesUpdate          = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceRulesService.Update")
	ResourceRulesDelete          = protoreflect.FullName("yandex.cloud.cdn.v1.ResourceRulesService.Delete")
	ResourceRulesOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
