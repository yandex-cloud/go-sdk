// Code generated by sdkgen-v2. DO NOT EDIT.
package cdnsdk

import (
	"context"

	cdn "github.com/yandex-cloud/go-genproto/yandex/cloud/cdn/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ShieldingClient provides methods for managing Shielding resources of Yandex.Cloud Cdn.
type ShieldingClient interface {
	Activate(context.Context, *cdn.ActivateShieldingRequest, ...grpc.CallOption) (*ShieldingActivateOperation, error)
	Deactivate(context.Context, *cdn.DeactivateShieldingRequest, ...grpc.CallOption) (*ShieldingDeactivateOperation, error)
	Get(context.Context, *cdn.GetShieldingDetailsRequest, ...grpc.CallOption) (*cdn.ShieldingDetails, error)
	Update(context.Context, *cdn.UpdateShieldingRequest, ...grpc.CallOption) (*ShieldingUpdateOperation, error)
	ListAvailableLocations(context.Context, *cdn.ListShieldingLocationsRequest, ...grpc.CallOption) (*cdn.ListShieldingLocationsResponse, error)
}

var _ ShieldingClient = shieldingClient{}

type shieldingClient struct {
	connector transport.Connector
}

// NewShieldingClient returns ShieldingClient implementation.
func NewShieldingClient(connector transport.Connector) ShieldingClient {
	return shieldingClient{connector}
}

// ShieldingActivateOperation is used to monitor the state of Activate operations.
type ShieldingActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ShieldingActivateOperation) Metadata() *cdn.ActivateShieldingMetadata {
	return o.Operation.Metadata().(*cdn.ActivateShieldingMetadata)
}

// Response retrieves the operation response.
func (o *ShieldingActivateOperation) Response() *cdn.ShieldingDetails {
	return o.Operation.Response().(*cdn.ShieldingDetails)
}

// Wait polls the operation until it's done.
func (o *ShieldingActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.ShieldingDetails, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.ShieldingDetails)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ShieldingActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.ShieldingDetails, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.ShieldingDetails)
	return response, err
}

// Activate is an operation of Yandex.Cloud Cdn Shielding service.
// It returns an object which should be used to monitor the operation state.
func (c shieldingClient) Activate(ctx context.Context, in *cdn.ActivateShieldingRequest, opts ...grpc.CallOption) (*ShieldingActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewShieldingServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.ActivateShieldingMetadata)(nil),
		ResponseType: (*cdn.ShieldingDetails)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ShieldingActivateOperation{*op}, nil
}

// ShieldingDeactivateOperation is used to monitor the state of Deactivate operations.
type ShieldingDeactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ShieldingDeactivateOperation) Metadata() *cdn.DeactivateShieldingMetadata {
	return o.Operation.Metadata().(*cdn.DeactivateShieldingMetadata)
}

// Response retrieves the operation response.
func (o *ShieldingDeactivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ShieldingDeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ShieldingDeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud Cdn Shielding service.
// It returns an object which should be used to monitor the operation state.
func (c shieldingClient) Deactivate(ctx context.Context, in *cdn.DeactivateShieldingRequest, opts ...grpc.CallOption) (*ShieldingDeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingDeactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewShieldingServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.DeactivateShieldingMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ShieldingDeactivateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Cdn Shielding service.
func (c shieldingClient) Get(ctx context.Context, in *cdn.GetShieldingDetailsRequest, opts ...grpc.CallOption) (*cdn.ShieldingDetails, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingGet, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewShieldingServiceClient(connection).Get(ctx, in, opts...)
}

// ShieldingUpdateOperation is used to monitor the state of Update operations.
type ShieldingUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ShieldingUpdateOperation) Metadata() *cdn.UpdateShieldingMetadata {
	return o.Operation.Metadata().(*cdn.UpdateShieldingMetadata)
}

// Response retrieves the operation response.
func (o *ShieldingUpdateOperation) Response() *cdn.ShieldingDetails {
	return o.Operation.Response().(*cdn.ShieldingDetails)
}

// Wait polls the operation until it's done.
func (o *ShieldingUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cdn.ShieldingDetails, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cdn.ShieldingDetails)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ShieldingUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cdn.ShieldingDetails, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cdn.ShieldingDetails)
	return response, err
}

// Update is an operation of Yandex.Cloud Cdn Shielding service.
// It returns an object which should be used to monitor the operation state.
func (c shieldingClient) Update(ctx context.Context, in *cdn.UpdateShieldingRequest, opts ...grpc.CallOption) (*ShieldingUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cdn.NewShieldingServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*cdn.UpdateShieldingMetadata)(nil),
		ResponseType: (*cdn.ShieldingDetails)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ShieldingUpdateOperation{*op}, nil
}

// ListAvailableLocations is an operation of Yandex.Cloud Cdn Shielding service.
func (c shieldingClient) ListAvailableLocations(ctx context.Context, in *cdn.ListShieldingLocationsRequest, opts ...grpc.CallOption) (*cdn.ListShieldingLocationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingListAvailableLocations, opts...)
	if err != nil {
		return nil, err
	}
	return cdn.NewShieldingServiceClient(connection).ListAvailableLocations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c shieldingClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ShieldingOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ShieldingActivate               = protoreflect.FullName("yandex.cloud.cdn.v1.ShieldingService.Activate")
	ShieldingDeactivate             = protoreflect.FullName("yandex.cloud.cdn.v1.ShieldingService.Deactivate")
	ShieldingGet                    = protoreflect.FullName("yandex.cloud.cdn.v1.ShieldingService.Get")
	ShieldingUpdate                 = protoreflect.FullName("yandex.cloud.cdn.v1.ShieldingService.Update")
	ShieldingListAvailableLocations = protoreflect.FullName("yandex.cloud.cdn.v1.ShieldingService.ListAvailableLocations")
	ShieldingOperationPoller        = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
