// Code generated by sdkgen-v2. DO NOT EDIT.
package ocrsdk

import (
	"context"

	ocr "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/ocr/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TextRecognitionAsyncClient provides methods for managing TextRecognitionAsync resources of Yandex.Cloud Ocr.
type TextRecognitionAsyncClient interface {
	Recognize(context.Context, *ocr.RecognizeTextRequest, ...grpc.CallOption) (*TextRecognitionAsyncRecognizeOperation, error)
	GetRecognition(context.Context, *ocr.GetRecognitionRequest, ...grpc.CallOption) (ocr.TextRecognitionAsyncService_GetRecognitionClient, error)
}

var _ TextRecognitionAsyncClient = textRecognitionAsyncClient{}

type textRecognitionAsyncClient struct {
	connector transport.Connector
}

// NewTextRecognitionAsyncClient returns TextRecognitionAsyncClient implementation.
func NewTextRecognitionAsyncClient(connector transport.Connector) TextRecognitionAsyncClient {
	return textRecognitionAsyncClient{connector}
}

// TextRecognitionAsyncRecognizeOperation is used to monitor the state of Recognize operations.
type TextRecognitionAsyncRecognizeOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *TextRecognitionAsyncRecognizeOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TextRecognitionAsyncRecognizeOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TextRecognitionAsyncRecognizeOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Recognize is an operation of Yandex.Cloud Ocr TextRecognitionAsync service.
// It returns an object which should be used to monitor the operation state.
func (c textRecognitionAsyncClient) Recognize(ctx context.Context, in *ocr.RecognizeTextRequest, opts ...grpc.CallOption) (*TextRecognitionAsyncRecognizeOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TextRecognitionAsyncRecognize, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ocr.NewTextRecognitionAsyncServiceClient(connection).Recognize(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TextRecognitionAsyncRecognizeOperation{*op}, nil
}

// GetRecognition is an operation of Yandex.Cloud Ocr TextRecognitionAsync service.
func (c textRecognitionAsyncClient) GetRecognition(ctx context.Context, in *ocr.GetRecognitionRequest, opts ...grpc.CallOption) (ocr.TextRecognitionAsyncService_GetRecognitionClient, error) {
	connection, err := c.connector.GetConnection(ctx, TextRecognitionAsyncGetRecognition, opts...)
	if err != nil {
		return nil, err
	}
	return ocr.NewTextRecognitionAsyncServiceClient(connection).GetRecognition(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c textRecognitionAsyncClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TextRecognitionAsyncOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TextRecognitionAsyncRecognize       = protoreflect.FullName("yandex.cloud.ai.ocr.v1.TextRecognitionAsyncService.Recognize")
	TextRecognitionAsyncGetRecognition  = protoreflect.FullName("yandex.cloud.ai.ocr.v1.TextRecognitionAsyncService.GetRecognition")
	TextRecognitionAsyncOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
