// Code generated by sdkgen-v2. DO NOT EDIT.
package imagegenerationsdk

import (
	"context"

	image_generation "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/foundation_models/v1/image_generation"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// ImageGenerationAsyncClient provides methods for managing ImageGenerationAsync resources of Yandex.Cloud ImageGeneration.
type ImageGenerationAsyncClient interface {
	Generate(context.Context, *image_generation.ImageGenerationRequest, ...grpc.CallOption) (*ImageGenerationAsyncGenerateOperation, error)
}

var _ ImageGenerationAsyncClient = imageGenerationAsyncClient{}

type imageGenerationAsyncClient struct {
	connector transport.Connector
}

// NewImageGenerationAsyncClient returns ImageGenerationAsyncClient implementation.
func NewImageGenerationAsyncClient(connector transport.Connector) ImageGenerationAsyncClient {
	return imageGenerationAsyncClient{connector}
}

// ImageGenerationAsyncGenerateOperation is used to monitor the state of Generate operations.
type ImageGenerationAsyncGenerateOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ImageGenerationAsyncGenerateOperation) Response() *image_generation.ImageGenerationResponse {
	return o.Operation.Response().(*image_generation.ImageGenerationResponse)
}

// Wait polls the operation until it's done.
func (o *ImageGenerationAsyncGenerateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*image_generation.ImageGenerationResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*image_generation.ImageGenerationResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageGenerationAsyncGenerateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*image_generation.ImageGenerationResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*image_generation.ImageGenerationResponse)
	return response, err
}

// Generate is an operation of Yandex.Cloud ImageGeneration ImageGenerationAsync service.
// It returns an object which should be used to monitor the operation state.
func (c imageGenerationAsyncClient) Generate(ctx context.Context, in *image_generation.ImageGenerationRequest, opts ...grpc.CallOption) (*ImageGenerationAsyncGenerateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGenerationAsyncGenerate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := image_generation.NewImageGenerationAsyncServiceClient(connection).Generate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*image_generation.ImageGenerationResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageGenerationAsyncGenerateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c imageGenerationAsyncClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGenerationAsyncOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ImageGenerationAsyncGenerate        = protoreflect.FullName("yandex.cloud.ai.foundation_models.v1.image_generation.ImageGenerationAsyncService.Generate")
	ImageGenerationAsyncOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
