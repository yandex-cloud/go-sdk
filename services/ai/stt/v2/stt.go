// Code generated by sdkgen-v2. DO NOT EDIT.
package sttsdk

import (
	"context"

	stt "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/stt/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// SttClient provides methods for managing Stt resources of Yandex.Cloud STT.
type SttClient interface {
	LongRunningRecognize(context.Context, *stt.LongRunningRecognitionRequest, ...grpc.CallOption) (*SttLongRunningRecognizeOperation, error)
	StreamingRecognize(context.Context, ...grpc.CallOption) (stt.SttService_StreamingRecognizeClient, error)
}

var _ SttClient = sttClient{}

type sttClient struct {
	connector transport.Connector
}

// NewSttClient returns SttClient implementation.
func NewSttClient(connector transport.Connector) SttClient {
	return sttClient{connector}
}

// SttLongRunningRecognizeOperation is used to monitor the state of LongRunningRecognize operations.
type SttLongRunningRecognizeOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *SttLongRunningRecognizeOperation) Response() *stt.LongRunningRecognitionResponse {
	return o.Operation.Response().(*stt.LongRunningRecognitionResponse)
}

// Wait polls the operation until it's done.
func (o *SttLongRunningRecognizeOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*stt.LongRunningRecognitionResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*stt.LongRunningRecognitionResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SttLongRunningRecognizeOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*stt.LongRunningRecognitionResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*stt.LongRunningRecognitionResponse)
	return response, err
}

// LongRunningRecognize is an operation of Yandex.Cloud STT Stt service.
// It returns an object which should be used to monitor the operation state.
func (c sttClient) LongRunningRecognize(ctx context.Context, in *stt.LongRunningRecognitionRequest, opts ...grpc.CallOption) (*SttLongRunningRecognizeOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SttLongRunningRecognize, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := stt.NewSttServiceClient(connection).LongRunningRecognize(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*stt.LongRunningRecognitionResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SttLongRunningRecognizeOperation{*op}, nil
}

// StreamingRecognize is an operation of Yandex.Cloud STT Stt service.
func (c sttClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (stt.SttService_StreamingRecognizeClient, error) {
	connection, err := c.connector.GetConnection(ctx, SttStreamingRecognize, opts...)
	if err != nil {
		return nil, err
	}
	return stt.NewSttServiceClient(connection).StreamingRecognize(ctx, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c sttClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SttOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SttLongRunningRecognize = protoreflect.FullName("yandex.cloud.ai.stt.v2.SttService.LongRunningRecognize")
	SttStreamingRecognize   = protoreflect.FullName("yandex.cloud.ai.stt.v2.SttService.StreamingRecognize")
	SttOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
