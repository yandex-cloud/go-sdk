// Code generated by sdkgen-v2. DO NOT EDIT.
package resourcemanagersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// FolderClient provides methods for managing Folder resources of Yandex.Cloud ResourceManager.
type FolderClient interface {
	Get(context.Context, *resourcemanager.GetFolderRequest, ...grpc.CallOption) (*resourcemanager.Folder, error)
	List(context.Context, *resourcemanager.ListFoldersRequest, ...grpc.CallOption) (*resourcemanager.ListFoldersResponse, error)
	Create(context.Context, *resourcemanager.CreateFolderRequest, ...grpc.CallOption) (*FolderCreateOperation, error)
	Update(context.Context, *resourcemanager.UpdateFolderRequest, ...grpc.CallOption) (*FolderUpdateOperation, error)
	Delete(context.Context, *resourcemanager.DeleteFolderRequest, ...grpc.CallOption) (*FolderDeleteOperation, error)
	ListOperations(context.Context, *resourcemanager.ListFolderOperationsRequest, ...grpc.CallOption) (*resourcemanager.ListFolderOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*FolderSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*FolderUpdateAccessBindingsOperation, error)
}

var _ FolderClient = folderClient{}

type folderClient struct {
	connector transport.Connector
}

// NewFolderClient returns FolderClient implementation.
func NewFolderClient(connector transport.Connector) FolderClient {
	return folderClient{connector}
}

// Get is an operation of Yandex.Cloud ResourceManager Folder service.
func (c folderClient) Get(ctx context.Context, in *resourcemanager.GetFolderRequest, opts ...grpc.CallOption) (*resourcemanager.Folder, error) {
	connection, err := c.connector.GetConnection(ctx, FolderGet, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewFolderServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud ResourceManager Folder service.
func (c folderClient) List(ctx context.Context, in *resourcemanager.ListFoldersRequest, opts ...grpc.CallOption) (*resourcemanager.ListFoldersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FolderList, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewFolderServiceClient(connection).List(ctx, in, opts...)
}

// FolderCreateOperation is used to monitor the state of Create operations.
type FolderCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FolderCreateOperation) Metadata() *resourcemanager.CreateFolderMetadata {
	return o.Operation.Metadata().(*resourcemanager.CreateFolderMetadata)
}

// Response retrieves the operation response.
func (o *FolderCreateOperation) Response() *resourcemanager.Folder {
	return o.Operation.Response().(*resourcemanager.Folder)
}

// Wait polls the operation until it's done.
func (o *FolderCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*resourcemanager.Folder, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*resourcemanager.Folder)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FolderCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*resourcemanager.Folder, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*resourcemanager.Folder)
	return response, err
}

// Create is an operation of Yandex.Cloud ResourceManager Folder service.
// It returns an object which should be used to monitor the operation state.
func (c folderClient) Create(ctx context.Context, in *resourcemanager.CreateFolderRequest, opts ...grpc.CallOption) (*FolderCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewFolderServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.CreateFolderMetadata).GetFolderId()
		},
		MetadataType: (*resourcemanager.CreateFolderMetadata)(nil),
		ResponseType: (*resourcemanager.Folder)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FolderCreateOperation{*op}, nil
}

// FolderUpdateOperation is used to monitor the state of Update operations.
type FolderUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FolderUpdateOperation) Metadata() *resourcemanager.UpdateFolderMetadata {
	return o.Operation.Metadata().(*resourcemanager.UpdateFolderMetadata)
}

// Response retrieves the operation response.
func (o *FolderUpdateOperation) Response() *resourcemanager.Folder {
	return o.Operation.Response().(*resourcemanager.Folder)
}

// Wait polls the operation until it's done.
func (o *FolderUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*resourcemanager.Folder, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*resourcemanager.Folder)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FolderUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*resourcemanager.Folder, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*resourcemanager.Folder)
	return response, err
}

// Update is an operation of Yandex.Cloud ResourceManager Folder service.
// It returns an object which should be used to monitor the operation state.
func (c folderClient) Update(ctx context.Context, in *resourcemanager.UpdateFolderRequest, opts ...grpc.CallOption) (*FolderUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewFolderServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.UpdateFolderMetadata).GetFolderId()
		},
		MetadataType: (*resourcemanager.UpdateFolderMetadata)(nil),
		ResponseType: (*resourcemanager.Folder)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FolderUpdateOperation{*op}, nil
}

// FolderDeleteOperation is used to monitor the state of Delete operations.
type FolderDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FolderDeleteOperation) Metadata() *resourcemanager.DeleteFolderMetadata {
	return o.Operation.Metadata().(*resourcemanager.DeleteFolderMetadata)
}

// Response retrieves the operation response.
func (o *FolderDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FolderDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FolderDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ResourceManager Folder service.
// It returns an object which should be used to monitor the operation state.
func (c folderClient) Delete(ctx context.Context, in *resourcemanager.DeleteFolderRequest, opts ...grpc.CallOption) (*FolderDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewFolderServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.DeleteFolderMetadata).GetFolderId()
		},
		MetadataType: (*resourcemanager.DeleteFolderMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FolderDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud ResourceManager Folder service.
func (c folderClient) ListOperations(ctx context.Context, in *resourcemanager.ListFolderOperationsRequest, opts ...grpc.CallOption) (*resourcemanager.ListFolderOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FolderListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewFolderServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud ResourceManager Folder service.
func (c folderClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FolderListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewFolderServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// FolderSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type FolderSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FolderSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *FolderSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *FolderSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FolderSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud ResourceManager Folder service.
// It returns an object which should be used to monitor the operation state.
func (c folderClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*FolderSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewFolderServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FolderSetAccessBindingsOperation{*op}, nil
}

// FolderUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type FolderUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FolderUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *FolderUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *FolderUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FolderUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud ResourceManager Folder service.
// It returns an object which should be used to monitor the operation state.
func (c folderClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*FolderUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewFolderServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FolderUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c folderClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FolderOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	FolderGet                  = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.Get")
	FolderList                 = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.List")
	FolderCreate               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.Create")
	FolderUpdate               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.Update")
	FolderDelete               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.Delete")
	FolderListOperations       = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.ListOperations")
	FolderListAccessBindings   = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.ListAccessBindings")
	FolderSetAccessBindings    = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.SetAccessBindings")
	FolderUpdateAccessBindings = protoreflect.FullName("yandex.cloud.resourcemanager.v1.FolderService.UpdateAccessBindings")
	FolderOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
