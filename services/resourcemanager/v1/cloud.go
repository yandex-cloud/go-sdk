// Code generated by sdkgen-v2. DO NOT EDIT.
package resourcemanagersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CloudClient provides methods for managing Cloud resources of Yandex.Cloud ResourceManager.
type CloudClient interface {
	Get(context.Context, *resourcemanager.GetCloudRequest, ...grpc.CallOption) (*resourcemanager.Cloud, error)
	List(context.Context, *resourcemanager.ListCloudsRequest, ...grpc.CallOption) (*resourcemanager.ListCloudsResponse, error)
	Create(context.Context, *resourcemanager.CreateCloudRequest, ...grpc.CallOption) (*CloudCreateOperation, error)
	Update(context.Context, *resourcemanager.UpdateCloudRequest, ...grpc.CallOption) (*CloudUpdateOperation, error)
	Delete(context.Context, *resourcemanager.DeleteCloudRequest, ...grpc.CallOption) (*CloudDeleteOperation, error)
	ListOperations(context.Context, *resourcemanager.ListCloudOperationsRequest, ...grpc.CallOption) (*resourcemanager.ListCloudOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*CloudSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*CloudUpdateAccessBindingsOperation, error)
}

var _ CloudClient = cloudClient{}

type cloudClient struct {
	connector transport.Connector
}

// NewCloudClient returns CloudClient implementation.
func NewCloudClient(connector transport.Connector) CloudClient {
	return cloudClient{connector}
}

// Get is an operation of Yandex.Cloud ResourceManager Cloud service.
func (c cloudClient) Get(ctx context.Context, in *resourcemanager.GetCloudRequest, opts ...grpc.CallOption) (*resourcemanager.Cloud, error) {
	connection, err := c.connector.GetConnection(ctx, CloudGet, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewCloudServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud ResourceManager Cloud service.
func (c cloudClient) List(ctx context.Context, in *resourcemanager.ListCloudsRequest, opts ...grpc.CallOption) (*resourcemanager.ListCloudsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CloudList, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewCloudServiceClient(connection).List(ctx, in, opts...)
}

// CloudCreateOperation is used to monitor the state of Create operations.
type CloudCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CloudCreateOperation) Metadata() *resourcemanager.CreateCloudMetadata {
	return o.Operation.Metadata().(*resourcemanager.CreateCloudMetadata)
}

// Response retrieves the operation response.
func (o *CloudCreateOperation) Response() *resourcemanager.Cloud {
	return o.Operation.Response().(*resourcemanager.Cloud)
}

// Wait polls the operation until it's done.
func (o *CloudCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*resourcemanager.Cloud, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*resourcemanager.Cloud)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CloudCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*resourcemanager.Cloud, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*resourcemanager.Cloud)
	return response, err
}

// Create is an operation of Yandex.Cloud ResourceManager Cloud service.
// It returns an object which should be used to monitor the operation state.
func (c cloudClient) Create(ctx context.Context, in *resourcemanager.CreateCloudRequest, opts ...grpc.CallOption) (*CloudCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewCloudServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.CreateCloudMetadata).GetCloudId()
		},
		MetadataType: (*resourcemanager.CreateCloudMetadata)(nil),
		ResponseType: (*resourcemanager.Cloud)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CloudCreateOperation{*op}, nil
}

// CloudUpdateOperation is used to monitor the state of Update operations.
type CloudUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CloudUpdateOperation) Metadata() *resourcemanager.UpdateCloudMetadata {
	return o.Operation.Metadata().(*resourcemanager.UpdateCloudMetadata)
}

// Response retrieves the operation response.
func (o *CloudUpdateOperation) Response() *resourcemanager.Cloud {
	return o.Operation.Response().(*resourcemanager.Cloud)
}

// Wait polls the operation until it's done.
func (o *CloudUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*resourcemanager.Cloud, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*resourcemanager.Cloud)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CloudUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*resourcemanager.Cloud, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*resourcemanager.Cloud)
	return response, err
}

// Update is an operation of Yandex.Cloud ResourceManager Cloud service.
// It returns an object which should be used to monitor the operation state.
func (c cloudClient) Update(ctx context.Context, in *resourcemanager.UpdateCloudRequest, opts ...grpc.CallOption) (*CloudUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewCloudServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.UpdateCloudMetadata).GetCloudId()
		},
		MetadataType: (*resourcemanager.UpdateCloudMetadata)(nil),
		ResponseType: (*resourcemanager.Cloud)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CloudUpdateOperation{*op}, nil
}

// CloudDeleteOperation is used to monitor the state of Delete operations.
type CloudDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CloudDeleteOperation) Metadata() *resourcemanager.DeleteCloudMetadata {
	return o.Operation.Metadata().(*resourcemanager.DeleteCloudMetadata)
}

// Response retrieves the operation response.
func (o *CloudDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CloudDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CloudDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ResourceManager Cloud service.
// It returns an object which should be used to monitor the operation state.
func (c cloudClient) Delete(ctx context.Context, in *resourcemanager.DeleteCloudRequest, opts ...grpc.CallOption) (*CloudDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewCloudServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*resourcemanager.DeleteCloudMetadata).GetCloudId()
		},
		MetadataType: (*resourcemanager.DeleteCloudMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CloudDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud ResourceManager Cloud service.
func (c cloudClient) ListOperations(ctx context.Context, in *resourcemanager.ListCloudOperationsRequest, opts ...grpc.CallOption) (*resourcemanager.ListCloudOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CloudListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewCloudServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud ResourceManager Cloud service.
func (c cloudClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CloudListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return resourcemanager.NewCloudServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// CloudSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type CloudSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *CloudSetAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *CloudSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CloudSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud ResourceManager Cloud service.
// It returns an object which should be used to monitor the operation state.
func (c cloudClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*CloudSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewCloudServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CloudSetAccessBindingsOperation{*op}, nil
}

// CloudUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type CloudUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *CloudUpdateAccessBindingsOperation) Response() *access.AccessBindingsOperationResult {
	return o.Operation.Response().(*access.AccessBindingsOperationResult)
}

// Wait polls the operation until it's done.
func (o *CloudUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CloudUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*access.AccessBindingsOperationResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*access.AccessBindingsOperationResult)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud ResourceManager Cloud service.
// It returns an object which should be used to monitor the operation state.
func (c cloudClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*CloudUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := resourcemanager.NewCloudServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*access.AccessBindingsOperationResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CloudUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c cloudClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CloudOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CloudGet                  = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.Get")
	CloudList                 = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.List")
	CloudCreate               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.Create")
	CloudUpdate               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.Update")
	CloudDelete               = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.Delete")
	CloudListOperations       = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.ListOperations")
	CloudListAccessBindings   = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.ListAccessBindings")
	CloudSetAccessBindings    = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.SetAccessBindings")
	CloudUpdateAccessBindings = protoreflect.FullName("yandex.cloud.resourcemanager.v1.CloudService.UpdateAccessBindings")
	CloudOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
