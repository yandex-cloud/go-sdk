// Code generated by sdkgen-v2. DO NOT EDIT.
package connectionmanagersdk

import (
	"context"

	connectionmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/connectionmanager/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ConnectionClient provides methods for managing Connection resources of Yandex.Cloud Connectionmanager.
type ConnectionClient interface {
	Get(context.Context, *connectionmanager.GetConnectionRequest, ...grpc.CallOption) (*connectionmanager.Connection, error)
	ResolveCluster(context.Context, *connectionmanager.ResolveClusterRequest, ...grpc.CallOption) (*connectionmanager.Connection, error)
	List(context.Context, *connectionmanager.ListConnectionRequest, ...grpc.CallOption) (*connectionmanager.ListConnectionResponse, error)
	Create(context.Context, *connectionmanager.CreateConnectionRequest, ...grpc.CallOption) (*ConnectionCreateOperation, error)
	Update(context.Context, *connectionmanager.UpdateConnectionRequest, ...grpc.CallOption) (*ConnectionUpdateOperation, error)
	Delete(context.Context, *connectionmanager.DeleteConnectionRequest, ...grpc.CallOption) (*ConnectionDeleteOperation, error)
	ListOperations(context.Context, *connectionmanager.ListOperationsRequest, ...grpc.CallOption) (*connectionmanager.ListOperationsResponse, error)
}

var _ ConnectionClient = connectionClient{}

type connectionClient struct {
	connector transport.Connector
}

// NewConnectionClient returns ConnectionClient implementation.
func NewConnectionClient(connector transport.Connector) ConnectionClient {
	return connectionClient{connector}
}

// Get is an operation of Yandex.Cloud Connectionmanager Connection service.
func (c connectionClient) Get(ctx context.Context, in *connectionmanager.GetConnectionRequest, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return connectionmanager.NewConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// ResolveCluster is an operation of Yandex.Cloud Connectionmanager Connection service.
func (c connectionClient) ResolveCluster(ctx context.Context, in *connectionmanager.ResolveClusterRequest, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionResolveCluster, opts...)
	if err != nil {
		return nil, err
	}
	return connectionmanager.NewConnectionServiceClient(connection).ResolveCluster(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Connectionmanager Connection service.
func (c connectionClient) List(ctx context.Context, in *connectionmanager.ListConnectionRequest, opts ...grpc.CallOption) (*connectionmanager.ListConnectionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionList, opts...)
	if err != nil {
		return nil, err
	}
	return connectionmanager.NewConnectionServiceClient(connection).List(ctx, in, opts...)
}

// ConnectionCreateOperation is used to monitor the state of Create operations.
type ConnectionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectionCreateOperation) Metadata() *connectionmanager.CreateConnectionMetadata {
	return o.Operation.Metadata().(*connectionmanager.CreateConnectionMetadata)
}

// Response retrieves the operation response.
func (o *ConnectionCreateOperation) Response() *connectionmanager.Connection {
	return o.Operation.Response().(*connectionmanager.Connection)
}

// Wait polls the operation until it's done.
func (o *ConnectionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*connectionmanager.Connection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*connectionmanager.Connection)
	return response, err
}

// Create is an operation of Yandex.Cloud Connectionmanager Connection service.
// It returns an object which should be used to monitor the operation state.
func (c connectionClient) Create(ctx context.Context, in *connectionmanager.CreateConnectionRequest, opts ...grpc.CallOption) (*ConnectionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := connectionmanager.NewConnectionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*connectionmanager.CreateConnectionMetadata).GetConnectionId()
		},
		MetadataType: (*connectionmanager.CreateConnectionMetadata)(nil),
		ResponseType: (*connectionmanager.Connection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectionCreateOperation{*op}, nil
}

// ConnectionUpdateOperation is used to monitor the state of Update operations.
type ConnectionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectionUpdateOperation) Metadata() *connectionmanager.UpdateConnectionMetadata {
	return o.Operation.Metadata().(*connectionmanager.UpdateConnectionMetadata)
}

// Response retrieves the operation response.
func (o *ConnectionUpdateOperation) Response() *connectionmanager.Connection {
	return o.Operation.Response().(*connectionmanager.Connection)
}

// Wait polls the operation until it's done.
func (o *ConnectionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*connectionmanager.Connection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*connectionmanager.Connection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*connectionmanager.Connection)
	return response, err
}

// Update is an operation of Yandex.Cloud Connectionmanager Connection service.
// It returns an object which should be used to monitor the operation state.
func (c connectionClient) Update(ctx context.Context, in *connectionmanager.UpdateConnectionRequest, opts ...grpc.CallOption) (*ConnectionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := connectionmanager.NewConnectionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*connectionmanager.UpdateConnectionMetadata).GetConnectionId()
		},
		MetadataType: (*connectionmanager.UpdateConnectionMetadata)(nil),
		ResponseType: (*connectionmanager.Connection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectionUpdateOperation{*op}, nil
}

// ConnectionDeleteOperation is used to monitor the state of Delete operations.
type ConnectionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectionDeleteOperation) Metadata() *connectionmanager.DeleteConnectionMetadata {
	return o.Operation.Metadata().(*connectionmanager.DeleteConnectionMetadata)
}

// Response retrieves the operation response.
func (o *ConnectionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Connectionmanager Connection service.
// It returns an object which should be used to monitor the operation state.
func (c connectionClient) Delete(ctx context.Context, in *connectionmanager.DeleteConnectionRequest, opts ...grpc.CallOption) (*ConnectionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := connectionmanager.NewConnectionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*connectionmanager.DeleteConnectionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectionDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Connectionmanager Connection service.
func (c connectionClient) ListOperations(ctx context.Context, in *connectionmanager.ListOperationsRequest, opts ...grpc.CallOption) (*connectionmanager.ListOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return connectionmanager.NewConnectionServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c connectionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ConnectionGet             = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.Get")
	ConnectionResolveCluster  = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.ResolveCluster")
	ConnectionList            = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.List")
	ConnectionCreate          = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.Create")
	ConnectionUpdate          = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.Update")
	ConnectionDelete          = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.Delete")
	ConnectionListOperations  = protoreflect.FullName("yandex.cloud.connectionmanager.v1.ConnectionService.ListOperations")
	ConnectionOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
