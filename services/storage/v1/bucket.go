// Code generated by sdkgen-v2. DO NOT EDIT.
package storagesdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	storage "github.com/yandex-cloud/go-genproto/yandex/cloud/storage/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BucketClient provides methods for managing Bucket resources of Yandex.Cloud Storage.
type BucketClient interface {
	List(context.Context, *storage.ListBucketsRequest, ...grpc.CallOption) (*storage.ListBucketsResponse, error)
	Get(context.Context, *storage.GetBucketRequest, ...grpc.CallOption) (*storage.Bucket, error)
	Create(context.Context, *storage.CreateBucketRequest, ...grpc.CallOption) (*BucketCreateOperation, error)
	Update(context.Context, *storage.UpdateBucketRequest, ...grpc.CallOption) (*BucketUpdateOperation, error)
	Delete(context.Context, *storage.DeleteBucketRequest, ...grpc.CallOption) (*BucketDeleteOperation, error)
	GetStats(context.Context, *storage.GetBucketStatsRequest, ...grpc.CallOption) (*storage.BucketStats, error)
	GetHTTPSConfig(context.Context, *storage.GetBucketHTTPSConfigRequest, ...grpc.CallOption) (*storage.HTTPSConfig, error)
	SetHTTPSConfig(context.Context, *storage.SetBucketHTTPSConfigRequest, ...grpc.CallOption) (*BucketSetHTTPSConfigOperation, error)
	DeleteHTTPSConfig(context.Context, *storage.DeleteBucketHTTPSConfigRequest, ...grpc.CallOption) (*BucketDeleteHTTPSConfigOperation, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*BucketSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*BucketUpdateAccessBindingsOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
}

var _ BucketClient = bucketClient{}

type bucketClient struct {
	connector transport.Connector
}

// NewBucketClient returns BucketClient implementation.
func NewBucketClient(connector transport.Connector) BucketClient {
	return bucketClient{connector}
}

// List is an operation of Yandex.Cloud Storage Bucket service.
func (c bucketClient) List(ctx context.Context, in *storage.ListBucketsRequest, opts ...grpc.CallOption) (*storage.ListBucketsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BucketList, opts...)
	if err != nil {
		return nil, err
	}
	return storage.NewBucketServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Storage Bucket service.
func (c bucketClient) Get(ctx context.Context, in *storage.GetBucketRequest, opts ...grpc.CallOption) (*storage.Bucket, error) {
	connection, err := c.connector.GetConnection(ctx, BucketGet, opts...)
	if err != nil {
		return nil, err
	}
	return storage.NewBucketServiceClient(connection).Get(ctx, in, opts...)
}

// BucketCreateOperation is used to monitor the state of Create operations.
type BucketCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketCreateOperation) Metadata() *storage.CreateBucketMetadata {
	return o.Operation.Metadata().(*storage.CreateBucketMetadata)
}

// Response retrieves the operation response.
func (o *BucketCreateOperation) Response() *storage.Bucket {
	return o.Operation.Response().(*storage.Bucket)
}

// Wait polls the operation until it's done.
func (o *BucketCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*storage.Bucket, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*storage.Bucket)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*storage.Bucket, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*storage.Bucket)
	return response, err
}

// Create is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) Create(ctx context.Context, in *storage.CreateBucketRequest, opts ...grpc.CallOption) (*BucketCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*storage.CreateBucketMetadata)(nil),
		ResponseType: (*storage.Bucket)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketCreateOperation{*op}, nil
}

// BucketUpdateOperation is used to monitor the state of Update operations.
type BucketUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketUpdateOperation) Metadata() *storage.UpdateBucketMetadata {
	return o.Operation.Metadata().(*storage.UpdateBucketMetadata)
}

// Response retrieves the operation response.
func (o *BucketUpdateOperation) Response() *storage.Bucket {
	return o.Operation.Response().(*storage.Bucket)
}

// Wait polls the operation until it's done.
func (o *BucketUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*storage.Bucket, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*storage.Bucket)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*storage.Bucket, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*storage.Bucket)
	return response, err
}

// Update is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) Update(ctx context.Context, in *storage.UpdateBucketRequest, opts ...grpc.CallOption) (*BucketUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*storage.UpdateBucketMetadata)(nil),
		ResponseType: (*storage.Bucket)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketUpdateOperation{*op}, nil
}

// BucketDeleteOperation is used to monitor the state of Delete operations.
type BucketDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketDeleteOperation) Metadata() *storage.DeleteBucketMetadata {
	return o.Operation.Metadata().(*storage.DeleteBucketMetadata)
}

// Response retrieves the operation response.
func (o *BucketDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BucketDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) Delete(ctx context.Context, in *storage.DeleteBucketRequest, opts ...grpc.CallOption) (*BucketDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*storage.DeleteBucketMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketDeleteOperation{*op}, nil
}

// GetStats is an operation of Yandex.Cloud Storage Bucket service.
func (c bucketClient) GetStats(ctx context.Context, in *storage.GetBucketStatsRequest, opts ...grpc.CallOption) (*storage.BucketStats, error) {
	connection, err := c.connector.GetConnection(ctx, BucketGetStats, opts...)
	if err != nil {
		return nil, err
	}
	return storage.NewBucketServiceClient(connection).GetStats(ctx, in, opts...)
}

// GetHTTPSConfig is an operation of Yandex.Cloud Storage Bucket service.
func (c bucketClient) GetHTTPSConfig(ctx context.Context, in *storage.GetBucketHTTPSConfigRequest, opts ...grpc.CallOption) (*storage.HTTPSConfig, error) {
	connection, err := c.connector.GetConnection(ctx, BucketGetHTTPSConfig, opts...)
	if err != nil {
		return nil, err
	}
	return storage.NewBucketServiceClient(connection).GetHTTPSConfig(ctx, in, opts...)
}

// BucketSetHTTPSConfigOperation is used to monitor the state of SetHTTPSConfig operations.
type BucketSetHTTPSConfigOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketSetHTTPSConfigOperation) Metadata() *storage.SetBucketHTTPSConfigMetadata {
	return o.Operation.Metadata().(*storage.SetBucketHTTPSConfigMetadata)
}

// Response retrieves the operation response.
func (o *BucketSetHTTPSConfigOperation) Response() *storage.HTTPSConfig {
	return o.Operation.Response().(*storage.HTTPSConfig)
}

// Wait polls the operation until it's done.
func (o *BucketSetHTTPSConfigOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*storage.HTTPSConfig, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*storage.HTTPSConfig)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketSetHTTPSConfigOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*storage.HTTPSConfig, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*storage.HTTPSConfig)
	return response, err
}

// SetHTTPSConfig is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) SetHTTPSConfig(ctx context.Context, in *storage.SetBucketHTTPSConfigRequest, opts ...grpc.CallOption) (*BucketSetHTTPSConfigOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketSetHTTPSConfig, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).SetHTTPSConfig(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*storage.SetBucketHTTPSConfigMetadata)(nil),
		ResponseType: (*storage.HTTPSConfig)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketSetHTTPSConfigOperation{*op}, nil
}

// BucketDeleteHTTPSConfigOperation is used to monitor the state of DeleteHTTPSConfig operations.
type BucketDeleteHTTPSConfigOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketDeleteHTTPSConfigOperation) Metadata() *storage.DeleteBucketHTTPSConfigMetadata {
	return o.Operation.Metadata().(*storage.DeleteBucketHTTPSConfigMetadata)
}

// Response retrieves the operation response.
func (o *BucketDeleteHTTPSConfigOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BucketDeleteHTTPSConfigOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketDeleteHTTPSConfigOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteHTTPSConfig is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) DeleteHTTPSConfig(ctx context.Context, in *storage.DeleteBucketHTTPSConfigRequest, opts ...grpc.CallOption) (*BucketDeleteHTTPSConfigOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketDeleteHTTPSConfig, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).DeleteHTTPSConfig(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*storage.DeleteBucketHTTPSConfigMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketDeleteHTTPSConfigOperation{*op}, nil
}

// BucketSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type BucketSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BucketSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BucketSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*BucketSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketSetAccessBindingsOperation{*op}, nil
}

// BucketUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type BucketUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BucketUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BucketUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BucketUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BucketUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Storage Bucket service.
// It returns an object which should be used to monitor the operation state.
func (c bucketClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*BucketUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := storage.NewBucketServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BucketUpdateAccessBindingsOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Storage Bucket service.
func (c bucketClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BucketListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return storage.NewBucketServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c bucketClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BucketOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BucketList                 = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.List")
	BucketGet                  = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.Get")
	BucketCreate               = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.Create")
	BucketUpdate               = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.Update")
	BucketDelete               = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.Delete")
	BucketGetStats             = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.GetStats")
	BucketGetHTTPSConfig       = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.GetHTTPSConfig")
	BucketSetHTTPSConfig       = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.SetHTTPSConfig")
	BucketDeleteHTTPSConfig    = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.DeleteHTTPSConfig")
	BucketSetAccessBindings    = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.SetAccessBindings")
	BucketUpdateAccessBindings = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.UpdateAccessBindings")
	BucketListAccessBindings   = protoreflect.FullName("yandex.cloud.storage.v1.BucketService.ListAccessBindings")
	BucketOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
