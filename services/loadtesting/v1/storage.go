// Code generated by sdkgen-v2. DO NOT EDIT.
package loadtestingsdk

import (
	"context"

	loadtesting "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// StorageClient provides methods for managing Storage resources of Yandex.Cloud Loadtesting.
type StorageClient interface {
	Create(context.Context, *loadtesting.CreateStorageRequest, ...grpc.CallOption) (*StorageCreateOperation, error)
	Delete(context.Context, *loadtesting.DeleteStorageRequest, ...grpc.CallOption) (*StorageDeleteOperation, error)
	Get(context.Context, *loadtesting.GetStorageRequest, ...grpc.CallOption) (*loadtesting.Storage, error)
	List(context.Context, *loadtesting.ListStorageRequest, ...grpc.CallOption) (*loadtesting.ListStorageResponse, error)
	UploadObject(context.Context, *loadtesting.UploadStorageObjectRequest, ...grpc.CallOption) (*loadtesting.StorageObject, error)
}

var _ StorageClient = storageClient{}

type storageClient struct {
	connector transport.Connector
}

// NewStorageClient returns StorageClient implementation.
func NewStorageClient(connector transport.Connector) StorageClient {
	return storageClient{connector}
}

// StorageCreateOperation is used to monitor the state of Create operations.
type StorageCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *StorageCreateOperation) Metadata() *loadtesting.CreateStorageMetadata {
	return o.Operation.Metadata().(*loadtesting.CreateStorageMetadata)
}

// Response retrieves the operation response.
func (o *StorageCreateOperation) Response() *loadtesting.Storage {
	return o.Operation.Response().(*loadtesting.Storage)
}

// Wait polls the operation until it's done.
func (o *StorageCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadtesting.Storage, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadtesting.Storage)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *StorageCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadtesting.Storage, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadtesting.Storage)
	return response, err
}

// Create is an operation of Yandex.Cloud Loadtesting Storage service.
// It returns an object which should be used to monitor the operation state.
func (c storageClient) Create(ctx context.Context, in *loadtesting.CreateStorageRequest, opts ...grpc.CallOption) (*StorageCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, StorageCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadtesting.NewStorageServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadtesting.CreateStorageMetadata).GetStorageId()
		},
		MetadataType: (*loadtesting.CreateStorageMetadata)(nil),
		ResponseType: (*loadtesting.Storage)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &StorageCreateOperation{*op}, nil
}

// StorageDeleteOperation is used to monitor the state of Delete operations.
type StorageDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *StorageDeleteOperation) Metadata() *loadtesting.DeleteStorageMetadata {
	return o.Operation.Metadata().(*loadtesting.DeleteStorageMetadata)
}

// Response retrieves the operation response.
func (o *StorageDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *StorageDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *StorageDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Loadtesting Storage service.
// It returns an object which should be used to monitor the operation state.
func (c storageClient) Delete(ctx context.Context, in *loadtesting.DeleteStorageRequest, opts ...grpc.CallOption) (*StorageDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, StorageDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadtesting.NewStorageServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadtesting.DeleteStorageMetadata).GetStorageId()
		},
		MetadataType: (*loadtesting.DeleteStorageMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &StorageDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Loadtesting Storage service.
func (c storageClient) Get(ctx context.Context, in *loadtesting.GetStorageRequest, opts ...grpc.CallOption) (*loadtesting.Storage, error) {
	connection, err := c.connector.GetConnection(ctx, StorageGet, opts...)
	if err != nil {
		return nil, err
	}
	return loadtesting.NewStorageServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Loadtesting Storage service.
func (c storageClient) List(ctx context.Context, in *loadtesting.ListStorageRequest, opts ...grpc.CallOption) (*loadtesting.ListStorageResponse, error) {
	connection, err := c.connector.GetConnection(ctx, StorageList, opts...)
	if err != nil {
		return nil, err
	}
	return loadtesting.NewStorageServiceClient(connection).List(ctx, in, opts...)
}

// UploadObject is an operation of Yandex.Cloud Loadtesting Storage service.
func (c storageClient) UploadObject(ctx context.Context, in *loadtesting.UploadStorageObjectRequest, opts ...grpc.CallOption) (*loadtesting.StorageObject, error) {
	connection, err := c.connector.GetConnection(ctx, StorageUploadObject, opts...)
	if err != nil {
		return nil, err
	}
	return loadtesting.NewStorageServiceClient(connection).UploadObject(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c storageClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, StorageOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	StorageCreate          = protoreflect.FullName("yandex.cloud.loadtesting.v1.StorageService.Create")
	StorageDelete          = protoreflect.FullName("yandex.cloud.loadtesting.v1.StorageService.Delete")
	StorageGet             = protoreflect.FullName("yandex.cloud.loadtesting.v1.StorageService.Get")
	StorageList            = protoreflect.FullName("yandex.cloud.loadtesting.v1.StorageService.List")
	StorageUploadObject    = protoreflect.FullName("yandex.cloud.loadtesting.v1.StorageService.UploadObject")
	StorageOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
