// Code generated by sdkgen-v2. DO NOT EDIT.
package agentsdk

import (
	"context"

	agent "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/agent/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// AgentClient provides methods for managing Agent resources of Yandex.Cloud Agent.
type AgentClient interface {
	ClaimStatus(context.Context, *agent.ClaimAgentStatusRequest, ...grpc.CallOption) (*agent.ClaimAgentStatusResponse, error)
	ReportEventLogs(context.Context, *agent.ReportEventLogsRequest, ...grpc.CallOption) (*agent.ReportEventLogsResponse, error)
}

var _ AgentClient = agentClient{}

type agentClient struct {
	connector transport.Connector
}

// NewAgentClient returns AgentClient implementation.
func NewAgentClient(connector transport.Connector) AgentClient {
	return agentClient{connector}
}

// ClaimStatus is an operation of Yandex.Cloud Agent Agent service.
func (c agentClient) ClaimStatus(ctx context.Context, in *agent.ClaimAgentStatusRequest, opts ...grpc.CallOption) (*agent.ClaimAgentStatusResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AgentClaimStatus, opts...)
	if err != nil {
		return nil, err
	}
	return agent.NewAgentServiceClient(connection).ClaimStatus(ctx, in, opts...)
}

// ReportEventLogs is an operation of Yandex.Cloud Agent Agent service.
func (c agentClient) ReportEventLogs(ctx context.Context, in *agent.ReportEventLogsRequest, opts ...grpc.CallOption) (*agent.ReportEventLogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AgentReportEventLogs, opts...)
	if err != nil {
		return nil, err
	}
	return agent.NewAgentServiceClient(connection).ReportEventLogs(ctx, in, opts...)
}

var (
	AgentClaimStatus     = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.AgentService.ClaimStatus")
	AgentReportEventLogs = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.AgentService.ReportEventLogs")
)
