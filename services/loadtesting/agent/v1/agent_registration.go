// Code generated by sdkgen-v2. DO NOT EDIT.
package agentsdk

import (
	"context"

	agent "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/agent/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// AgentRegistrationClient provides methods for managing AgentRegistration resources of Yandex.Cloud Agent.
type AgentRegistrationClient interface {
	Register(context.Context, *agent.RegisterRequest, ...grpc.CallOption) (*agent.RegisterResponse, error)
	ExternalAgentRegister(context.Context, *agent.ExternalAgentRegisterRequest, ...grpc.CallOption) (*AgentRegistrationExternalAgentRegisterOperation, error)
}

var _ AgentRegistrationClient = agentRegistrationClient{}

type agentRegistrationClient struct {
	connector transport.Connector
}

// NewAgentRegistrationClient returns AgentRegistrationClient implementation.
func NewAgentRegistrationClient(connector transport.Connector) AgentRegistrationClient {
	return agentRegistrationClient{connector}
}

// Register is an operation of Yandex.Cloud Agent AgentRegistration service.
func (c agentRegistrationClient) Register(ctx context.Context, in *agent.RegisterRequest, opts ...grpc.CallOption) (*agent.RegisterResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AgentRegistrationRegister, opts...)
	if err != nil {
		return nil, err
	}
	return agent.NewAgentRegistrationServiceClient(connection).Register(ctx, in, opts...)
}

// AgentRegistrationExternalAgentRegisterOperation is used to monitor the state of ExternalAgentRegister operations.
type AgentRegistrationExternalAgentRegisterOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AgentRegistrationExternalAgentRegisterOperation) Metadata() *agent.ExternalAgentRegisterMetadata {
	return o.Operation.Metadata().(*agent.ExternalAgentRegisterMetadata)
}

// Response retrieves the operation response.
func (o *AgentRegistrationExternalAgentRegisterOperation) Response() *agent.AgentInstance {
	return o.Operation.Response().(*agent.AgentInstance)
}

// Wait polls the operation until it's done.
func (o *AgentRegistrationExternalAgentRegisterOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*agent.AgentInstance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*agent.AgentInstance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AgentRegistrationExternalAgentRegisterOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*agent.AgentInstance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*agent.AgentInstance)
	return response, err
}

// ExternalAgentRegister is an operation of Yandex.Cloud Agent AgentRegistration service.
// It returns an object which should be used to monitor the operation state.
func (c agentRegistrationClient) ExternalAgentRegister(ctx context.Context, in *agent.ExternalAgentRegisterRequest, opts ...grpc.CallOption) (*AgentRegistrationExternalAgentRegisterOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentRegistrationExternalAgentRegister, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := agent.NewAgentRegistrationServiceClient(connection).ExternalAgentRegister(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*agent.ExternalAgentRegisterMetadata)(nil),
		ResponseType: (*agent.AgentInstance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AgentRegistrationExternalAgentRegisterOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c agentRegistrationClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentRegistrationOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AgentRegistrationRegister              = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.AgentRegistrationService.Register")
	AgentRegistrationExternalAgentRegister = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.AgentRegistrationService.ExternalAgentRegister")
	AgentRegistrationOperationPoller       = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
