// Code generated by sdkgen-v2. DO NOT EDIT.
package agentsdk

import (
	"context"

	agent "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/agent/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// TestClient provides methods for managing Test resources of Yandex.Cloud Agent.
type TestClient interface {
	Get(context.Context, *agent.GetTestRequest, ...grpc.CallOption) (*agent.Test, error)
	Update(context.Context, *agent.UpdateTestRequest, ...grpc.CallOption) (*TestUpdateOperation, error)
}

var _ TestClient = testClient{}

type testClient struct {
	connector transport.Connector
}

// NewTestClient returns TestClient implementation.
func NewTestClient(connector transport.Connector) TestClient {
	return testClient{connector}
}

// Get is an operation of Yandex.Cloud Agent Test service.
func (c testClient) Get(ctx context.Context, in *agent.GetTestRequest, opts ...grpc.CallOption) (*agent.Test, error) {
	connection, err := c.connector.GetConnection(ctx, TestGet, opts...)
	if err != nil {
		return nil, err
	}
	return agent.NewTestServiceClient(connection).Get(ctx, in, opts...)
}

// TestUpdateOperation is used to monitor the state of Update operations.
type TestUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TestUpdateOperation) Metadata() *agent.UpdateTestMetadata {
	return o.Operation.Metadata().(*agent.UpdateTestMetadata)
}

// Response retrieves the operation response.
func (o *TestUpdateOperation) Response() *agent.Test {
	return o.Operation.Response().(*agent.Test)
}

// Wait polls the operation until it's done.
func (o *TestUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*agent.Test, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*agent.Test)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TestUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*agent.Test, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*agent.Test)
	return response, err
}

// Update is an operation of Yandex.Cloud Agent Test service.
// It returns an object which should be used to monitor the operation state.
func (c testClient) Update(ctx context.Context, in *agent.UpdateTestRequest, opts ...grpc.CallOption) (*TestUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := agent.NewTestServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*agent.UpdateTestMetadata).GetTestId()
		},
		MetadataType: (*agent.UpdateTestMetadata)(nil),
		ResponseType: (*agent.Test)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TestUpdateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c testClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TestGet             = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.TestService.Get")
	TestUpdate          = protoreflect.FullName("yandex.cloud.loadtesting.agent.v1.TestService.Update")
	TestOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
