// Code generated by sdkgen-v2. DO NOT EDIT.
package apisdk

import (
	"context"

	api "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1"
	test "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1/test"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TestClient provides methods for managing Test resources of Yandex.Cloud Api.
type TestClient interface {
	Create(context.Context, *api.CreateTestRequest, ...grpc.CallOption) (*TestCreateOperation, error)
	Get(context.Context, *api.GetTestRequest, ...grpc.CallOption) (*test.Test, error)
	Stop(context.Context, *api.StopTestRequest, ...grpc.CallOption) (*TestStopOperation, error)
	Delete(context.Context, *api.DeleteTestRequest, ...grpc.CallOption) (*TestDeleteOperation, error)
	List(context.Context, *api.ListTestsRequest, ...grpc.CallOption) (*api.ListTestsResponse, error)
}

var _ TestClient = testClient{}

type testClient struct {
	connector transport.Connector
}

// NewTestClient returns TestClient implementation.
func NewTestClient(connector transport.Connector) TestClient {
	return testClient{connector}
}

// TestCreateOperation is used to monitor the state of Create operations.
type TestCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TestCreateOperation) Metadata() *api.CreateTestMetadata {
	return o.Operation.Metadata().(*api.CreateTestMetadata)
}

// Response retrieves the operation response.
func (o *TestCreateOperation) Response() *test.Test {
	return o.Operation.Response().(*test.Test)
}

// Wait polls the operation until it's done.
func (o *TestCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*test.Test, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*test.Test)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TestCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*test.Test, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*test.Test)
	return response, err
}

// Create is an operation of Yandex.Cloud Api Test service.
// It returns an object which should be used to monitor the operation state.
func (c testClient) Create(ctx context.Context, in *api.CreateTestRequest, opts ...grpc.CallOption) (*TestCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewTestServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.CreateTestMetadata).GetTestId()
		},
		MetadataType: (*api.CreateTestMetadata)(nil),
		ResponseType: (*test.Test)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TestCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Api Test service.
func (c testClient) Get(ctx context.Context, in *api.GetTestRequest, opts ...grpc.CallOption) (*test.Test, error) {
	connection, err := c.connector.GetConnection(ctx, TestGet, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewTestServiceClient(connection).Get(ctx, in, opts...)
}

// TestStopOperation is used to monitor the state of Stop operations.
type TestStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TestStopOperation) Metadata() *api.StopTestMetadata {
	return o.Operation.Metadata().(*api.StopTestMetadata)
}

// Response retrieves the operation response.
func (o *TestStopOperation) Response() *test.Test {
	return o.Operation.Response().(*test.Test)
}

// Wait polls the operation until it's done.
func (o *TestStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*test.Test, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*test.Test)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TestStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*test.Test, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*test.Test)
	return response, err
}

// Stop is an operation of Yandex.Cloud Api Test service.
// It returns an object which should be used to monitor the operation state.
func (c testClient) Stop(ctx context.Context, in *api.StopTestRequest, opts ...grpc.CallOption) (*TestStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewTestServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.StopTestMetadata).GetTestId()
		},
		MetadataType: (*api.StopTestMetadata)(nil),
		ResponseType: (*test.Test)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TestStopOperation{*op}, nil
}

// TestDeleteOperation is used to monitor the state of Delete operations.
type TestDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TestDeleteOperation) Metadata() *api.DeleteTestMetadata {
	return o.Operation.Metadata().(*api.DeleteTestMetadata)
}

// Response retrieves the operation response.
func (o *TestDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TestDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TestDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Api Test service.
// It returns an object which should be used to monitor the operation state.
func (c testClient) Delete(ctx context.Context, in *api.DeleteTestRequest, opts ...grpc.CallOption) (*TestDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewTestServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.DeleteTestMetadata).GetTestId()
		},
		MetadataType: (*api.DeleteTestMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TestDeleteOperation{*op}, nil
}

// List is an operation of Yandex.Cloud Api Test service.
func (c testClient) List(ctx context.Context, in *api.ListTestsRequest, opts ...grpc.CallOption) (*api.ListTestsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TestList, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewTestServiceClient(connection).List(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c testClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TestOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TestCreate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.TestService.Create")
	TestGet             = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.TestService.Get")
	TestStop            = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.TestService.Stop")
	TestDelete          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.TestService.Delete")
	TestList            = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.TestService.List")
	TestOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
