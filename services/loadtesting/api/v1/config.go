// Code generated by sdkgen-v2. DO NOT EDIT.
package apisdk

import (
	"context"

	api "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ConfigClient provides methods for managing Config resources of Yandex.Cloud Api.
type ConfigClient interface {
	Create(context.Context, *api.CreateConfigRequest, ...grpc.CallOption) (*ConfigCreateOperation, error)
	Get(context.Context, *api.GetConfigRequest, ...grpc.CallOption) (*config.Config, error)
	List(context.Context, *api.ListConfigsRequest, ...grpc.CallOption) (*api.ListConfigsResponse, error)
	Delete(context.Context, *api.DeleteConfigRequest, ...grpc.CallOption) (*ConfigDeleteOperation, error)
}

var _ ConfigClient = configClient{}

type configClient struct {
	connector transport.Connector
}

// NewConfigClient returns ConfigClient implementation.
func NewConfigClient(connector transport.Connector) ConfigClient {
	return configClient{connector}
}

// ConfigCreateOperation is used to monitor the state of Create operations.
type ConfigCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConfigCreateOperation) Metadata() *api.CreateConfigMetadata {
	return o.Operation.Metadata().(*api.CreateConfigMetadata)
}

// Response retrieves the operation response.
func (o *ConfigCreateOperation) Response() *config.Config {
	return o.Operation.Response().(*config.Config)
}

// Wait polls the operation until it's done.
func (o *ConfigCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*config.Config, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*config.Config)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConfigCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*config.Config, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*config.Config)
	return response, err
}

// Create is an operation of Yandex.Cloud Api Config service.
// It returns an object which should be used to monitor the operation state.
func (c configClient) Create(ctx context.Context, in *api.CreateConfigRequest, opts ...grpc.CallOption) (*ConfigCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConfigCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewConfigServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.CreateConfigMetadata).GetConfigId()
		},
		MetadataType: (*api.CreateConfigMetadata)(nil),
		ResponseType: (*config.Config)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConfigCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Api Config service.
func (c configClient) Get(ctx context.Context, in *api.GetConfigRequest, opts ...grpc.CallOption) (*config.Config, error) {
	connection, err := c.connector.GetConnection(ctx, ConfigGet, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewConfigServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Api Config service.
func (c configClient) List(ctx context.Context, in *api.ListConfigsRequest, opts ...grpc.CallOption) (*api.ListConfigsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConfigList, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewConfigServiceClient(connection).List(ctx, in, opts...)
}

// ConfigDeleteOperation is used to monitor the state of Delete operations.
type ConfigDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConfigDeleteOperation) Metadata() *api.DeleteConfigMetadata {
	return o.Operation.Metadata().(*api.DeleteConfigMetadata)
}

// Response retrieves the operation response.
func (o *ConfigDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConfigDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConfigDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Api Config service.
// It returns an object which should be used to monitor the operation state.
func (c configClient) Delete(ctx context.Context, in *api.DeleteConfigRequest, opts ...grpc.CallOption) (*ConfigDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConfigDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewConfigServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.DeleteConfigMetadata).GetConfigId()
		},
		MetadataType: (*api.DeleteConfigMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConfigDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c configClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConfigOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ConfigCreate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.ConfigService.Create")
	ConfigGet             = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.ConfigService.Get")
	ConfigList            = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.ConfigService.List")
	ConfigDelete          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.ConfigService.Delete")
	ConfigOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
