// Code generated by sdkgen-v2. DO NOT EDIT.
package apisdk

import (
	"context"

	api "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1"
	regression "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1/regression"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RegressionDashboardClient provides methods for managing RegressionDashboard resources of Yandex.Cloud Api.
type RegressionDashboardClient interface {
	Create(context.Context, *api.CreateRegressionDashboardRequest, ...grpc.CallOption) (*RegressionDashboardCreateOperation, error)
	Get(context.Context, *api.GetRegressionDashboardRequest, ...grpc.CallOption) (*regression.Dashboard, error)
	List(context.Context, *api.ListRegressionDashboardsRequest, ...grpc.CallOption) (*api.ListRegressionDashboardsResponse, error)
	Delete(context.Context, *api.DeleteRegressionDashboardRequest, ...grpc.CallOption) (*RegressionDashboardDeleteOperation, error)
	Update(context.Context, *api.UpdateRegressionDashboardRequest, ...grpc.CallOption) (*RegressionDashboardUpdateOperation, error)
}

var _ RegressionDashboardClient = regressionDashboardClient{}

type regressionDashboardClient struct {
	connector transport.Connector
}

// NewRegressionDashboardClient returns RegressionDashboardClient implementation.
func NewRegressionDashboardClient(connector transport.Connector) RegressionDashboardClient {
	return regressionDashboardClient{connector}
}

// RegressionDashboardCreateOperation is used to monitor the state of Create operations.
type RegressionDashboardCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegressionDashboardCreateOperation) Metadata() *api.CreateRegressionDashboardMetadata {
	return o.Operation.Metadata().(*api.CreateRegressionDashboardMetadata)
}

// Response retrieves the operation response.
func (o *RegressionDashboardCreateOperation) Response() *regression.Dashboard {
	return o.Operation.Response().(*regression.Dashboard)
}

// Wait polls the operation until it's done.
func (o *RegressionDashboardCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*regression.Dashboard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*regression.Dashboard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegressionDashboardCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*regression.Dashboard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*regression.Dashboard)
	return response, err
}

// Create is an operation of Yandex.Cloud Api RegressionDashboard service.
// It returns an object which should be used to monitor the operation state.
func (c regressionDashboardClient) Create(ctx context.Context, in *api.CreateRegressionDashboardRequest, opts ...grpc.CallOption) (*RegressionDashboardCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewRegressionDashboardServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*api.CreateRegressionDashboardMetadata)(nil),
		ResponseType: (*regression.Dashboard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegressionDashboardCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Api RegressionDashboard service.
func (c regressionDashboardClient) Get(ctx context.Context, in *api.GetRegressionDashboardRequest, opts ...grpc.CallOption) (*regression.Dashboard, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardGet, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewRegressionDashboardServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Api RegressionDashboard service.
func (c regressionDashboardClient) List(ctx context.Context, in *api.ListRegressionDashboardsRequest, opts ...grpc.CallOption) (*api.ListRegressionDashboardsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardList, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewRegressionDashboardServiceClient(connection).List(ctx, in, opts...)
}

// RegressionDashboardDeleteOperation is used to monitor the state of Delete operations.
type RegressionDashboardDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegressionDashboardDeleteOperation) Metadata() *api.DeleteRegressionDashboardMetadata {
	return o.Operation.Metadata().(*api.DeleteRegressionDashboardMetadata)
}

// Response retrieves the operation response.
func (o *RegressionDashboardDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RegressionDashboardDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegressionDashboardDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Api RegressionDashboard service.
// It returns an object which should be used to monitor the operation state.
func (c regressionDashboardClient) Delete(ctx context.Context, in *api.DeleteRegressionDashboardRequest, opts ...grpc.CallOption) (*RegressionDashboardDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewRegressionDashboardServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*api.DeleteRegressionDashboardMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegressionDashboardDeleteOperation{*op}, nil
}

// RegressionDashboardUpdateOperation is used to monitor the state of Update operations.
type RegressionDashboardUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RegressionDashboardUpdateOperation) Metadata() *api.UpdateRegressionDashboardMetadata {
	return o.Operation.Metadata().(*api.UpdateRegressionDashboardMetadata)
}

// Response retrieves the operation response.
func (o *RegressionDashboardUpdateOperation) Response() *regression.Dashboard {
	return o.Operation.Response().(*regression.Dashboard)
}

// Wait polls the operation until it's done.
func (o *RegressionDashboardUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*regression.Dashboard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*regression.Dashboard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RegressionDashboardUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*regression.Dashboard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*regression.Dashboard)
	return response, err
}

// Update is an operation of Yandex.Cloud Api RegressionDashboard service.
// It returns an object which should be used to monitor the operation state.
func (c regressionDashboardClient) Update(ctx context.Context, in *api.UpdateRegressionDashboardRequest, opts ...grpc.CallOption) (*RegressionDashboardUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewRegressionDashboardServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*api.UpdateRegressionDashboardMetadata)(nil),
		ResponseType: (*regression.Dashboard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RegressionDashboardUpdateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c regressionDashboardClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RegressionDashboardOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RegressionDashboardCreate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.RegressionDashboardService.Create")
	RegressionDashboardGet             = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.RegressionDashboardService.Get")
	RegressionDashboardList            = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.RegressionDashboardService.List")
	RegressionDashboardDelete          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.RegressionDashboardService.Delete")
	RegressionDashboardUpdate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.RegressionDashboardService.Update")
	RegressionDashboardOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
