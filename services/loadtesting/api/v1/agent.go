// Code generated by sdkgen-v2. DO NOT EDIT.
package apisdk

import (
	"context"

	api "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1"
	agent "github.com/yandex-cloud/go-genproto/yandex/cloud/loadtesting/api/v1/agent"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AgentClient provides methods for managing Agent resources of Yandex.Cloud Api.
type AgentClient interface {
	Create(context.Context, *api.CreateAgentRequest, ...grpc.CallOption) (*AgentCreateOperation, error)
	Get(context.Context, *api.GetAgentRequest, ...grpc.CallOption) (*agent.Agent, error)
	List(context.Context, *api.ListAgentsRequest, ...grpc.CallOption) (*api.ListAgentsResponse, error)
	Delete(context.Context, *api.DeleteAgentRequest, ...grpc.CallOption) (*AgentDeleteOperation, error)
	Update(context.Context, *api.UpdateAgentRequest, ...grpc.CallOption) (*AgentUpdateOperation, error)
}

var _ AgentClient = agentClient{}

type agentClient struct {
	connector transport.Connector
}

// NewAgentClient returns AgentClient implementation.
func NewAgentClient(connector transport.Connector) AgentClient {
	return agentClient{connector}
}

// AgentCreateOperation is used to monitor the state of Create operations.
type AgentCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AgentCreateOperation) Metadata() *api.CreateAgentMetadata {
	return o.Operation.Metadata().(*api.CreateAgentMetadata)
}

// Response retrieves the operation response.
func (o *AgentCreateOperation) Response() *agent.Agent {
	return o.Operation.Response().(*agent.Agent)
}

// Wait polls the operation until it's done.
func (o *AgentCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*agent.Agent, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*agent.Agent)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AgentCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*agent.Agent, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*agent.Agent)
	return response, err
}

// Create is an operation of Yandex.Cloud Api Agent service.
// It returns an object which should be used to monitor the operation state.
func (c agentClient) Create(ctx context.Context, in *api.CreateAgentRequest, opts ...grpc.CallOption) (*AgentCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewAgentServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.CreateAgentMetadata).GetAgentId()
		},
		MetadataType: (*api.CreateAgentMetadata)(nil),
		ResponseType: (*agent.Agent)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AgentCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Api Agent service.
func (c agentClient) Get(ctx context.Context, in *api.GetAgentRequest, opts ...grpc.CallOption) (*agent.Agent, error) {
	connection, err := c.connector.GetConnection(ctx, AgentGet, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewAgentServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Api Agent service.
func (c agentClient) List(ctx context.Context, in *api.ListAgentsRequest, opts ...grpc.CallOption) (*api.ListAgentsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AgentList, opts...)
	if err != nil {
		return nil, err
	}
	return api.NewAgentServiceClient(connection).List(ctx, in, opts...)
}

// AgentDeleteOperation is used to monitor the state of Delete operations.
type AgentDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AgentDeleteOperation) Metadata() *api.DeleteAgentMetadata {
	return o.Operation.Metadata().(*api.DeleteAgentMetadata)
}

// Response retrieves the operation response.
func (o *AgentDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AgentDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AgentDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Api Agent service.
// It returns an object which should be used to monitor the operation state.
func (c agentClient) Delete(ctx context.Context, in *api.DeleteAgentRequest, opts ...grpc.CallOption) (*AgentDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewAgentServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.DeleteAgentMetadata).GetAgentId()
		},
		MetadataType: (*api.DeleteAgentMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AgentDeleteOperation{*op}, nil
}

// AgentUpdateOperation is used to monitor the state of Update operations.
type AgentUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AgentUpdateOperation) Metadata() *api.UpdateAgentMetadata {
	return o.Operation.Metadata().(*api.UpdateAgentMetadata)
}

// Response retrieves the operation response.
func (o *AgentUpdateOperation) Response() *agent.Agent {
	return o.Operation.Response().(*agent.Agent)
}

// Wait polls the operation until it's done.
func (o *AgentUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*agent.Agent, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*agent.Agent)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AgentUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*agent.Agent, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*agent.Agent)
	return response, err
}

// Update is an operation of Yandex.Cloud Api Agent service.
// It returns an object which should be used to monitor the operation state.
func (c agentClient) Update(ctx context.Context, in *api.UpdateAgentRequest, opts ...grpc.CallOption) (*AgentUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := api.NewAgentServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*api.UpdateAgentMetadata).GetAgentId()
		},
		MetadataType: (*api.UpdateAgentMetadata)(nil),
		ResponseType: (*agent.Agent)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AgentUpdateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c agentClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AgentOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AgentCreate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.AgentService.Create")
	AgentGet             = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.AgentService.Get")
	AgentList            = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.AgentService.List")
	AgentDelete          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.AgentService.Delete")
	AgentUpdate          = protoreflect.FullName("yandex.cloud.loadtesting.api.v1.AgentService.Update")
	AgentOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
