// Code generated by sdkgen-v2. DO NOT EDIT.
package loadbalancersdk

import (
	"context"

	loadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/loadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// NetworkLoadBalancerClient provides methods for managing NetworkLoadBalancer resources of Yandex.Cloud LoadBalancer.
type NetworkLoadBalancerClient interface {
	Get(context.Context, *loadbalancer.GetNetworkLoadBalancerRequest, ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error)
	List(context.Context, *loadbalancer.ListNetworkLoadBalancersRequest, ...grpc.CallOption) (*loadbalancer.ListNetworkLoadBalancersResponse, error)
	Create(context.Context, *loadbalancer.CreateNetworkLoadBalancerRequest, ...grpc.CallOption) (*NetworkLoadBalancerCreateOperation, error)
	Update(context.Context, *loadbalancer.UpdateNetworkLoadBalancerRequest, ...grpc.CallOption) (*NetworkLoadBalancerUpdateOperation, error)
	Delete(context.Context, *loadbalancer.DeleteNetworkLoadBalancerRequest, ...grpc.CallOption) (*NetworkLoadBalancerDeleteOperation, error)
	Start(context.Context, *loadbalancer.StartNetworkLoadBalancerRequest, ...grpc.CallOption) (*NetworkLoadBalancerStartOperation, error)
	Stop(context.Context, *loadbalancer.StopNetworkLoadBalancerRequest, ...grpc.CallOption) (*NetworkLoadBalancerStopOperation, error)
	AttachTargetGroup(context.Context, *loadbalancer.AttachNetworkLoadBalancerTargetGroupRequest, ...grpc.CallOption) (*NetworkLoadBalancerAttachTargetGroupOperation, error)
	DetachTargetGroup(context.Context, *loadbalancer.DetachNetworkLoadBalancerTargetGroupRequest, ...grpc.CallOption) (*NetworkLoadBalancerDetachTargetGroupOperation, error)
	GetTargetStates(context.Context, *loadbalancer.GetTargetStatesRequest, ...grpc.CallOption) (*loadbalancer.GetTargetStatesResponse, error)
	AddListener(context.Context, *loadbalancer.AddNetworkLoadBalancerListenerRequest, ...grpc.CallOption) (*NetworkLoadBalancerAddListenerOperation, error)
	RemoveListener(context.Context, *loadbalancer.RemoveNetworkLoadBalancerListenerRequest, ...grpc.CallOption) (*NetworkLoadBalancerRemoveListenerOperation, error)
	ListOperations(context.Context, *loadbalancer.ListNetworkLoadBalancerOperationsRequest, ...grpc.CallOption) (*loadbalancer.ListNetworkLoadBalancerOperationsResponse, error)
	DisableZones(context.Context, *loadbalancer.DisableZonesRequest, ...grpc.CallOption) (*NetworkLoadBalancerDisableZonesOperation, error)
	EnableZones(context.Context, *loadbalancer.EnableZonesRequest, ...grpc.CallOption) (*NetworkLoadBalancerEnableZonesOperation, error)
}

var _ NetworkLoadBalancerClient = networkLoadBalancerClient{}

type networkLoadBalancerClient struct {
	connector transport.Connector
}

// NewNetworkLoadBalancerClient returns NetworkLoadBalancerClient implementation.
func NewNetworkLoadBalancerClient(connector transport.Connector) NetworkLoadBalancerClient {
	return networkLoadBalancerClient{connector}
}

// Get is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
func (c networkLoadBalancerClient) Get(ctx context.Context, in *loadbalancer.GetNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerGet, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
func (c networkLoadBalancerClient) List(ctx context.Context, in *loadbalancer.ListNetworkLoadBalancersRequest, opts ...grpc.CallOption) (*loadbalancer.ListNetworkLoadBalancersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerList, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewNetworkLoadBalancerServiceClient(connection).List(ctx, in, opts...)
}

// NetworkLoadBalancerCreateOperation is used to monitor the state of Create operations.
type NetworkLoadBalancerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerCreateOperation) Metadata() *loadbalancer.CreateNetworkLoadBalancerMetadata {
	return o.Operation.Metadata().(*loadbalancer.CreateNetworkLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerCreateOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// Create is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) Create(ctx context.Context, in *loadbalancer.CreateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.CreateNetworkLoadBalancerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.CreateNetworkLoadBalancerMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerCreateOperation{*op}, nil
}

// NetworkLoadBalancerUpdateOperation is used to monitor the state of Update operations.
type NetworkLoadBalancerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerUpdateOperation) Metadata() *loadbalancer.UpdateNetworkLoadBalancerMetadata {
	return o.Operation.Metadata().(*loadbalancer.UpdateNetworkLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerUpdateOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// Update is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) Update(ctx context.Context, in *loadbalancer.UpdateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.UpdateNetworkLoadBalancerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.UpdateNetworkLoadBalancerMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerUpdateOperation{*op}, nil
}

// NetworkLoadBalancerDeleteOperation is used to monitor the state of Delete operations.
type NetworkLoadBalancerDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerDeleteOperation) Metadata() *loadbalancer.DeleteNetworkLoadBalancerMetadata {
	return o.Operation.Metadata().(*loadbalancer.DeleteNetworkLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) Delete(ctx context.Context, in *loadbalancer.DeleteNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.DeleteNetworkLoadBalancerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.DeleteNetworkLoadBalancerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerDeleteOperation{*op}, nil
}

// NetworkLoadBalancerStartOperation is used to monitor the state of Start operations.
type NetworkLoadBalancerStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerStartOperation) Metadata() *loadbalancer.StartNetworkLoadBalancerMetadata {
	return o.Operation.Metadata().(*loadbalancer.StartNetworkLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerStartOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Start is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) Start(ctx context.Context, in *loadbalancer.StartNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.StartNetworkLoadBalancerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.StartNetworkLoadBalancerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerStartOperation{*op}, nil
}

// NetworkLoadBalancerStopOperation is used to monitor the state of Stop operations.
type NetworkLoadBalancerStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerStopOperation) Metadata() *loadbalancer.StopNetworkLoadBalancerMetadata {
	return o.Operation.Metadata().(*loadbalancer.StopNetworkLoadBalancerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerStopOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Stop is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) Stop(ctx context.Context, in *loadbalancer.StopNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.StopNetworkLoadBalancerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.StopNetworkLoadBalancerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerStopOperation{*op}, nil
}

// NetworkLoadBalancerAttachTargetGroupOperation is used to monitor the state of AttachTargetGroup operations.
type NetworkLoadBalancerAttachTargetGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerAttachTargetGroupOperation) Metadata() *loadbalancer.AttachNetworkLoadBalancerTargetGroupMetadata {
	return o.Operation.Metadata().(*loadbalancer.AttachNetworkLoadBalancerTargetGroupMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerAttachTargetGroupOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerAttachTargetGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerAttachTargetGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// AttachTargetGroup is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) AttachTargetGroup(ctx context.Context, in *loadbalancer.AttachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerAttachTargetGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerAttachTargetGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).AttachTargetGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.AttachNetworkLoadBalancerTargetGroupMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.AttachNetworkLoadBalancerTargetGroupMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerAttachTargetGroupOperation{*op}, nil
}

// NetworkLoadBalancerDetachTargetGroupOperation is used to monitor the state of DetachTargetGroup operations.
type NetworkLoadBalancerDetachTargetGroupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerDetachTargetGroupOperation) Metadata() *loadbalancer.DetachNetworkLoadBalancerTargetGroupMetadata {
	return o.Operation.Metadata().(*loadbalancer.DetachNetworkLoadBalancerTargetGroupMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerDetachTargetGroupOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerDetachTargetGroupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerDetachTargetGroupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// DetachTargetGroup is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) DetachTargetGroup(ctx context.Context, in *loadbalancer.DetachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerDetachTargetGroupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerDetachTargetGroup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).DetachTargetGroup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.DetachNetworkLoadBalancerTargetGroupMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.DetachNetworkLoadBalancerTargetGroupMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerDetachTargetGroupOperation{*op}, nil
}

// GetTargetStates is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
func (c networkLoadBalancerClient) GetTargetStates(ctx context.Context, in *loadbalancer.GetTargetStatesRequest, opts ...grpc.CallOption) (*loadbalancer.GetTargetStatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerGetTargetStates, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewNetworkLoadBalancerServiceClient(connection).GetTargetStates(ctx, in, opts...)
}

// NetworkLoadBalancerAddListenerOperation is used to monitor the state of AddListener operations.
type NetworkLoadBalancerAddListenerOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerAddListenerOperation) Metadata() *loadbalancer.AddNetworkLoadBalancerListenerMetadata {
	return o.Operation.Metadata().(*loadbalancer.AddNetworkLoadBalancerListenerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerAddListenerOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerAddListenerOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerAddListenerOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// AddListener is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) AddListener(ctx context.Context, in *loadbalancer.AddNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerAddListenerOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerAddListener, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).AddListener(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.AddNetworkLoadBalancerListenerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.AddNetworkLoadBalancerListenerMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerAddListenerOperation{*op}, nil
}

// NetworkLoadBalancerRemoveListenerOperation is used to monitor the state of RemoveListener operations.
type NetworkLoadBalancerRemoveListenerOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerRemoveListenerOperation) Metadata() *loadbalancer.RemoveNetworkLoadBalancerListenerMetadata {
	return o.Operation.Metadata().(*loadbalancer.RemoveNetworkLoadBalancerListenerMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerRemoveListenerOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerRemoveListenerOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerRemoveListenerOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// RemoveListener is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) RemoveListener(ctx context.Context, in *loadbalancer.RemoveNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerRemoveListenerOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerRemoveListener, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).RemoveListener(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.RemoveNetworkLoadBalancerListenerMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.RemoveNetworkLoadBalancerListenerMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerRemoveListenerOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
func (c networkLoadBalancerClient) ListOperations(ctx context.Context, in *loadbalancer.ListNetworkLoadBalancerOperationsRequest, opts ...grpc.CallOption) (*loadbalancer.ListNetworkLoadBalancerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewNetworkLoadBalancerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// NetworkLoadBalancerDisableZonesOperation is used to monitor the state of DisableZones operations.
type NetworkLoadBalancerDisableZonesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerDisableZonesOperation) Metadata() *loadbalancer.DisableZonesMetadata {
	return o.Operation.Metadata().(*loadbalancer.DisableZonesMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerDisableZonesOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerDisableZonesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerDisableZonesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// DisableZones is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) DisableZones(ctx context.Context, in *loadbalancer.DisableZonesRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerDisableZonesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerDisableZones, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).DisableZones(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.DisableZonesMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.DisableZonesMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerDisableZonesOperation{*op}, nil
}

// NetworkLoadBalancerEnableZonesOperation is used to monitor the state of EnableZones operations.
type NetworkLoadBalancerEnableZonesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkLoadBalancerEnableZonesOperation) Metadata() *loadbalancer.EnableZonesMetadata {
	return o.Operation.Metadata().(*loadbalancer.EnableZonesMetadata)
}

// Response retrieves the operation response.
func (o *NetworkLoadBalancerEnableZonesOperation) Response() *loadbalancer.NetworkLoadBalancer {
	return o.Operation.Response().(*loadbalancer.NetworkLoadBalancer)
}

// Wait polls the operation until it's done.
func (o *NetworkLoadBalancerEnableZonesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkLoadBalancerEnableZonesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.NetworkLoadBalancer, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.NetworkLoadBalancer)
	return response, err
}

// EnableZones is an operation of Yandex.Cloud LoadBalancer NetworkLoadBalancer service.
// It returns an object which should be used to monitor the operation state.
func (c networkLoadBalancerClient) EnableZones(ctx context.Context, in *loadbalancer.EnableZonesRequest, opts ...grpc.CallOption) (*NetworkLoadBalancerEnableZonesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerEnableZones, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewNetworkLoadBalancerServiceClient(connection).EnableZones(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.EnableZonesMetadata).GetNetworkLoadBalancerId()
		},
		MetadataType: (*loadbalancer.EnableZonesMetadata)(nil),
		ResponseType: (*loadbalancer.NetworkLoadBalancer)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkLoadBalancerEnableZonesOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c networkLoadBalancerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkLoadBalancerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	NetworkLoadBalancerGet               = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Get")
	NetworkLoadBalancerList              = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.List")
	NetworkLoadBalancerCreate            = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Create")
	NetworkLoadBalancerUpdate            = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Update")
	NetworkLoadBalancerDelete            = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Delete")
	NetworkLoadBalancerStart             = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Start")
	NetworkLoadBalancerStop              = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.Stop")
	NetworkLoadBalancerAttachTargetGroup = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.AttachTargetGroup")
	NetworkLoadBalancerDetachTargetGroup = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.DetachTargetGroup")
	NetworkLoadBalancerGetTargetStates   = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.GetTargetStates")
	NetworkLoadBalancerAddListener       = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.AddListener")
	NetworkLoadBalancerRemoveListener    = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.RemoveListener")
	NetworkLoadBalancerListOperations    = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.ListOperations")
	NetworkLoadBalancerDisableZones      = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.DisableZones")
	NetworkLoadBalancerEnableZones       = protoreflect.FullName("yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService.EnableZones")
	NetworkLoadBalancerOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
