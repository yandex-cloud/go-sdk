// Code generated by sdkgen-v2. DO NOT EDIT.
package loadbalancersdk

import (
	"context"

	loadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/loadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TargetGroupClient provides methods for managing TargetGroup resources of Yandex.Cloud LoadBalancer.
type TargetGroupClient interface {
	Get(context.Context, *loadbalancer.GetTargetGroupRequest, ...grpc.CallOption) (*loadbalancer.TargetGroup, error)
	List(context.Context, *loadbalancer.ListTargetGroupsRequest, ...grpc.CallOption) (*loadbalancer.ListTargetGroupsResponse, error)
	Create(context.Context, *loadbalancer.CreateTargetGroupRequest, ...grpc.CallOption) (*TargetGroupCreateOperation, error)
	Update(context.Context, *loadbalancer.UpdateTargetGroupRequest, ...grpc.CallOption) (*TargetGroupUpdateOperation, error)
	Delete(context.Context, *loadbalancer.DeleteTargetGroupRequest, ...grpc.CallOption) (*TargetGroupDeleteOperation, error)
	AddTargets(context.Context, *loadbalancer.AddTargetsRequest, ...grpc.CallOption) (*TargetGroupAddTargetsOperation, error)
	RemoveTargets(context.Context, *loadbalancer.RemoveTargetsRequest, ...grpc.CallOption) (*TargetGroupRemoveTargetsOperation, error)
	ListOperations(context.Context, *loadbalancer.ListTargetGroupOperationsRequest, ...grpc.CallOption) (*loadbalancer.ListTargetGroupOperationsResponse, error)
}

var _ TargetGroupClient = targetGroupClient{}

type targetGroupClient struct {
	connector transport.Connector
}

// NewTargetGroupClient returns TargetGroupClient implementation.
func NewTargetGroupClient(connector transport.Connector) TargetGroupClient {
	return targetGroupClient{connector}
}

// Get is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
func (c targetGroupClient) Get(ctx context.Context, in *loadbalancer.GetTargetGroupRequest, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewTargetGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
func (c targetGroupClient) List(ctx context.Context, in *loadbalancer.ListTargetGroupsRequest, opts ...grpc.CallOption) (*loadbalancer.ListTargetGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewTargetGroupServiceClient(connection).List(ctx, in, opts...)
}

// TargetGroupCreateOperation is used to monitor the state of Create operations.
type TargetGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TargetGroupCreateOperation) Metadata() *loadbalancer.CreateTargetGroupMetadata {
	return o.Operation.Metadata().(*loadbalancer.CreateTargetGroupMetadata)
}

// Response retrieves the operation response.
func (o *TargetGroupCreateOperation) Response() *loadbalancer.TargetGroup {
	return o.Operation.Response().(*loadbalancer.TargetGroup)
}

// Wait polls the operation until it's done.
func (o *TargetGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TargetGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
// It returns an object which should be used to monitor the operation state.
func (c targetGroupClient) Create(ctx context.Context, in *loadbalancer.CreateTargetGroupRequest, opts ...grpc.CallOption) (*TargetGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewTargetGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.CreateTargetGroupMetadata).GetTargetGroupId()
		},
		MetadataType: (*loadbalancer.CreateTargetGroupMetadata)(nil),
		ResponseType: (*loadbalancer.TargetGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TargetGroupCreateOperation{*op}, nil
}

// TargetGroupUpdateOperation is used to monitor the state of Update operations.
type TargetGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TargetGroupUpdateOperation) Metadata() *loadbalancer.UpdateTargetGroupMetadata {
	return o.Operation.Metadata().(*loadbalancer.UpdateTargetGroupMetadata)
}

// Response retrieves the operation response.
func (o *TargetGroupUpdateOperation) Response() *loadbalancer.TargetGroup {
	return o.Operation.Response().(*loadbalancer.TargetGroup)
}

// Wait polls the operation until it's done.
func (o *TargetGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TargetGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
// It returns an object which should be used to monitor the operation state.
func (c targetGroupClient) Update(ctx context.Context, in *loadbalancer.UpdateTargetGroupRequest, opts ...grpc.CallOption) (*TargetGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewTargetGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.UpdateTargetGroupMetadata).GetTargetGroupId()
		},
		MetadataType: (*loadbalancer.UpdateTargetGroupMetadata)(nil),
		ResponseType: (*loadbalancer.TargetGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TargetGroupUpdateOperation{*op}, nil
}

// TargetGroupDeleteOperation is used to monitor the state of Delete operations.
type TargetGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TargetGroupDeleteOperation) Metadata() *loadbalancer.DeleteTargetGroupMetadata {
	return o.Operation.Metadata().(*loadbalancer.DeleteTargetGroupMetadata)
}

// Response retrieves the operation response.
func (o *TargetGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TargetGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TargetGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
// It returns an object which should be used to monitor the operation state.
func (c targetGroupClient) Delete(ctx context.Context, in *loadbalancer.DeleteTargetGroupRequest, opts ...grpc.CallOption) (*TargetGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewTargetGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.DeleteTargetGroupMetadata).GetTargetGroupId()
		},
		MetadataType: (*loadbalancer.DeleteTargetGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TargetGroupDeleteOperation{*op}, nil
}

// TargetGroupAddTargetsOperation is used to monitor the state of AddTargets operations.
type TargetGroupAddTargetsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TargetGroupAddTargetsOperation) Metadata() *loadbalancer.AddTargetsMetadata {
	return o.Operation.Metadata().(*loadbalancer.AddTargetsMetadata)
}

// Response retrieves the operation response.
func (o *TargetGroupAddTargetsOperation) Response() *loadbalancer.TargetGroup {
	return o.Operation.Response().(*loadbalancer.TargetGroup)
}

// Wait polls the operation until it's done.
func (o *TargetGroupAddTargetsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TargetGroupAddTargetsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// AddTargets is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
// It returns an object which should be used to monitor the operation state.
func (c targetGroupClient) AddTargets(ctx context.Context, in *loadbalancer.AddTargetsRequest, opts ...grpc.CallOption) (*TargetGroupAddTargetsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupAddTargets, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewTargetGroupServiceClient(connection).AddTargets(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.AddTargetsMetadata).GetTargetGroupId()
		},
		MetadataType: (*loadbalancer.AddTargetsMetadata)(nil),
		ResponseType: (*loadbalancer.TargetGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TargetGroupAddTargetsOperation{*op}, nil
}

// TargetGroupRemoveTargetsOperation is used to monitor the state of RemoveTargets operations.
type TargetGroupRemoveTargetsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TargetGroupRemoveTargetsOperation) Metadata() *loadbalancer.RemoveTargetsMetadata {
	return o.Operation.Metadata().(*loadbalancer.RemoveTargetsMetadata)
}

// Response retrieves the operation response.
func (o *TargetGroupRemoveTargetsOperation) Response() *loadbalancer.TargetGroup {
	return o.Operation.Response().(*loadbalancer.TargetGroup)
}

// Wait polls the operation until it's done.
func (o *TargetGroupRemoveTargetsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TargetGroupRemoveTargetsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*loadbalancer.TargetGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*loadbalancer.TargetGroup)
	return response, err
}

// RemoveTargets is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
// It returns an object which should be used to monitor the operation state.
func (c targetGroupClient) RemoveTargets(ctx context.Context, in *loadbalancer.RemoveTargetsRequest, opts ...grpc.CallOption) (*TargetGroupRemoveTargetsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupRemoveTargets, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := loadbalancer.NewTargetGroupServiceClient(connection).RemoveTargets(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*loadbalancer.RemoveTargetsMetadata).GetTargetGroupId()
		},
		MetadataType: (*loadbalancer.RemoveTargetsMetadata)(nil),
		ResponseType: (*loadbalancer.TargetGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TargetGroupRemoveTargetsOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud LoadBalancer TargetGroup service.
func (c targetGroupClient) ListOperations(ctx context.Context, in *loadbalancer.ListTargetGroupOperationsRequest, opts ...grpc.CallOption) (*loadbalancer.ListTargetGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return loadbalancer.NewTargetGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c targetGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TargetGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TargetGroupGet             = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.Get")
	TargetGroupList            = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.List")
	TargetGroupCreate          = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.Create")
	TargetGroupUpdate          = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.Update")
	TargetGroupDelete          = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.Delete")
	TargetGroupAddTargets      = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.AddTargets")
	TargetGroupRemoveTargets   = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.RemoveTargets")
	TargetGroupListOperations  = protoreflect.FullName("yandex.cloud.loadbalancer.v1.TargetGroupService.ListOperations")
	TargetGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
