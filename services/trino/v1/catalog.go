// Code generated by sdkgen-v2. DO NOT EDIT.
package trinosdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	trino "github.com/yandex-cloud/go-genproto/yandex/cloud/trino/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CatalogClient provides methods for managing Catalog resources of Yandex.Cloud Trino.
type CatalogClient interface {
	Get(context.Context, *trino.GetCatalogRequest, ...grpc.CallOption) (*trino.Catalog, error)
	List(context.Context, *trino.ListCatalogsRequest, ...grpc.CallOption) (*trino.ListCatalogsResponse, error)
	Create(context.Context, *trino.CreateCatalogRequest, ...grpc.CallOption) (*CatalogCreateOperation, error)
	Update(context.Context, *trino.UpdateCatalogRequest, ...grpc.CallOption) (*CatalogUpdateOperation, error)
	Delete(context.Context, *trino.DeleteCatalogRequest, ...grpc.CallOption) (*CatalogDeleteOperation, error)
}

var _ CatalogClient = catalogClient{}

type catalogClient struct {
	connector transport.Connector
}

// NewCatalogClient returns CatalogClient implementation.
func NewCatalogClient(connector transport.Connector) CatalogClient {
	return catalogClient{connector}
}

// Get is an operation of Yandex.Cloud Trino Catalog service.
func (c catalogClient) Get(ctx context.Context, in *trino.GetCatalogRequest, opts ...grpc.CallOption) (*trino.Catalog, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogGet, opts...)
	if err != nil {
		return nil, err
	}
	return trino.NewCatalogServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Trino Catalog service.
func (c catalogClient) List(ctx context.Context, in *trino.ListCatalogsRequest, opts ...grpc.CallOption) (*trino.ListCatalogsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogList, opts...)
	if err != nil {
		return nil, err
	}
	return trino.NewCatalogServiceClient(connection).List(ctx, in, opts...)
}

// CatalogCreateOperation is used to monitor the state of Create operations.
type CatalogCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CatalogCreateOperation) Metadata() *trino.CreateCatalogMetadata {
	return o.Operation.Metadata().(*trino.CreateCatalogMetadata)
}

// Response retrieves the operation response.
func (o *CatalogCreateOperation) Response() *trino.Catalog {
	return o.Operation.Response().(*trino.Catalog)
}

// Wait polls the operation until it's done.
func (o *CatalogCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*trino.Catalog, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*trino.Catalog)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CatalogCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*trino.Catalog, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*trino.Catalog)
	return response, err
}

// Create is an operation of Yandex.Cloud Trino Catalog service.
// It returns an object which should be used to monitor the operation state.
func (c catalogClient) Create(ctx context.Context, in *trino.CreateCatalogRequest, opts ...grpc.CallOption) (*CatalogCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := trino.NewCatalogServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*trino.CreateCatalogMetadata).GetCatalogId()
		},
		MetadataType: (*trino.CreateCatalogMetadata)(nil),
		ResponseType: (*trino.Catalog)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CatalogCreateOperation{*op}, nil
}

// CatalogUpdateOperation is used to monitor the state of Update operations.
type CatalogUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CatalogUpdateOperation) Metadata() *trino.UpdateCatalogMetadata {
	return o.Operation.Metadata().(*trino.UpdateCatalogMetadata)
}

// Response retrieves the operation response.
func (o *CatalogUpdateOperation) Response() *trino.Catalog {
	return o.Operation.Response().(*trino.Catalog)
}

// Wait polls the operation until it's done.
func (o *CatalogUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*trino.Catalog, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*trino.Catalog)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CatalogUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*trino.Catalog, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*trino.Catalog)
	return response, err
}

// Update is an operation of Yandex.Cloud Trino Catalog service.
// It returns an object which should be used to monitor the operation state.
func (c catalogClient) Update(ctx context.Context, in *trino.UpdateCatalogRequest, opts ...grpc.CallOption) (*CatalogUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := trino.NewCatalogServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*trino.UpdateCatalogMetadata).GetCatalogId()
		},
		MetadataType: (*trino.UpdateCatalogMetadata)(nil),
		ResponseType: (*trino.Catalog)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CatalogUpdateOperation{*op}, nil
}

// CatalogDeleteOperation is used to monitor the state of Delete operations.
type CatalogDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CatalogDeleteOperation) Metadata() *trino.DeleteCatalogMetadata {
	return o.Operation.Metadata().(*trino.DeleteCatalogMetadata)
}

// Response retrieves the operation response.
func (o *CatalogDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CatalogDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CatalogDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Trino Catalog service.
// It returns an object which should be used to monitor the operation state.
func (c catalogClient) Delete(ctx context.Context, in *trino.DeleteCatalogRequest, opts ...grpc.CallOption) (*CatalogDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := trino.NewCatalogServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*trino.DeleteCatalogMetadata).GetCatalogId()
		},
		MetadataType: (*trino.DeleteCatalogMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CatalogDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c catalogClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CatalogOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CatalogGet             = protoreflect.FullName("yandex.cloud.trino.v1.CatalogService.Get")
	CatalogList            = protoreflect.FullName("yandex.cloud.trino.v1.CatalogService.List")
	CatalogCreate          = protoreflect.FullName("yandex.cloud.trino.v1.CatalogService.Create")
	CatalogUpdate          = protoreflect.FullName("yandex.cloud.trino.v1.CatalogService.Update")
	CatalogDelete          = protoreflect.FullName("yandex.cloud.trino.v1.CatalogService.Delete")
	CatalogOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
