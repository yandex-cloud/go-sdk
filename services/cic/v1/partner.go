// Code generated by sdkgen-v2. DO NOT EDIT.
package cicsdk

import (
	"context"

	cic "github.com/yandex-cloud/go-genproto/yandex/cloud/cic/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// PartnerClient provides methods for managing Partner resources of Yandex.Cloud Cic.
type PartnerClient interface {
	Get(context.Context, *cic.GetPartnerRequest, ...grpc.CallOption) (*cic.Partner, error)
	List(context.Context, *cic.ListPartnersRequest, ...grpc.CallOption) (*cic.ListPartnersResponse, error)
}

var _ PartnerClient = partnerClient{}

type partnerClient struct {
	connector transport.Connector
}

// NewPartnerClient returns PartnerClient implementation.
func NewPartnerClient(connector transport.Connector) PartnerClient {
	return partnerClient{connector}
}

// Get is an operation of Yandex.Cloud Cic Partner service.
func (c partnerClient) Get(ctx context.Context, in *cic.GetPartnerRequest, opts ...grpc.CallOption) (*cic.Partner, error) {
	connection, err := c.connector.GetConnection(ctx, PartnerGet, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPartnerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cic Partner service.
func (c partnerClient) List(ctx context.Context, in *cic.ListPartnersRequest, opts ...grpc.CallOption) (*cic.ListPartnersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PartnerList, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPartnerServiceClient(connection).List(ctx, in, opts...)
}

var (
	PartnerGet  = protoreflect.FullName("yandex.cloud.cic.v1.PartnerService.Get")
	PartnerList = protoreflect.FullName("yandex.cloud.cic.v1.PartnerService.List")
)
