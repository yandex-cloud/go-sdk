// Code generated by sdkgen-v2. DO NOT EDIT.
package cicsdk

import (
	"context"

	cic "github.com/yandex-cloud/go-genproto/yandex/cloud/cic/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// PublicConnectionClient provides methods for managing PublicConnection resources of Yandex.Cloud Cic.
type PublicConnectionClient interface {
	Get(context.Context, *cic.GetPublicConnectionRequest, ...grpc.CallOption) (*cic.PublicConnection, error)
	List(context.Context, *cic.ListPublicConnectionsRequest, ...grpc.CallOption) (*cic.ListPublicConnectionsResponse, error)
}

var _ PublicConnectionClient = publicConnectionClient{}

type publicConnectionClient struct {
	connector transport.Connector
}

// NewPublicConnectionClient returns PublicConnectionClient implementation.
func NewPublicConnectionClient(connector transport.Connector) PublicConnectionClient {
	return publicConnectionClient{connector}
}

// Get is an operation of Yandex.Cloud Cic PublicConnection service.
func (c publicConnectionClient) Get(ctx context.Context, in *cic.GetPublicConnectionRequest, opts ...grpc.CallOption) (*cic.PublicConnection, error) {
	connection, err := c.connector.GetConnection(ctx, PublicConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPublicConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cic PublicConnection service.
func (c publicConnectionClient) List(ctx context.Context, in *cic.ListPublicConnectionsRequest, opts ...grpc.CallOption) (*cic.ListPublicConnectionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PublicConnectionList, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPublicConnectionServiceClient(connection).List(ctx, in, opts...)
}

var (
	PublicConnectionGet  = protoreflect.FullName("yandex.cloud.cic.v1.PublicConnectionService.Get")
	PublicConnectionList = protoreflect.FullName("yandex.cloud.cic.v1.PublicConnectionService.List")
)
