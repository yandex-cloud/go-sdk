// Code generated by sdkgen-v2. DO NOT EDIT.
package cicsdk

import (
	"context"

	cic "github.com/yandex-cloud/go-genproto/yandex/cloud/cic/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TrunkConnectionClient provides methods for managing TrunkConnection resources of Yandex.Cloud Cic.
type TrunkConnectionClient interface {
	Get(context.Context, *cic.GetTrunkConnectionRequest, ...grpc.CallOption) (*cic.TrunkConnection, error)
	List(context.Context, *cic.ListTrunkConnectionsRequest, ...grpc.CallOption) (*cic.ListTrunkConnectionsResponse, error)
	Create(context.Context, *cic.CreateTrunkConnectionRequest, ...grpc.CallOption) (*TrunkConnectionCreateOperation, error)
	Update(context.Context, *cic.UpdateTrunkConnectionRequest, ...grpc.CallOption) (*TrunkConnectionUpdateOperation, error)
	Delete(context.Context, *cic.DeleteTrunkConnectionRequest, ...grpc.CallOption) (*TrunkConnectionDeleteOperation, error)
	ListOperations(context.Context, *cic.ListTrunkConnectionOperationsRequest, ...grpc.CallOption) (*cic.ListTrunkConnectionOperationsResponse, error)
}

var _ TrunkConnectionClient = trunkConnectionClient{}

type trunkConnectionClient struct {
	connector transport.Connector
}

// NewTrunkConnectionClient returns TrunkConnectionClient implementation.
func NewTrunkConnectionClient(connector transport.Connector) TrunkConnectionClient {
	return trunkConnectionClient{connector}
}

// Get is an operation of Yandex.Cloud Cic TrunkConnection service.
func (c trunkConnectionClient) Get(ctx context.Context, in *cic.GetTrunkConnectionRequest, opts ...grpc.CallOption) (*cic.TrunkConnection, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewTrunkConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cic TrunkConnection service.
func (c trunkConnectionClient) List(ctx context.Context, in *cic.ListTrunkConnectionsRequest, opts ...grpc.CallOption) (*cic.ListTrunkConnectionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionList, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewTrunkConnectionServiceClient(connection).List(ctx, in, opts...)
}

// TrunkConnectionCreateOperation is used to monitor the state of Create operations.
type TrunkConnectionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrunkConnectionCreateOperation) Metadata() *cic.CreateTrunkConnectionMetadata {
	return o.Operation.Metadata().(*cic.CreateTrunkConnectionMetadata)
}

// Response retrieves the operation response.
func (o *TrunkConnectionCreateOperation) Response() *cic.TrunkConnection {
	return o.Operation.Response().(*cic.TrunkConnection)
}

// Wait polls the operation until it's done.
func (o *TrunkConnectionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cic.TrunkConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cic.TrunkConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrunkConnectionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cic.TrunkConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cic.TrunkConnection)
	return response, err
}

// Create is an operation of Yandex.Cloud Cic TrunkConnection service.
// It returns an object which should be used to monitor the operation state.
func (c trunkConnectionClient) Create(ctx context.Context, in *cic.CreateTrunkConnectionRequest, opts ...grpc.CallOption) (*TrunkConnectionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewTrunkConnectionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.CreateTrunkConnectionMetadata).GetTrunkConnectionId()
		},
		MetadataType: (*cic.CreateTrunkConnectionMetadata)(nil),
		ResponseType: (*cic.TrunkConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrunkConnectionCreateOperation{*op}, nil
}

// TrunkConnectionUpdateOperation is used to monitor the state of Update operations.
type TrunkConnectionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrunkConnectionUpdateOperation) Metadata() *cic.UpdateTrunkConnectionMetadata {
	return o.Operation.Metadata().(*cic.UpdateTrunkConnectionMetadata)
}

// Response retrieves the operation response.
func (o *TrunkConnectionUpdateOperation) Response() *cic.TrunkConnection {
	return o.Operation.Response().(*cic.TrunkConnection)
}

// Wait polls the operation until it's done.
func (o *TrunkConnectionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cic.TrunkConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cic.TrunkConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrunkConnectionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cic.TrunkConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cic.TrunkConnection)
	return response, err
}

// Update is an operation of Yandex.Cloud Cic TrunkConnection service.
// It returns an object which should be used to monitor the operation state.
func (c trunkConnectionClient) Update(ctx context.Context, in *cic.UpdateTrunkConnectionRequest, opts ...grpc.CallOption) (*TrunkConnectionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewTrunkConnectionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.UpdateTrunkConnectionMetadata).GetTrunkConnectionId()
		},
		MetadataType: (*cic.UpdateTrunkConnectionMetadata)(nil),
		ResponseType: (*cic.TrunkConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrunkConnectionUpdateOperation{*op}, nil
}

// TrunkConnectionDeleteOperation is used to monitor the state of Delete operations.
type TrunkConnectionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TrunkConnectionDeleteOperation) Metadata() *cic.DeleteTrunkConnectionMetadata {
	return o.Operation.Metadata().(*cic.DeleteTrunkConnectionMetadata)
}

// Response retrieves the operation response.
func (o *TrunkConnectionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TrunkConnectionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TrunkConnectionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cic TrunkConnection service.
// It returns an object which should be used to monitor the operation state.
func (c trunkConnectionClient) Delete(ctx context.Context, in *cic.DeleteTrunkConnectionRequest, opts ...grpc.CallOption) (*TrunkConnectionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewTrunkConnectionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.DeleteTrunkConnectionMetadata).GetTrunkConnectionId()
		},
		MetadataType: (*cic.DeleteTrunkConnectionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TrunkConnectionDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Cic TrunkConnection service.
func (c trunkConnectionClient) ListOperations(ctx context.Context, in *cic.ListTrunkConnectionOperationsRequest, opts ...grpc.CallOption) (*cic.ListTrunkConnectionOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewTrunkConnectionServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c trunkConnectionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TrunkConnectionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TrunkConnectionGet             = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.Get")
	TrunkConnectionList            = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.List")
	TrunkConnectionCreate          = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.Create")
	TrunkConnectionUpdate          = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.Update")
	TrunkConnectionDelete          = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.Delete")
	TrunkConnectionListOperations  = protoreflect.FullName("yandex.cloud.cic.v1.TrunkConnectionService.ListOperations")
	TrunkConnectionOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
