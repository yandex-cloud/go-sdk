// Code generated by sdkgen-v2. DO NOT EDIT.
package cicsdk

import (
	"context"

	cic "github.com/yandex-cloud/go-genproto/yandex/cloud/cic/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateConnectionClient provides methods for managing PrivateConnection resources of Yandex.Cloud Cic.
type PrivateConnectionClient interface {
	Get(context.Context, *cic.GetPrivateConnectionRequest, ...grpc.CallOption) (*cic.PrivateConnection, error)
	List(context.Context, *cic.ListPrivateConnectionsRequest, ...grpc.CallOption) (*cic.ListPrivateConnectionsResponse, error)
	Create(context.Context, *cic.CreatePrivateConnectionRequest, ...grpc.CallOption) (*PrivateConnectionCreateOperation, error)
	Update(context.Context, *cic.UpdatePrivateConnectionRequest, ...grpc.CallOption) (*PrivateConnectionUpdateOperation, error)
	Delete(context.Context, *cic.DeletePrivateConnectionRequest, ...grpc.CallOption) (*PrivateConnectionDeleteOperation, error)
	UpsertStaticRoute(context.Context, *cic.UpsertStaticRouteRequest, ...grpc.CallOption) (*PrivateConnectionUpsertStaticRouteOperation, error)
	RemoveStaticRoute(context.Context, *cic.RemoveStaticRouteRequest, ...grpc.CallOption) (*PrivateConnectionRemoveStaticRouteOperation, error)
	ListOperations(context.Context, *cic.ListPrivateConnectionOperationsRequest, ...grpc.CallOption) (*cic.ListPrivateConnectionOperationsResponse, error)
}

var _ PrivateConnectionClient = privateConnectionClient{}

type privateConnectionClient struct {
	connector transport.Connector
}

// NewPrivateConnectionClient returns PrivateConnectionClient implementation.
func NewPrivateConnectionClient(connector transport.Connector) PrivateConnectionClient {
	return privateConnectionClient{connector}
}

// Get is an operation of Yandex.Cloud Cic PrivateConnection service.
func (c privateConnectionClient) Get(ctx context.Context, in *cic.GetPrivateConnectionRequest, opts ...grpc.CallOption) (*cic.PrivateConnection, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPrivateConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Cic PrivateConnection service.
func (c privateConnectionClient) List(ctx context.Context, in *cic.ListPrivateConnectionsRequest, opts ...grpc.CallOption) (*cic.ListPrivateConnectionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionList, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPrivateConnectionServiceClient(connection).List(ctx, in, opts...)
}

// PrivateConnectionCreateOperation is used to monitor the state of Create operations.
type PrivateConnectionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateConnectionCreateOperation) Metadata() *cic.CreatePrivateConnectionMetadata {
	return o.Operation.Metadata().(*cic.CreatePrivateConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateConnectionCreateOperation) Response() *cic.PrivateConnection {
	return o.Operation.Response().(*cic.PrivateConnection)
}

// Wait polls the operation until it's done.
func (o *PrivateConnectionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cic.PrivateConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cic.PrivateConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateConnectionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cic.PrivateConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cic.PrivateConnection)
	return response, err
}

// Create is an operation of Yandex.Cloud Cic PrivateConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateConnectionClient) Create(ctx context.Context, in *cic.CreatePrivateConnectionRequest, opts ...grpc.CallOption) (*PrivateConnectionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewPrivateConnectionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.CreatePrivateConnectionMetadata).GetPrivateConnectionId()
		},
		MetadataType: (*cic.CreatePrivateConnectionMetadata)(nil),
		ResponseType: (*cic.PrivateConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateConnectionCreateOperation{*op}, nil
}

// PrivateConnectionUpdateOperation is used to monitor the state of Update operations.
type PrivateConnectionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateConnectionUpdateOperation) Metadata() *cic.UpdatePrivateConnectionMetadata {
	return o.Operation.Metadata().(*cic.UpdatePrivateConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateConnectionUpdateOperation) Response() *cic.PrivateConnection {
	return o.Operation.Response().(*cic.PrivateConnection)
}

// Wait polls the operation until it's done.
func (o *PrivateConnectionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*cic.PrivateConnection, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*cic.PrivateConnection)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateConnectionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*cic.PrivateConnection, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*cic.PrivateConnection)
	return response, err
}

// Update is an operation of Yandex.Cloud Cic PrivateConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateConnectionClient) Update(ctx context.Context, in *cic.UpdatePrivateConnectionRequest, opts ...grpc.CallOption) (*PrivateConnectionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewPrivateConnectionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.UpdatePrivateConnectionMetadata).GetPrivateConnectionId()
		},
		MetadataType: (*cic.UpdatePrivateConnectionMetadata)(nil),
		ResponseType: (*cic.PrivateConnection)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateConnectionUpdateOperation{*op}, nil
}

// PrivateConnectionDeleteOperation is used to monitor the state of Delete operations.
type PrivateConnectionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateConnectionDeleteOperation) Metadata() *cic.DeletePrivateConnectionMetadata {
	return o.Operation.Metadata().(*cic.DeletePrivateConnectionMetadata)
}

// Response retrieves the operation response.
func (o *PrivateConnectionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateConnectionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateConnectionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Cic PrivateConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateConnectionClient) Delete(ctx context.Context, in *cic.DeletePrivateConnectionRequest, opts ...grpc.CallOption) (*PrivateConnectionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewPrivateConnectionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.DeletePrivateConnectionMetadata).GetPrivateConnectionId()
		},
		MetadataType: (*cic.DeletePrivateConnectionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateConnectionDeleteOperation{*op}, nil
}

// PrivateConnectionUpsertStaticRouteOperation is used to monitor the state of UpsertStaticRoute operations.
type PrivateConnectionUpsertStaticRouteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateConnectionUpsertStaticRouteOperation) Metadata() *cic.UpsertStaticRouteMetadata {
	return o.Operation.Metadata().(*cic.UpsertStaticRouteMetadata)
}

// Response retrieves the operation response.
func (o *PrivateConnectionUpsertStaticRouteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateConnectionUpsertStaticRouteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateConnectionUpsertStaticRouteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpsertStaticRoute is an operation of Yandex.Cloud Cic PrivateConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateConnectionClient) UpsertStaticRoute(ctx context.Context, in *cic.UpsertStaticRouteRequest, opts ...grpc.CallOption) (*PrivateConnectionUpsertStaticRouteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionUpsertStaticRoute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewPrivateConnectionServiceClient(connection).UpsertStaticRoute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.UpsertStaticRouteMetadata).GetPrivateConnectionId()
		},
		MetadataType: (*cic.UpsertStaticRouteMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateConnectionUpsertStaticRouteOperation{*op}, nil
}

// PrivateConnectionRemoveStaticRouteOperation is used to monitor the state of RemoveStaticRoute operations.
type PrivateConnectionRemoveStaticRouteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateConnectionRemoveStaticRouteOperation) Metadata() *cic.RemoveStaticRouteMetadata {
	return o.Operation.Metadata().(*cic.RemoveStaticRouteMetadata)
}

// Response retrieves the operation response.
func (o *PrivateConnectionRemoveStaticRouteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateConnectionRemoveStaticRouteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateConnectionRemoveStaticRouteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveStaticRoute is an operation of Yandex.Cloud Cic PrivateConnection service.
// It returns an object which should be used to monitor the operation state.
func (c privateConnectionClient) RemoveStaticRoute(ctx context.Context, in *cic.RemoveStaticRouteRequest, opts ...grpc.CallOption) (*PrivateConnectionRemoveStaticRouteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionRemoveStaticRoute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := cic.NewPrivateConnectionServiceClient(connection).RemoveStaticRoute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*cic.RemoveStaticRouteMetadata).GetPrivateConnectionId()
		},
		MetadataType: (*cic.RemoveStaticRouteMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateConnectionRemoveStaticRouteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Cic PrivateConnection service.
func (c privateConnectionClient) ListOperations(ctx context.Context, in *cic.ListPrivateConnectionOperationsRequest, opts ...grpc.CallOption) (*cic.ListPrivateConnectionOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return cic.NewPrivateConnectionServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c privateConnectionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateConnectionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateConnectionGet               = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.Get")
	PrivateConnectionList              = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.List")
	PrivateConnectionCreate            = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.Create")
	PrivateConnectionUpdate            = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.Update")
	PrivateConnectionDelete            = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.Delete")
	PrivateConnectionUpsertStaticRoute = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.UpsertStaticRoute")
	PrivateConnectionRemoveStaticRoute = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.RemoveStaticRoute")
	PrivateConnectionListOperations    = protoreflect.FullName("yandex.cloud.cic.v1.PrivateConnectionService.ListOperations")
	PrivateConnectionOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
