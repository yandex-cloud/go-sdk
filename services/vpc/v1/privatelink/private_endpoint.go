// Code generated by sdkgen-v2. DO NOT EDIT.
package privatelinksdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	privatelink "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1/privatelink"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateEndpointClient provides methods for managing PrivateEndpoint resources of Yandex.Cloud Privatelink.
type PrivateEndpointClient interface {
	Get(context.Context, *privatelink.GetPrivateEndpointRequest, ...grpc.CallOption) (*privatelink.PrivateEndpoint, error)
	List(context.Context, *privatelink.ListPrivateEndpointsRequest, ...grpc.CallOption) (*privatelink.ListPrivateEndpointsResponse, error)
	Create(context.Context, *privatelink.CreatePrivateEndpointRequest, ...grpc.CallOption) (*PrivateEndpointCreateOperation, error)
	Update(context.Context, *privatelink.UpdatePrivateEndpointRequest, ...grpc.CallOption) (*PrivateEndpointUpdateOperation, error)
	Delete(context.Context, *privatelink.DeletePrivateEndpointRequest, ...grpc.CallOption) (*PrivateEndpointDeleteOperation, error)
	ListOperations(context.Context, *privatelink.ListPrivateEndpointOperationsRequest, ...grpc.CallOption) (*privatelink.ListPrivateEndpointOperationsResponse, error)
}

var _ PrivateEndpointClient = privateEndpointClient{}

type privateEndpointClient struct {
	connector transport.Connector
}

// NewPrivateEndpointClient returns PrivateEndpointClient implementation.
func NewPrivateEndpointClient(connector transport.Connector) PrivateEndpointClient {
	return privateEndpointClient{connector}
}

// Get is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
func (c privateEndpointClient) Get(ctx context.Context, in *privatelink.GetPrivateEndpointRequest, opts ...grpc.CallOption) (*privatelink.PrivateEndpoint, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointGet, opts...)
	if err != nil {
		return nil, err
	}
	return privatelink.NewPrivateEndpointServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
func (c privateEndpointClient) List(ctx context.Context, in *privatelink.ListPrivateEndpointsRequest, opts ...grpc.CallOption) (*privatelink.ListPrivateEndpointsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointList, opts...)
	if err != nil {
		return nil, err
	}
	return privatelink.NewPrivateEndpointServiceClient(connection).List(ctx, in, opts...)
}

// PrivateEndpointCreateOperation is used to monitor the state of Create operations.
type PrivateEndpointCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateEndpointCreateOperation) Metadata() *privatelink.CreatePrivateEndpointMetadata {
	return o.Operation.Metadata().(*privatelink.CreatePrivateEndpointMetadata)
}

// Response retrieves the operation response.
func (o *PrivateEndpointCreateOperation) Response() *privatelink.PrivateEndpoint {
	return o.Operation.Response().(*privatelink.PrivateEndpoint)
}

// Wait polls the operation until it's done.
func (o *PrivateEndpointCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privatelink.PrivateEndpoint, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privatelink.PrivateEndpoint)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateEndpointCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privatelink.PrivateEndpoint, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privatelink.PrivateEndpoint)
	return response, err
}

// Create is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
// It returns an object which should be used to monitor the operation state.
func (c privateEndpointClient) Create(ctx context.Context, in *privatelink.CreatePrivateEndpointRequest, opts ...grpc.CallOption) (*PrivateEndpointCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privatelink.NewPrivateEndpointServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privatelink.CreatePrivateEndpointMetadata).GetPrivateEndpointId()
		},
		MetadataType: (*privatelink.CreatePrivateEndpointMetadata)(nil),
		ResponseType: (*privatelink.PrivateEndpoint)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateEndpointCreateOperation{*op}, nil
}

// PrivateEndpointUpdateOperation is used to monitor the state of Update operations.
type PrivateEndpointUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateEndpointUpdateOperation) Metadata() *privatelink.UpdatePrivateEndpointMetadata {
	return o.Operation.Metadata().(*privatelink.UpdatePrivateEndpointMetadata)
}

// Response retrieves the operation response.
func (o *PrivateEndpointUpdateOperation) Response() *privatelink.PrivateEndpoint {
	return o.Operation.Response().(*privatelink.PrivateEndpoint)
}

// Wait polls the operation until it's done.
func (o *PrivateEndpointUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privatelink.PrivateEndpoint, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privatelink.PrivateEndpoint)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateEndpointUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privatelink.PrivateEndpoint, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privatelink.PrivateEndpoint)
	return response, err
}

// Update is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
// It returns an object which should be used to monitor the operation state.
func (c privateEndpointClient) Update(ctx context.Context, in *privatelink.UpdatePrivateEndpointRequest, opts ...grpc.CallOption) (*PrivateEndpointUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privatelink.NewPrivateEndpointServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privatelink.UpdatePrivateEndpointMetadata).GetPrivateEndpointId()
		},
		MetadataType: (*privatelink.UpdatePrivateEndpointMetadata)(nil),
		ResponseType: (*privatelink.PrivateEndpoint)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateEndpointUpdateOperation{*op}, nil
}

// PrivateEndpointDeleteOperation is used to monitor the state of Delete operations.
type PrivateEndpointDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateEndpointDeleteOperation) Metadata() *privatelink.DeletePrivateEndpointMetadata {
	return o.Operation.Metadata().(*privatelink.DeletePrivateEndpointMetadata)
}

// Response retrieves the operation response.
func (o *PrivateEndpointDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateEndpointDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateEndpointDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
// It returns an object which should be used to monitor the operation state.
func (c privateEndpointClient) Delete(ctx context.Context, in *privatelink.DeletePrivateEndpointRequest, opts ...grpc.CallOption) (*PrivateEndpointDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privatelink.NewPrivateEndpointServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privatelink.DeletePrivateEndpointMetadata).GetPrivateEndpointId()
		},
		MetadataType: (*privatelink.DeletePrivateEndpointMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateEndpointDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Privatelink PrivateEndpoint service.
func (c privateEndpointClient) ListOperations(ctx context.Context, in *privatelink.ListPrivateEndpointOperationsRequest, opts ...grpc.CallOption) (*privatelink.ListPrivateEndpointOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return privatelink.NewPrivateEndpointServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c privateEndpointClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateEndpointOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateEndpointGet             = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Get")
	PrivateEndpointList            = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.List")
	PrivateEndpointCreate          = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Create")
	PrivateEndpointUpdate          = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Update")
	PrivateEndpointDelete          = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Delete")
	PrivateEndpointListOperations  = protoreflect.FullName("yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.ListOperations")
	PrivateEndpointOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
