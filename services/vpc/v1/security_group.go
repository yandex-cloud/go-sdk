// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SecurityGroupClient provides methods for managing SecurityGroup resources of Yandex.Cloud VPC.
type SecurityGroupClient interface {
	Get(context.Context, *vpc.GetSecurityGroupRequest, ...grpc.CallOption) (*vpc.SecurityGroup, error)
	List(context.Context, *vpc.ListSecurityGroupsRequest, ...grpc.CallOption) (*vpc.ListSecurityGroupsResponse, error)
	Create(context.Context, *vpc.CreateSecurityGroupRequest, ...grpc.CallOption) (*SecurityGroupCreateOperation, error)
	Update(context.Context, *vpc.UpdateSecurityGroupRequest, ...grpc.CallOption) (*SecurityGroupUpdateOperation, error)
	UpdateRules(context.Context, *vpc.UpdateSecurityGroupRulesRequest, ...grpc.CallOption) (*SecurityGroupUpdateRulesOperation, error)
	UpdateRule(context.Context, *vpc.UpdateSecurityGroupRuleRequest, ...grpc.CallOption) (*SecurityGroupUpdateRuleOperation, error)
	Delete(context.Context, *vpc.DeleteSecurityGroupRequest, ...grpc.CallOption) (*SecurityGroupDeleteOperation, error)
	Move(context.Context, *vpc.MoveSecurityGroupRequest, ...grpc.CallOption) (*SecurityGroupMoveOperation, error)
	ListOperations(context.Context, *vpc.ListSecurityGroupOperationsRequest, ...grpc.CallOption) (*vpc.ListSecurityGroupOperationsResponse, error)
}

var _ SecurityGroupClient = securityGroupClient{}

type securityGroupClient struct {
	connector transport.Connector
}

// NewSecurityGroupClient returns SecurityGroupClient implementation.
func NewSecurityGroupClient(connector transport.Connector) SecurityGroupClient {
	return securityGroupClient{connector}
}

// Get is an operation of Yandex.Cloud VPC SecurityGroup service.
func (c securityGroupClient) Get(ctx context.Context, in *vpc.GetSecurityGroupRequest, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSecurityGroupServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC SecurityGroup service.
func (c securityGroupClient) List(ctx context.Context, in *vpc.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*vpc.ListSecurityGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSecurityGroupServiceClient(connection).List(ctx, in, opts...)
}

// SecurityGroupCreateOperation is used to monitor the state of Create operations.
type SecurityGroupCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupCreateOperation) Metadata() *vpc.CreateSecurityGroupMetadata {
	return o.Operation.Metadata().(*vpc.CreateSecurityGroupMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupCreateOperation) Response() *vpc.SecurityGroup {
	return o.Operation.Response().(*vpc.SecurityGroup)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) Create(ctx context.Context, in *vpc.CreateSecurityGroupRequest, opts ...grpc.CallOption) (*SecurityGroupCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateSecurityGroupMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.CreateSecurityGroupMetadata)(nil),
		ResponseType: (*vpc.SecurityGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupCreateOperation{*op}, nil
}

// SecurityGroupUpdateOperation is used to monitor the state of Update operations.
type SecurityGroupUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupUpdateOperation) Metadata() *vpc.UpdateSecurityGroupMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSecurityGroupMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupUpdateOperation) Response() *vpc.SecurityGroup {
	return o.Operation.Response().(*vpc.SecurityGroup)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) Update(ctx context.Context, in *vpc.UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*SecurityGroupUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSecurityGroupMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.UpdateSecurityGroupMetadata)(nil),
		ResponseType: (*vpc.SecurityGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupUpdateOperation{*op}, nil
}

// SecurityGroupUpdateRulesOperation is used to monitor the state of UpdateRules operations.
type SecurityGroupUpdateRulesOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupUpdateRulesOperation) Metadata() *vpc.UpdateSecurityGroupMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSecurityGroupMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupUpdateRulesOperation) Response() *vpc.SecurityGroup {
	return o.Operation.Response().(*vpc.SecurityGroup)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupUpdateRulesOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupUpdateRulesOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// UpdateRules is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) UpdateRules(ctx context.Context, in *vpc.UpdateSecurityGroupRulesRequest, opts ...grpc.CallOption) (*SecurityGroupUpdateRulesOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupUpdateRules, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).UpdateRules(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSecurityGroupMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.UpdateSecurityGroupMetadata)(nil),
		ResponseType: (*vpc.SecurityGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupUpdateRulesOperation{*op}, nil
}

// SecurityGroupUpdateRuleOperation is used to monitor the state of UpdateRule operations.
type SecurityGroupUpdateRuleOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupUpdateRuleOperation) Metadata() *vpc.UpdateSecurityGroupRuleMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSecurityGroupRuleMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupUpdateRuleOperation) Response() *vpc.SecurityGroupRule {
	return o.Operation.Response().(*vpc.SecurityGroupRule)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupUpdateRuleOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.SecurityGroupRule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.SecurityGroupRule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupUpdateRuleOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.SecurityGroupRule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.SecurityGroupRule)
	return response, err
}

// UpdateRule is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) UpdateRule(ctx context.Context, in *vpc.UpdateSecurityGroupRuleRequest, opts ...grpc.CallOption) (*SecurityGroupUpdateRuleOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupUpdateRule, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).UpdateRule(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSecurityGroupRuleMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.UpdateSecurityGroupRuleMetadata)(nil),
		ResponseType: (*vpc.SecurityGroupRule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupUpdateRuleOperation{*op}, nil
}

// SecurityGroupDeleteOperation is used to monitor the state of Delete operations.
type SecurityGroupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupDeleteOperation) Metadata() *vpc.DeleteSecurityGroupMetadata {
	return o.Operation.Metadata().(*vpc.DeleteSecurityGroupMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) Delete(ctx context.Context, in *vpc.DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*SecurityGroupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteSecurityGroupMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.DeleteSecurityGroupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupDeleteOperation{*op}, nil
}

// SecurityGroupMoveOperation is used to monitor the state of Move operations.
type SecurityGroupMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecurityGroupMoveOperation) Metadata() *vpc.MoveSecurityGroupMetadata {
	return o.Operation.Metadata().(*vpc.MoveSecurityGroupMetadata)
}

// Response retrieves the operation response.
func (o *SecurityGroupMoveOperation) Response() *vpc.SecurityGroup {
	return o.Operation.Response().(*vpc.SecurityGroup)
}

// Wait polls the operation until it's done.
func (o *SecurityGroupMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecurityGroupMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.SecurityGroup, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.SecurityGroup)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC SecurityGroup service.
// It returns an object which should be used to monitor the operation state.
func (c securityGroupClient) Move(ctx context.Context, in *vpc.MoveSecurityGroupRequest, opts ...grpc.CallOption) (*SecurityGroupMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSecurityGroupServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveSecurityGroupMetadata).GetSecurityGroupId()
		},
		MetadataType: (*vpc.MoveSecurityGroupMetadata)(nil),
		ResponseType: (*vpc.SecurityGroup)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecurityGroupMoveOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud VPC SecurityGroup service.
func (c securityGroupClient) ListOperations(ctx context.Context, in *vpc.ListSecurityGroupOperationsRequest, opts ...grpc.CallOption) (*vpc.ListSecurityGroupOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSecurityGroupServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c securityGroupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecurityGroupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SecurityGroupGet             = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.Get")
	SecurityGroupList            = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.List")
	SecurityGroupCreate          = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.Create")
	SecurityGroupUpdate          = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.Update")
	SecurityGroupUpdateRules     = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.UpdateRules")
	SecurityGroupUpdateRule      = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.UpdateRule")
	SecurityGroupDelete          = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.Delete")
	SecurityGroupMove            = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.Move")
	SecurityGroupListOperations  = protoreflect.FullName("yandex.cloud.vpc.v1.SecurityGroupService.ListOperations")
	SecurityGroupOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
