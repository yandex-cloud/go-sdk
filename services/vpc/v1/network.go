// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// NetworkClient provides methods for managing Network resources of Yandex.Cloud VPC.
type NetworkClient interface {
	Get(context.Context, *vpc.GetNetworkRequest, ...grpc.CallOption) (*vpc.Network, error)
	List(context.Context, *vpc.ListNetworksRequest, ...grpc.CallOption) (*vpc.ListNetworksResponse, error)
	Create(context.Context, *vpc.CreateNetworkRequest, ...grpc.CallOption) (*NetworkCreateOperation, error)
	Update(context.Context, *vpc.UpdateNetworkRequest, ...grpc.CallOption) (*NetworkUpdateOperation, error)
	Delete(context.Context, *vpc.DeleteNetworkRequest, ...grpc.CallOption) (*NetworkDeleteOperation, error)
	ListSubnets(context.Context, *vpc.ListNetworkSubnetsRequest, ...grpc.CallOption) (*vpc.ListNetworkSubnetsResponse, error)
	ListSecurityGroups(context.Context, *vpc.ListNetworkSecurityGroupsRequest, ...grpc.CallOption) (*vpc.ListNetworkSecurityGroupsResponse, error)
	ListRouteTables(context.Context, *vpc.ListNetworkRouteTablesRequest, ...grpc.CallOption) (*vpc.ListNetworkRouteTablesResponse, error)
	ListOperations(context.Context, *vpc.ListNetworkOperationsRequest, ...grpc.CallOption) (*vpc.ListNetworkOperationsResponse, error)
	Move(context.Context, *vpc.MoveNetworkRequest, ...grpc.CallOption) (*NetworkMoveOperation, error)
}

var _ NetworkClient = networkClient{}

type networkClient struct {
	connector transport.Connector
}

// NewNetworkClient returns NetworkClient implementation.
func NewNetworkClient(connector transport.Connector) NetworkClient {
	return networkClient{connector}
}

// Get is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) Get(ctx context.Context, in *vpc.GetNetworkRequest, opts ...grpc.CallOption) (*vpc.Network, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) List(ctx context.Context, in *vpc.ListNetworksRequest, opts ...grpc.CallOption) (*vpc.ListNetworksResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).List(ctx, in, opts...)
}

// NetworkCreateOperation is used to monitor the state of Create operations.
type NetworkCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkCreateOperation) Metadata() *vpc.CreateNetworkMetadata {
	return o.Operation.Metadata().(*vpc.CreateNetworkMetadata)
}

// Response retrieves the operation response.
func (o *NetworkCreateOperation) Response() *vpc.Network {
	return o.Operation.Response().(*vpc.Network)
}

// Wait polls the operation until it's done.
func (o *NetworkCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC Network service.
// It returns an object which should be used to monitor the operation state.
func (c networkClient) Create(ctx context.Context, in *vpc.CreateNetworkRequest, opts ...grpc.CallOption) (*NetworkCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewNetworkServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateNetworkMetadata).GetNetworkId()
		},
		MetadataType: (*vpc.CreateNetworkMetadata)(nil),
		ResponseType: (*vpc.Network)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkCreateOperation{*op}, nil
}

// NetworkUpdateOperation is used to monitor the state of Update operations.
type NetworkUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkUpdateOperation) Metadata() *vpc.UpdateNetworkMetadata {
	return o.Operation.Metadata().(*vpc.UpdateNetworkMetadata)
}

// Response retrieves the operation response.
func (o *NetworkUpdateOperation) Response() *vpc.Network {
	return o.Operation.Response().(*vpc.Network)
}

// Wait polls the operation until it's done.
func (o *NetworkUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC Network service.
// It returns an object which should be used to monitor the operation state.
func (c networkClient) Update(ctx context.Context, in *vpc.UpdateNetworkRequest, opts ...grpc.CallOption) (*NetworkUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewNetworkServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateNetworkMetadata).GetNetworkId()
		},
		MetadataType: (*vpc.UpdateNetworkMetadata)(nil),
		ResponseType: (*vpc.Network)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkUpdateOperation{*op}, nil
}

// NetworkDeleteOperation is used to monitor the state of Delete operations.
type NetworkDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkDeleteOperation) Metadata() *vpc.DeleteNetworkMetadata {
	return o.Operation.Metadata().(*vpc.DeleteNetworkMetadata)
}

// Response retrieves the operation response.
func (o *NetworkDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *NetworkDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC Network service.
// It returns an object which should be used to monitor the operation state.
func (c networkClient) Delete(ctx context.Context, in *vpc.DeleteNetworkRequest, opts ...grpc.CallOption) (*NetworkDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewNetworkServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteNetworkMetadata).GetNetworkId()
		},
		MetadataType: (*vpc.DeleteNetworkMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkDeleteOperation{*op}, nil
}

// ListSubnets is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) ListSubnets(ctx context.Context, in *vpc.ListNetworkSubnetsRequest, opts ...grpc.CallOption) (*vpc.ListNetworkSubnetsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkListSubnets, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).ListSubnets(ctx, in, opts...)
}

// ListSecurityGroups is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) ListSecurityGroups(ctx context.Context, in *vpc.ListNetworkSecurityGroupsRequest, opts ...grpc.CallOption) (*vpc.ListNetworkSecurityGroupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkListSecurityGroups, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).ListSecurityGroups(ctx, in, opts...)
}

// ListRouteTables is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) ListRouteTables(ctx context.Context, in *vpc.ListNetworkRouteTablesRequest, opts ...grpc.CallOption) (*vpc.ListNetworkRouteTablesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkListRouteTables, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).ListRouteTables(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud VPC Network service.
func (c networkClient) ListOperations(ctx context.Context, in *vpc.ListNetworkOperationsRequest, opts ...grpc.CallOption) (*vpc.ListNetworkOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewNetworkServiceClient(connection).ListOperations(ctx, in, opts...)
}

// NetworkMoveOperation is used to monitor the state of Move operations.
type NetworkMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *NetworkMoveOperation) Metadata() *vpc.MoveNetworkMetadata {
	return o.Operation.Metadata().(*vpc.MoveNetworkMetadata)
}

// Response retrieves the operation response.
func (o *NetworkMoveOperation) Response() *vpc.Network {
	return o.Operation.Response().(*vpc.Network)
}

// Wait polls the operation until it's done.
func (o *NetworkMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *NetworkMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Network, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Network)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC Network service.
// It returns an object which should be used to monitor the operation state.
func (c networkClient) Move(ctx context.Context, in *vpc.MoveNetworkRequest, opts ...grpc.CallOption) (*NetworkMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewNetworkServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveNetworkMetadata).GetNetworkId()
		},
		MetadataType: (*vpc.MoveNetworkMetadata)(nil),
		ResponseType: (*vpc.Network)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &NetworkMoveOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c networkClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, NetworkOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	NetworkGet                = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.Get")
	NetworkList               = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.List")
	NetworkCreate             = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.Create")
	NetworkUpdate             = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.Update")
	NetworkDelete             = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.Delete")
	NetworkListSubnets        = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.ListSubnets")
	NetworkListSecurityGroups = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.ListSecurityGroups")
	NetworkListRouteTables    = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.ListRouteTables")
	NetworkListOperations     = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.ListOperations")
	NetworkMove               = protoreflect.FullName("yandex.cloud.vpc.v1.NetworkService.Move")
	NetworkOperationPoller    = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
