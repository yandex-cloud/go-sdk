// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AddressClient provides methods for managing Address resources of Yandex.Cloud VPC.
type AddressClient interface {
	Get(context.Context, *vpc.GetAddressRequest, ...grpc.CallOption) (*vpc.Address, error)
	GetByValue(context.Context, *vpc.GetAddressByValueRequest, ...grpc.CallOption) (*vpc.Address, error)
	List(context.Context, *vpc.ListAddressesRequest, ...grpc.CallOption) (*vpc.ListAddressesResponse, error)
	Create(context.Context, *vpc.CreateAddressRequest, ...grpc.CallOption) (*AddressCreateOperation, error)
	Update(context.Context, *vpc.UpdateAddressRequest, ...grpc.CallOption) (*AddressUpdateOperation, error)
	Delete(context.Context, *vpc.DeleteAddressRequest, ...grpc.CallOption) (*AddressDeleteOperation, error)
	ListOperations(context.Context, *vpc.ListAddressOperationsRequest, ...grpc.CallOption) (*vpc.ListAddressOperationsResponse, error)
	Move(context.Context, *vpc.MoveAddressRequest, ...grpc.CallOption) (*AddressMoveOperation, error)
}

var _ AddressClient = addressClient{}

type addressClient struct {
	connector transport.Connector
}

// NewAddressClient returns AddressClient implementation.
func NewAddressClient(connector transport.Connector) AddressClient {
	return addressClient{connector}
}

// Get is an operation of Yandex.Cloud VPC Address service.
func (c addressClient) Get(ctx context.Context, in *vpc.GetAddressRequest, opts ...grpc.CallOption) (*vpc.Address, error) {
	connection, err := c.connector.GetConnection(ctx, AddressGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewAddressServiceClient(connection).Get(ctx, in, opts...)
}

// GetByValue is an operation of Yandex.Cloud VPC Address service.
func (c addressClient) GetByValue(ctx context.Context, in *vpc.GetAddressByValueRequest, opts ...grpc.CallOption) (*vpc.Address, error) {
	connection, err := c.connector.GetConnection(ctx, AddressGetByValue, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewAddressServiceClient(connection).GetByValue(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC Address service.
func (c addressClient) List(ctx context.Context, in *vpc.ListAddressesRequest, opts ...grpc.CallOption) (*vpc.ListAddressesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AddressList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewAddressServiceClient(connection).List(ctx, in, opts...)
}

// AddressCreateOperation is used to monitor the state of Create operations.
type AddressCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AddressCreateOperation) Metadata() *vpc.CreateAddressMetadata {
	return o.Operation.Metadata().(*vpc.CreateAddressMetadata)
}

// Response retrieves the operation response.
func (o *AddressCreateOperation) Response() *vpc.Address {
	return o.Operation.Response().(*vpc.Address)
}

// Wait polls the operation until it's done.
func (o *AddressCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AddressCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC Address service.
// It returns an object which should be used to monitor the operation state.
func (c addressClient) Create(ctx context.Context, in *vpc.CreateAddressRequest, opts ...grpc.CallOption) (*AddressCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AddressCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewAddressServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateAddressMetadata).GetAddressId()
		},
		MetadataType: (*vpc.CreateAddressMetadata)(nil),
		ResponseType: (*vpc.Address)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AddressCreateOperation{*op}, nil
}

// AddressUpdateOperation is used to monitor the state of Update operations.
type AddressUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AddressUpdateOperation) Metadata() *vpc.UpdateAddressMetadata {
	return o.Operation.Metadata().(*vpc.UpdateAddressMetadata)
}

// Response retrieves the operation response.
func (o *AddressUpdateOperation) Response() *vpc.Address {
	return o.Operation.Response().(*vpc.Address)
}

// Wait polls the operation until it's done.
func (o *AddressUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AddressUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC Address service.
// It returns an object which should be used to monitor the operation state.
func (c addressClient) Update(ctx context.Context, in *vpc.UpdateAddressRequest, opts ...grpc.CallOption) (*AddressUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AddressUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewAddressServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateAddressMetadata).GetAddressId()
		},
		MetadataType: (*vpc.UpdateAddressMetadata)(nil),
		ResponseType: (*vpc.Address)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AddressUpdateOperation{*op}, nil
}

// AddressDeleteOperation is used to monitor the state of Delete operations.
type AddressDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AddressDeleteOperation) Metadata() *vpc.DeleteAddressMetadata {
	return o.Operation.Metadata().(*vpc.DeleteAddressMetadata)
}

// Response retrieves the operation response.
func (o *AddressDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *AddressDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AddressDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC Address service.
// It returns an object which should be used to monitor the operation state.
func (c addressClient) Delete(ctx context.Context, in *vpc.DeleteAddressRequest, opts ...grpc.CallOption) (*AddressDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AddressDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewAddressServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteAddressMetadata).GetAddressId()
		},
		MetadataType: (*vpc.DeleteAddressMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AddressDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud VPC Address service.
func (c addressClient) ListOperations(ctx context.Context, in *vpc.ListAddressOperationsRequest, opts ...grpc.CallOption) (*vpc.ListAddressOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, AddressListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewAddressServiceClient(connection).ListOperations(ctx, in, opts...)
}

// AddressMoveOperation is used to monitor the state of Move operations.
type AddressMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *AddressMoveOperation) Metadata() *vpc.MoveAddressMetadata {
	return o.Operation.Metadata().(*vpc.MoveAddressMetadata)
}

// Response retrieves the operation response.
func (o *AddressMoveOperation) Response() *vpc.Address {
	return o.Operation.Response().(*vpc.Address)
}

// Wait polls the operation until it's done.
func (o *AddressMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *AddressMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Address, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Address)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC Address service.
// It returns an object which should be used to monitor the operation state.
func (c addressClient) Move(ctx context.Context, in *vpc.MoveAddressRequest, opts ...grpc.CallOption) (*AddressMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AddressMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewAddressServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveAddressMetadata).GetAddressId()
		},
		MetadataType: (*vpc.MoveAddressMetadata)(nil),
		ResponseType: (*vpc.Address)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &AddressMoveOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c addressClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, AddressOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	AddressGet             = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.Get")
	AddressGetByValue      = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.GetByValue")
	AddressList            = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.List")
	AddressCreate          = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.Create")
	AddressUpdate          = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.Update")
	AddressDelete          = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.Delete")
	AddressListOperations  = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.ListOperations")
	AddressMove            = protoreflect.FullName("yandex.cloud.vpc.v1.AddressService.Move")
	AddressOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
