// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SubnetClient provides methods for managing Subnet resources of Yandex.Cloud VPC.
type SubnetClient interface {
	Get(context.Context, *vpc.GetSubnetRequest, ...grpc.CallOption) (*vpc.Subnet, error)
	List(context.Context, *vpc.ListSubnetsRequest, ...grpc.CallOption) (*vpc.ListSubnetsResponse, error)
	Create(context.Context, *vpc.CreateSubnetRequest, ...grpc.CallOption) (*SubnetCreateOperation, error)
	Update(context.Context, *vpc.UpdateSubnetRequest, ...grpc.CallOption) (*SubnetUpdateOperation, error)
	AddCidrBlocks(context.Context, *vpc.AddSubnetCidrBlocksRequest, ...grpc.CallOption) (*SubnetAddCidrBlocksOperation, error)
	RemoveCidrBlocks(context.Context, *vpc.RemoveSubnetCidrBlocksRequest, ...grpc.CallOption) (*SubnetRemoveCidrBlocksOperation, error)
	Delete(context.Context, *vpc.DeleteSubnetRequest, ...grpc.CallOption) (*SubnetDeleteOperation, error)
	ListOperations(context.Context, *vpc.ListSubnetOperationsRequest, ...grpc.CallOption) (*vpc.ListSubnetOperationsResponse, error)
	Move(context.Context, *vpc.MoveSubnetRequest, ...grpc.CallOption) (*SubnetMoveOperation, error)
	Relocate(context.Context, *vpc.RelocateSubnetRequest, ...grpc.CallOption) (*SubnetRelocateOperation, error)
	ListUsedAddresses(context.Context, *vpc.ListUsedAddressesRequest, ...grpc.CallOption) (*vpc.ListUsedAddressesResponse, error)
}

var _ SubnetClient = subnetClient{}

type subnetClient struct {
	connector transport.Connector
}

// NewSubnetClient returns SubnetClient implementation.
func NewSubnetClient(connector transport.Connector) SubnetClient {
	return subnetClient{connector}
}

// Get is an operation of Yandex.Cloud VPC Subnet service.
func (c subnetClient) Get(ctx context.Context, in *vpc.GetSubnetRequest, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSubnetServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC Subnet service.
func (c subnetClient) List(ctx context.Context, in *vpc.ListSubnetsRequest, opts ...grpc.CallOption) (*vpc.ListSubnetsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSubnetServiceClient(connection).List(ctx, in, opts...)
}

// SubnetCreateOperation is used to monitor the state of Create operations.
type SubnetCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetCreateOperation) Metadata() *vpc.CreateSubnetMetadata {
	return o.Operation.Metadata().(*vpc.CreateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetCreateOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) Create(ctx context.Context, in *vpc.CreateSubnetRequest, opts ...grpc.CallOption) (*SubnetCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.CreateSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetCreateOperation{*op}, nil
}

// SubnetUpdateOperation is used to monitor the state of Update operations.
type SubnetUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetUpdateOperation) Metadata() *vpc.UpdateSubnetMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetUpdateOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) Update(ctx context.Context, in *vpc.UpdateSubnetRequest, opts ...grpc.CallOption) (*SubnetUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.UpdateSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetUpdateOperation{*op}, nil
}

// SubnetAddCidrBlocksOperation is used to monitor the state of AddCidrBlocks operations.
type SubnetAddCidrBlocksOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetAddCidrBlocksOperation) Metadata() *vpc.UpdateSubnetMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetAddCidrBlocksOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetAddCidrBlocksOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetAddCidrBlocksOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// AddCidrBlocks is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) AddCidrBlocks(ctx context.Context, in *vpc.AddSubnetCidrBlocksRequest, opts ...grpc.CallOption) (*SubnetAddCidrBlocksOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetAddCidrBlocks, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).AddCidrBlocks(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.UpdateSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetAddCidrBlocksOperation{*op}, nil
}

// SubnetRemoveCidrBlocksOperation is used to monitor the state of RemoveCidrBlocks operations.
type SubnetRemoveCidrBlocksOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetRemoveCidrBlocksOperation) Metadata() *vpc.UpdateSubnetMetadata {
	return o.Operation.Metadata().(*vpc.UpdateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetRemoveCidrBlocksOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetRemoveCidrBlocksOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetRemoveCidrBlocksOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// RemoveCidrBlocks is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) RemoveCidrBlocks(ctx context.Context, in *vpc.RemoveSubnetCidrBlocksRequest, opts ...grpc.CallOption) (*SubnetRemoveCidrBlocksOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetRemoveCidrBlocks, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).RemoveCidrBlocks(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.UpdateSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetRemoveCidrBlocksOperation{*op}, nil
}

// SubnetDeleteOperation is used to monitor the state of Delete operations.
type SubnetDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetDeleteOperation) Metadata() *vpc.DeleteSubnetMetadata {
	return o.Operation.Metadata().(*vpc.DeleteSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SubnetDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) Delete(ctx context.Context, in *vpc.DeleteSubnetRequest, opts ...grpc.CallOption) (*SubnetDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.DeleteSubnetMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud VPC Subnet service.
func (c subnetClient) ListOperations(ctx context.Context, in *vpc.ListSubnetOperationsRequest, opts ...grpc.CallOption) (*vpc.ListSubnetOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSubnetServiceClient(connection).ListOperations(ctx, in, opts...)
}

// SubnetMoveOperation is used to monitor the state of Move operations.
type SubnetMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetMoveOperation) Metadata() *vpc.MoveSubnetMetadata {
	return o.Operation.Metadata().(*vpc.MoveSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetMoveOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) Move(ctx context.Context, in *vpc.MoveSubnetRequest, opts ...grpc.CallOption) (*SubnetMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.MoveSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetMoveOperation{*op}, nil
}

// SubnetRelocateOperation is used to monitor the state of Relocate operations.
type SubnetRelocateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SubnetRelocateOperation) Metadata() *vpc.RelocateSubnetMetadata {
	return o.Operation.Metadata().(*vpc.RelocateSubnetMetadata)
}

// Response retrieves the operation response.
func (o *SubnetRelocateOperation) Response() *vpc.Subnet {
	return o.Operation.Response().(*vpc.Subnet)
}

// Wait polls the operation until it's done.
func (o *SubnetRelocateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SubnetRelocateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Subnet, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Subnet)
	return response, err
}

// Relocate is an operation of Yandex.Cloud VPC Subnet service.
// It returns an object which should be used to monitor the operation state.
func (c subnetClient) Relocate(ctx context.Context, in *vpc.RelocateSubnetRequest, opts ...grpc.CallOption) (*SubnetRelocateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetRelocate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewSubnetServiceClient(connection).Relocate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.RelocateSubnetMetadata).GetSubnetId()
		},
		MetadataType: (*vpc.RelocateSubnetMetadata)(nil),
		ResponseType: (*vpc.Subnet)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SubnetRelocateOperation{*op}, nil
}

// ListUsedAddresses is an operation of Yandex.Cloud VPC Subnet service.
func (c subnetClient) ListUsedAddresses(ctx context.Context, in *vpc.ListUsedAddressesRequest, opts ...grpc.CallOption) (*vpc.ListUsedAddressesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetListUsedAddresses, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewSubnetServiceClient(connection).ListUsedAddresses(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c subnetClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SubnetOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SubnetGet               = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Get")
	SubnetList              = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.List")
	SubnetCreate            = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Create")
	SubnetUpdate            = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Update")
	SubnetAddCidrBlocks     = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.AddCidrBlocks")
	SubnetRemoveCidrBlocks  = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.RemoveCidrBlocks")
	SubnetDelete            = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Delete")
	SubnetListOperations    = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.ListOperations")
	SubnetMove              = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Move")
	SubnetRelocate          = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.Relocate")
	SubnetListUsedAddresses = protoreflect.FullName("yandex.cloud.vpc.v1.SubnetService.ListUsedAddresses")
	SubnetOperationPoller   = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
