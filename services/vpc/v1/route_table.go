// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RouteTableClient provides methods for managing RouteTable resources of Yandex.Cloud VPC.
type RouteTableClient interface {
	Get(context.Context, *vpc.GetRouteTableRequest, ...grpc.CallOption) (*vpc.RouteTable, error)
	List(context.Context, *vpc.ListRouteTablesRequest, ...grpc.CallOption) (*vpc.ListRouteTablesResponse, error)
	Create(context.Context, *vpc.CreateRouteTableRequest, ...grpc.CallOption) (*RouteTableCreateOperation, error)
	Update(context.Context, *vpc.UpdateRouteTableRequest, ...grpc.CallOption) (*RouteTableUpdateOperation, error)
	Delete(context.Context, *vpc.DeleteRouteTableRequest, ...grpc.CallOption) (*RouteTableDeleteOperation, error)
	ListOperations(context.Context, *vpc.ListRouteTableOperationsRequest, ...grpc.CallOption) (*vpc.ListRouteTableOperationsResponse, error)
	Move(context.Context, *vpc.MoveRouteTableRequest, ...grpc.CallOption) (*RouteTableMoveOperation, error)
}

var _ RouteTableClient = routeTableClient{}

type routeTableClient struct {
	connector transport.Connector
}

// NewRouteTableClient returns RouteTableClient implementation.
func NewRouteTableClient(connector transport.Connector) RouteTableClient {
	return routeTableClient{connector}
}

// Get is an operation of Yandex.Cloud VPC RouteTable service.
func (c routeTableClient) Get(ctx context.Context, in *vpc.GetRouteTableRequest, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC RouteTable service.
func (c routeTableClient) List(ctx context.Context, in *vpc.ListRouteTablesRequest, opts ...grpc.CallOption) (*vpc.ListRouteTablesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(connection).List(ctx, in, opts...)
}

// RouteTableCreateOperation is used to monitor the state of Create operations.
type RouteTableCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RouteTableCreateOperation) Metadata() *vpc.CreateRouteTableMetadata {
	return o.Operation.Metadata().(*vpc.CreateRouteTableMetadata)
}

// Response retrieves the operation response.
func (o *RouteTableCreateOperation) Response() *vpc.RouteTable {
	return o.Operation.Response().(*vpc.RouteTable)
}

// Wait polls the operation until it's done.
func (o *RouteTableCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RouteTableCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC RouteTable service.
// It returns an object which should be used to monitor the operation state.
func (c routeTableClient) Create(ctx context.Context, in *vpc.CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTableCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewRouteTableServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateRouteTableMetadata).GetRouteTableId()
		},
		MetadataType: (*vpc.CreateRouteTableMetadata)(nil),
		ResponseType: (*vpc.RouteTable)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RouteTableCreateOperation{*op}, nil
}

// RouteTableUpdateOperation is used to monitor the state of Update operations.
type RouteTableUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RouteTableUpdateOperation) Metadata() *vpc.UpdateRouteTableMetadata {
	return o.Operation.Metadata().(*vpc.UpdateRouteTableMetadata)
}

// Response retrieves the operation response.
func (o *RouteTableUpdateOperation) Response() *vpc.RouteTable {
	return o.Operation.Response().(*vpc.RouteTable)
}

// Wait polls the operation until it's done.
func (o *RouteTableUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RouteTableUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC RouteTable service.
// It returns an object which should be used to monitor the operation state.
func (c routeTableClient) Update(ctx context.Context, in *vpc.UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTableUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewRouteTableServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateRouteTableMetadata).GetRouteTableId()
		},
		MetadataType: (*vpc.UpdateRouteTableMetadata)(nil),
		ResponseType: (*vpc.RouteTable)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RouteTableUpdateOperation{*op}, nil
}

// RouteTableDeleteOperation is used to monitor the state of Delete operations.
type RouteTableDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RouteTableDeleteOperation) Metadata() *vpc.DeleteRouteTableMetadata {
	return o.Operation.Metadata().(*vpc.DeleteRouteTableMetadata)
}

// Response retrieves the operation response.
func (o *RouteTableDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RouteTableDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RouteTableDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC RouteTable service.
// It returns an object which should be used to monitor the operation state.
func (c routeTableClient) Delete(ctx context.Context, in *vpc.DeleteRouteTableRequest, opts ...grpc.CallOption) (*RouteTableDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewRouteTableServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteRouteTableMetadata).GetRouteTableId()
		},
		MetadataType: (*vpc.DeleteRouteTableMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RouteTableDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud VPC RouteTable service.
func (c routeTableClient) ListOperations(ctx context.Context, in *vpc.ListRouteTableOperationsRequest, opts ...grpc.CallOption) (*vpc.ListRouteTableOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(connection).ListOperations(ctx, in, opts...)
}

// RouteTableMoveOperation is used to monitor the state of Move operations.
type RouteTableMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RouteTableMoveOperation) Metadata() *vpc.MoveRouteTableMetadata {
	return o.Operation.Metadata().(*vpc.MoveRouteTableMetadata)
}

// Response retrieves the operation response.
func (o *RouteTableMoveOperation) Response() *vpc.RouteTable {
	return o.Operation.Response().(*vpc.RouteTable)
}

// Wait polls the operation until it's done.
func (o *RouteTableMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RouteTableMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.RouteTable)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC RouteTable service.
// It returns an object which should be used to monitor the operation state.
func (c routeTableClient) Move(ctx context.Context, in *vpc.MoveRouteTableRequest, opts ...grpc.CallOption) (*RouteTableMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewRouteTableServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveRouteTableMetadata).GetRouteTableId()
		},
		MetadataType: (*vpc.MoveRouteTableMetadata)(nil),
		ResponseType: (*vpc.RouteTable)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RouteTableMoveOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c routeTableClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RouteTableOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RouteTableGet             = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.Get")
	RouteTableList            = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.List")
	RouteTableCreate          = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.Create")
	RouteTableUpdate          = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.Update")
	RouteTableDelete          = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.Delete")
	RouteTableListOperations  = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.ListOperations")
	RouteTableMove            = protoreflect.FullName("yandex.cloud.vpc.v1.RouteTableService.Move")
	RouteTableOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
