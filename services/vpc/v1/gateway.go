// Code generated by sdkgen-v2. DO NOT EDIT.
package vpcsdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	vpc "github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GatewayClient provides methods for managing Gateway resources of Yandex.Cloud VPC.
type GatewayClient interface {
	Get(context.Context, *vpc.GetGatewayRequest, ...grpc.CallOption) (*vpc.Gateway, error)
	List(context.Context, *vpc.ListGatewaysRequest, ...grpc.CallOption) (*vpc.ListGatewaysResponse, error)
	Create(context.Context, *vpc.CreateGatewayRequest, ...grpc.CallOption) (*GatewayCreateOperation, error)
	Update(context.Context, *vpc.UpdateGatewayRequest, ...grpc.CallOption) (*GatewayUpdateOperation, error)
	Delete(context.Context, *vpc.DeleteGatewayRequest, ...grpc.CallOption) (*GatewayDeleteOperation, error)
	ListOperations(context.Context, *vpc.ListGatewayOperationsRequest, ...grpc.CallOption) (*vpc.ListGatewayOperationsResponse, error)
	Move(context.Context, *vpc.MoveGatewayRequest, ...grpc.CallOption) (*GatewayMoveOperation, error)
}

var _ GatewayClient = gatewayClient{}

type gatewayClient struct {
	connector transport.Connector
}

// NewGatewayClient returns GatewayClient implementation.
func NewGatewayClient(connector transport.Connector) GatewayClient {
	return gatewayClient{connector}
}

// Get is an operation of Yandex.Cloud VPC Gateway service.
func (c gatewayClient) Get(ctx context.Context, in *vpc.GetGatewayRequest, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayGet, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewGatewayServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud VPC Gateway service.
func (c gatewayClient) List(ctx context.Context, in *vpc.ListGatewaysRequest, opts ...grpc.CallOption) (*vpc.ListGatewaysResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayList, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewGatewayServiceClient(connection).List(ctx, in, opts...)
}

// GatewayCreateOperation is used to monitor the state of Create operations.
type GatewayCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GatewayCreateOperation) Metadata() *vpc.CreateGatewayMetadata {
	return o.Operation.Metadata().(*vpc.CreateGatewayMetadata)
}

// Response retrieves the operation response.
func (o *GatewayCreateOperation) Response() *vpc.Gateway {
	return o.Operation.Response().(*vpc.Gateway)
}

// Wait polls the operation until it's done.
func (o *GatewayCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GatewayCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// Create is an operation of Yandex.Cloud VPC Gateway service.
// It returns an object which should be used to monitor the operation state.
func (c gatewayClient) Create(ctx context.Context, in *vpc.CreateGatewayRequest, opts ...grpc.CallOption) (*GatewayCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewGatewayServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.CreateGatewayMetadata).GetGatewayId()
		},
		MetadataType: (*vpc.CreateGatewayMetadata)(nil),
		ResponseType: (*vpc.Gateway)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GatewayCreateOperation{*op}, nil
}

// GatewayUpdateOperation is used to monitor the state of Update operations.
type GatewayUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GatewayUpdateOperation) Metadata() *vpc.UpdateGatewayMetadata {
	return o.Operation.Metadata().(*vpc.UpdateGatewayMetadata)
}

// Response retrieves the operation response.
func (o *GatewayUpdateOperation) Response() *vpc.Gateway {
	return o.Operation.Response().(*vpc.Gateway)
}

// Wait polls the operation until it's done.
func (o *GatewayUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GatewayUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// Update is an operation of Yandex.Cloud VPC Gateway service.
// It returns an object which should be used to monitor the operation state.
func (c gatewayClient) Update(ctx context.Context, in *vpc.UpdateGatewayRequest, opts ...grpc.CallOption) (*GatewayUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewGatewayServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.UpdateGatewayMetadata).GetGatewayId()
		},
		MetadataType: (*vpc.UpdateGatewayMetadata)(nil),
		ResponseType: (*vpc.Gateway)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GatewayUpdateOperation{*op}, nil
}

// GatewayDeleteOperation is used to monitor the state of Delete operations.
type GatewayDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GatewayDeleteOperation) Metadata() *vpc.DeleteGatewayMetadata {
	return o.Operation.Metadata().(*vpc.DeleteGatewayMetadata)
}

// Response retrieves the operation response.
func (o *GatewayDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *GatewayDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GatewayDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud VPC Gateway service.
// It returns an object which should be used to monitor the operation state.
func (c gatewayClient) Delete(ctx context.Context, in *vpc.DeleteGatewayRequest, opts ...grpc.CallOption) (*GatewayDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewGatewayServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.DeleteGatewayMetadata).GetGatewayId()
		},
		MetadataType: (*vpc.DeleteGatewayMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GatewayDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud VPC Gateway service.
func (c gatewayClient) ListOperations(ctx context.Context, in *vpc.ListGatewayOperationsRequest, opts ...grpc.CallOption) (*vpc.ListGatewayOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return vpc.NewGatewayServiceClient(connection).ListOperations(ctx, in, opts...)
}

// GatewayMoveOperation is used to monitor the state of Move operations.
type GatewayMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *GatewayMoveOperation) Metadata() *vpc.MoveGatewayMetadata {
	return o.Operation.Metadata().(*vpc.MoveGatewayMetadata)
}

// Response retrieves the operation response.
func (o *GatewayMoveOperation) Response() *vpc.Gateway {
	return o.Operation.Response().(*vpc.Gateway)
}

// Wait polls the operation until it's done.
func (o *GatewayMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *GatewayMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*vpc.Gateway, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*vpc.Gateway)
	return response, err
}

// Move is an operation of Yandex.Cloud VPC Gateway service.
// It returns an object which should be used to monitor the operation state.
func (c gatewayClient) Move(ctx context.Context, in *vpc.MoveGatewayRequest, opts ...grpc.CallOption) (*GatewayMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := vpc.NewGatewayServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*vpc.MoveGatewayMetadata).GetGatewayId()
		},
		MetadataType: (*vpc.MoveGatewayMetadata)(nil),
		ResponseType: (*vpc.Gateway)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &GatewayMoveOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c gatewayClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, GatewayOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	GatewayGet             = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.Get")
	GatewayList            = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.List")
	GatewayCreate          = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.Create")
	GatewayUpdate          = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.Update")
	GatewayDelete          = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.Delete")
	GatewayListOperations  = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.ListOperations")
	GatewayMove            = protoreflect.FullName("yandex.cloud.vpc.v1.GatewayService.Move")
	GatewayOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
