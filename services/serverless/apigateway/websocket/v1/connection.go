// Code generated by sdkgen-v2. DO NOT EDIT.
package websocketsdk

import (
	"context"

	websocket "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/apigateway/websocket/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// ConnectionClient provides methods for managing Connection resources of Yandex.Cloud Websocket.
type ConnectionClient interface {
	Get(context.Context, *websocket.GetConnectionRequest, ...grpc.CallOption) (*websocket.Connection, error)
	Send(context.Context, *websocket.SendToConnectionRequest, ...grpc.CallOption) (*websocket.SendToConnectionResponse, error)
	Disconnect(context.Context, *websocket.DisconnectRequest, ...grpc.CallOption) (*websocket.DisconnectResponse, error)
}

var _ ConnectionClient = connectionClient{}

type connectionClient struct {
	connector transport.Connector
}

// NewConnectionClient returns ConnectionClient implementation.
func NewConnectionClient(connector transport.Connector) ConnectionClient {
	return connectionClient{connector}
}

// Get is an operation of Yandex.Cloud Websocket Connection service.
func (c connectionClient) Get(ctx context.Context, in *websocket.GetConnectionRequest, opts ...grpc.CallOption) (*websocket.Connection, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionGet, opts...)
	if err != nil {
		return nil, err
	}
	return websocket.NewConnectionServiceClient(connection).Get(ctx, in, opts...)
}

// Send is an operation of Yandex.Cloud Websocket Connection service.
func (c connectionClient) Send(ctx context.Context, in *websocket.SendToConnectionRequest, opts ...grpc.CallOption) (*websocket.SendToConnectionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionSend, opts...)
	if err != nil {
		return nil, err
	}
	return websocket.NewConnectionServiceClient(connection).Send(ctx, in, opts...)
}

// Disconnect is an operation of Yandex.Cloud Websocket Connection service.
func (c connectionClient) Disconnect(ctx context.Context, in *websocket.DisconnectRequest, opts ...grpc.CallOption) (*websocket.DisconnectResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectionDisconnect, opts...)
	if err != nil {
		return nil, err
	}
	return websocket.NewConnectionServiceClient(connection).Disconnect(ctx, in, opts...)
}

var (
	ConnectionGet        = protoreflect.FullName("yandex.cloud.serverless.apigateway.websocket.v1.ConnectionService.Get")
	ConnectionSend       = protoreflect.FullName("yandex.cloud.serverless.apigateway.websocket.v1.ConnectionService.Send")
	ConnectionDisconnect = protoreflect.FullName("yandex.cloud.serverless.apigateway.websocket.v1.ConnectionService.Disconnect")
)
