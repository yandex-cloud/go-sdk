// Code generated by sdkgen-v2. DO NOT EDIT.
package apigatewaysdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	apigateway "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/apigateway/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ApiGatewayClient provides methods for managing ApiGateway resources of Yandex.Cloud APIGateway.
type ApiGatewayClient interface {
	Get(context.Context, *apigateway.GetApiGatewayRequest, ...grpc.CallOption) (*apigateway.ApiGateway, error)
	List(context.Context, *apigateway.ListApiGatewayRequest, ...grpc.CallOption) (*apigateway.ListApiGatewayResponse, error)
	Create(context.Context, *apigateway.CreateApiGatewayRequest, ...grpc.CallOption) (*ApiGatewayCreateOperation, error)
	Update(context.Context, *apigateway.UpdateApiGatewayRequest, ...grpc.CallOption) (*ApiGatewayUpdateOperation, error)
	Delete(context.Context, *apigateway.DeleteApiGatewayRequest, ...grpc.CallOption) (*ApiGatewayDeleteOperation, error)
	AddDomain(context.Context, *apigateway.AddDomainRequest, ...grpc.CallOption) (*ApiGatewayAddDomainOperation, error)
	RemoveDomain(context.Context, *apigateway.RemoveDomainRequest, ...grpc.CallOption) (*ApiGatewayRemoveDomainOperation, error)
	GetOpenapiSpec(context.Context, *apigateway.GetOpenapiSpecRequest, ...grpc.CallOption) (*apigateway.GetOpenapiSpecResponse, error)
	ListOperations(context.Context, *apigateway.ListOperationsRequest, ...grpc.CallOption) (*apigateway.ListOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ApiGatewaySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ApiGatewayUpdateAccessBindingsOperation, error)
}

var _ ApiGatewayClient = apiGatewayClient{}

type apiGatewayClient struct {
	connector transport.Connector
}

// NewApiGatewayClient returns ApiGatewayClient implementation.
func NewApiGatewayClient(connector transport.Connector) ApiGatewayClient {
	return apiGatewayClient{connector}
}

// Get is an operation of Yandex.Cloud APIGateway ApiGateway service.
func (c apiGatewayClient) Get(ctx context.Context, in *apigateway.GetApiGatewayRequest, opts ...grpc.CallOption) (*apigateway.ApiGateway, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayGet, opts...)
	if err != nil {
		return nil, err
	}
	return apigateway.NewApiGatewayServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud APIGateway ApiGateway service.
func (c apiGatewayClient) List(ctx context.Context, in *apigateway.ListApiGatewayRequest, opts ...grpc.CallOption) (*apigateway.ListApiGatewayResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayList, opts...)
	if err != nil {
		return nil, err
	}
	return apigateway.NewApiGatewayServiceClient(connection).List(ctx, in, opts...)
}

// ApiGatewayCreateOperation is used to monitor the state of Create operations.
type ApiGatewayCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ApiGatewayCreateOperation) Metadata() *apigateway.CreateApiGatewayMetadata {
	return o.Operation.Metadata().(*apigateway.CreateApiGatewayMetadata)
}

// Response retrieves the operation response.
func (o *ApiGatewayCreateOperation) Response() *apigateway.ApiGateway {
	return o.Operation.Response().(*apigateway.ApiGateway)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apigateway.ApiGateway, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apigateway.ApiGateway)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apigateway.ApiGateway, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apigateway.ApiGateway)
	return response, err
}

// Create is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) Create(ctx context.Context, in *apigateway.CreateApiGatewayRequest, opts ...grpc.CallOption) (*ApiGatewayCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apigateway.CreateApiGatewayMetadata).GetApiGatewayId()
		},
		MetadataType: (*apigateway.CreateApiGatewayMetadata)(nil),
		ResponseType: (*apigateway.ApiGateway)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayCreateOperation{*op}, nil
}

// ApiGatewayUpdateOperation is used to monitor the state of Update operations.
type ApiGatewayUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ApiGatewayUpdateOperation) Metadata() *apigateway.UpdateApiGatewayMetadata {
	return o.Operation.Metadata().(*apigateway.UpdateApiGatewayMetadata)
}

// Response retrieves the operation response.
func (o *ApiGatewayUpdateOperation) Response() *apigateway.ApiGateway {
	return o.Operation.Response().(*apigateway.ApiGateway)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*apigateway.ApiGateway, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*apigateway.ApiGateway)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*apigateway.ApiGateway, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*apigateway.ApiGateway)
	return response, err
}

// Update is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) Update(ctx context.Context, in *apigateway.UpdateApiGatewayRequest, opts ...grpc.CallOption) (*ApiGatewayUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apigateway.UpdateApiGatewayMetadata).GetApiGatewayId()
		},
		MetadataType: (*apigateway.UpdateApiGatewayMetadata)(nil),
		ResponseType: (*apigateway.ApiGateway)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayUpdateOperation{*op}, nil
}

// ApiGatewayDeleteOperation is used to monitor the state of Delete operations.
type ApiGatewayDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ApiGatewayDeleteOperation) Metadata() *apigateway.DeleteApiGatewayMetadata {
	return o.Operation.Metadata().(*apigateway.DeleteApiGatewayMetadata)
}

// Response retrieves the operation response.
func (o *ApiGatewayDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) Delete(ctx context.Context, in *apigateway.DeleteApiGatewayRequest, opts ...grpc.CallOption) (*ApiGatewayDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apigateway.DeleteApiGatewayMetadata).GetApiGatewayId()
		},
		MetadataType: (*apigateway.DeleteApiGatewayMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayDeleteOperation{*op}, nil
}

// ApiGatewayAddDomainOperation is used to monitor the state of AddDomain operations.
type ApiGatewayAddDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ApiGatewayAddDomainOperation) Metadata() *apigateway.AddDomainMetadata {
	return o.Operation.Metadata().(*apigateway.AddDomainMetadata)
}

// Response retrieves the operation response.
func (o *ApiGatewayAddDomainOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayAddDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayAddDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddDomain is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) AddDomain(ctx context.Context, in *apigateway.AddDomainRequest, opts ...grpc.CallOption) (*ApiGatewayAddDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayAddDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).AddDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apigateway.AddDomainMetadata).GetApiGatewayId()
		},
		MetadataType: (*apigateway.AddDomainMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayAddDomainOperation{*op}, nil
}

// ApiGatewayRemoveDomainOperation is used to monitor the state of RemoveDomain operations.
type ApiGatewayRemoveDomainOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ApiGatewayRemoveDomainOperation) Metadata() *apigateway.RemoveDomainMetadata {
	return o.Operation.Metadata().(*apigateway.RemoveDomainMetadata)
}

// Response retrieves the operation response.
func (o *ApiGatewayRemoveDomainOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayRemoveDomainOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayRemoveDomainOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveDomain is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) RemoveDomain(ctx context.Context, in *apigateway.RemoveDomainRequest, opts ...grpc.CallOption) (*ApiGatewayRemoveDomainOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayRemoveDomain, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).RemoveDomain(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*apigateway.RemoveDomainMetadata).GetApiGatewayId()
		},
		MetadataType: (*apigateway.RemoveDomainMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayRemoveDomainOperation{*op}, nil
}

// GetOpenapiSpec is an operation of Yandex.Cloud APIGateway ApiGateway service.
func (c apiGatewayClient) GetOpenapiSpec(ctx context.Context, in *apigateway.GetOpenapiSpecRequest, opts ...grpc.CallOption) (*apigateway.GetOpenapiSpecResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayGetOpenapiSpec, opts...)
	if err != nil {
		return nil, err
	}
	return apigateway.NewApiGatewayServiceClient(connection).GetOpenapiSpec(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud APIGateway ApiGateway service.
func (c apiGatewayClient) ListOperations(ctx context.Context, in *apigateway.ListOperationsRequest, opts ...grpc.CallOption) (*apigateway.ListOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return apigateway.NewApiGatewayServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud APIGateway ApiGateway service.
func (c apiGatewayClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return apigateway.NewApiGatewayServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ApiGatewaySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ApiGatewaySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ApiGatewaySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ApiGatewaySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewaySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ApiGatewaySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewaySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewaySetAccessBindingsOperation{*op}, nil
}

// ApiGatewayUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ApiGatewayUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ApiGatewayUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ApiGatewayUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ApiGatewayUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud APIGateway ApiGateway service.
// It returns an object which should be used to monitor the operation state.
func (c apiGatewayClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ApiGatewayUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := apigateway.NewApiGatewayServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ApiGatewayUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c apiGatewayClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ApiGatewayOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ApiGatewayGet                  = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.Get")
	ApiGatewayList                 = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.List")
	ApiGatewayCreate               = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.Create")
	ApiGatewayUpdate               = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.Update")
	ApiGatewayDelete               = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.Delete")
	ApiGatewayAddDomain            = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.AddDomain")
	ApiGatewayRemoveDomain         = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.RemoveDomain")
	ApiGatewayGetOpenapiSpec       = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.GetOpenapiSpec")
	ApiGatewayListOperations       = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.ListOperations")
	ApiGatewayListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.ListAccessBindings")
	ApiGatewaySetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.SetAccessBindings")
	ApiGatewayUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.apigateway.v1.ApiGatewayService.UpdateAccessBindings")
	ApiGatewayOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
