// Code generated by sdkgen-v2. DO NOT EDIT.
package eventroutersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	eventrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RuleClient provides methods for managing Rule resources of Yandex.Cloud Eventrouter.
type RuleClient interface {
	Get(context.Context, *eventrouter.GetRuleRequest, ...grpc.CallOption) (*eventrouter.Rule, error)
	List(context.Context, *eventrouter.ListRulesRequest, ...grpc.CallOption) (*eventrouter.ListRulesResponse, error)
	Create(context.Context, *eventrouter.CreateRuleRequest, ...grpc.CallOption) (*RuleCreateOperation, error)
	Update(context.Context, *eventrouter.UpdateRuleRequest, ...grpc.CallOption) (*RuleUpdateOperation, error)
	Delete(context.Context, *eventrouter.DeleteRuleRequest, ...grpc.CallOption) (*RuleDeleteOperation, error)
	Enable(context.Context, *eventrouter.EnableRuleRequest, ...grpc.CallOption) (*RuleEnableOperation, error)
	Disable(context.Context, *eventrouter.DisableRuleRequest, ...grpc.CallOption) (*RuleDisableOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*RuleSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*RuleUpdateAccessBindingsOperation, error)
	ListOperations(context.Context, *eventrouter.ListRuleOperationsRequest, ...grpc.CallOption) (*eventrouter.ListRuleOperationsResponse, error)
}

var _ RuleClient = ruleClient{}

type ruleClient struct {
	connector transport.Connector
}

// NewRuleClient returns RuleClient implementation.
func NewRuleClient(connector transport.Connector) RuleClient {
	return ruleClient{connector}
}

// Get is an operation of Yandex.Cloud Eventrouter Rule service.
func (c ruleClient) Get(ctx context.Context, in *eventrouter.GetRuleRequest, opts ...grpc.CallOption) (*eventrouter.Rule, error) {
	connection, err := c.connector.GetConnection(ctx, RuleGet, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewRuleServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Eventrouter Rule service.
func (c ruleClient) List(ctx context.Context, in *eventrouter.ListRulesRequest, opts ...grpc.CallOption) (*eventrouter.ListRulesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RuleList, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewRuleServiceClient(connection).List(ctx, in, opts...)
}

// RuleCreateOperation is used to monitor the state of Create operations.
type RuleCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RuleCreateOperation) Metadata() *eventrouter.CreateRuleMetadata {
	return o.Operation.Metadata().(*eventrouter.CreateRuleMetadata)
}

// Response retrieves the operation response.
func (o *RuleCreateOperation) Response() *eventrouter.Rule {
	return o.Operation.Response().(*eventrouter.Rule)
}

// Wait polls the operation until it's done.
func (o *RuleCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Rule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Rule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Rule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Rule)
	return response, err
}

// Create is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) Create(ctx context.Context, in *eventrouter.CreateRuleRequest, opts ...grpc.CallOption) (*RuleCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.CreateRuleMetadata).GetRuleId()
		},
		MetadataType: (*eventrouter.CreateRuleMetadata)(nil),
		ResponseType: (*eventrouter.Rule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleCreateOperation{*op}, nil
}

// RuleUpdateOperation is used to monitor the state of Update operations.
type RuleUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RuleUpdateOperation) Metadata() *eventrouter.UpdateRuleMetadata {
	return o.Operation.Metadata().(*eventrouter.UpdateRuleMetadata)
}

// Response retrieves the operation response.
func (o *RuleUpdateOperation) Response() *eventrouter.Rule {
	return o.Operation.Response().(*eventrouter.Rule)
}

// Wait polls the operation until it's done.
func (o *RuleUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Rule, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Rule)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Rule, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Rule)
	return response, err
}

// Update is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) Update(ctx context.Context, in *eventrouter.UpdateRuleRequest, opts ...grpc.CallOption) (*RuleUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.UpdateRuleMetadata).GetRuleId()
		},
		MetadataType: (*eventrouter.UpdateRuleMetadata)(nil),
		ResponseType: (*eventrouter.Rule)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleUpdateOperation{*op}, nil
}

// RuleDeleteOperation is used to monitor the state of Delete operations.
type RuleDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RuleDeleteOperation) Metadata() *eventrouter.DeleteRuleMetadata {
	return o.Operation.Metadata().(*eventrouter.DeleteRuleMetadata)
}

// Response retrieves the operation response.
func (o *RuleDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RuleDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) Delete(ctx context.Context, in *eventrouter.DeleteRuleRequest, opts ...grpc.CallOption) (*RuleDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.DeleteRuleMetadata).GetRuleId()
		},
		MetadataType: (*eventrouter.DeleteRuleMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleDeleteOperation{*op}, nil
}

// RuleEnableOperation is used to monitor the state of Enable operations.
type RuleEnableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RuleEnableOperation) Metadata() *eventrouter.EnableRuleMetadata {
	return o.Operation.Metadata().(*eventrouter.EnableRuleMetadata)
}

// Response retrieves the operation response.
func (o *RuleEnableOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RuleEnableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleEnableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Enable is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) Enable(ctx context.Context, in *eventrouter.EnableRuleRequest, opts ...grpc.CallOption) (*RuleEnableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleEnable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).Enable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.EnableRuleMetadata).GetRuleId()
		},
		MetadataType: (*eventrouter.EnableRuleMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleEnableOperation{*op}, nil
}

// RuleDisableOperation is used to monitor the state of Disable operations.
type RuleDisableOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RuleDisableOperation) Metadata() *eventrouter.DisableRuleMetadata {
	return o.Operation.Metadata().(*eventrouter.DisableRuleMetadata)
}

// Response retrieves the operation response.
func (o *RuleDisableOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RuleDisableOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleDisableOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Disable is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) Disable(ctx context.Context, in *eventrouter.DisableRuleRequest, opts ...grpc.CallOption) (*RuleDisableOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleDisable, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).Disable(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.DisableRuleMetadata).GetRuleId()
		},
		MetadataType: (*eventrouter.DisableRuleMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleDisableOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Eventrouter Rule service.
func (c ruleClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RuleListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewRuleServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// RuleSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type RuleSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RuleSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RuleSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*RuleSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleSetAccessBindingsOperation{*op}, nil
}

// RuleUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type RuleUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RuleUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RuleUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RuleUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Eventrouter Rule service.
// It returns an object which should be used to monitor the operation state.
func (c ruleClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*RuleUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewRuleServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RuleUpdateAccessBindingsOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Eventrouter Rule service.
func (c ruleClient) ListOperations(ctx context.Context, in *eventrouter.ListRuleOperationsRequest, opts ...grpc.CallOption) (*eventrouter.ListRuleOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RuleListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewRuleServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c ruleClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RuleOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RuleGet                  = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Get")
	RuleList                 = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.List")
	RuleCreate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Create")
	RuleUpdate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Update")
	RuleDelete               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Delete")
	RuleEnable               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Enable")
	RuleDisable              = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.Disable")
	RuleListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.ListAccessBindings")
	RuleSetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.SetAccessBindings")
	RuleUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.UpdateAccessBindings")
	RuleListOperations       = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.RuleService.ListOperations")
	RuleOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
