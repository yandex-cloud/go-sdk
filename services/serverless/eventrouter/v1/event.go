// Code generated by sdkgen-v2. DO NOT EDIT.
package eventroutersdk

import (
	"context"

	eventrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// EventClient provides methods for managing Event resources of Yandex.Cloud Eventrouter.
type EventClient interface {
	Put(context.Context, *eventrouter.PutEventRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	Send(context.Context, *eventrouter.SendEventsRequest, ...grpc.CallOption) (*emptypb.Empty, error)
}

var _ EventClient = eventClient{}

type eventClient struct {
	connector transport.Connector
}

// NewEventClient returns EventClient implementation.
func NewEventClient(connector transport.Connector) EventClient {
	return eventClient{connector}
}

// Put is an operation of Yandex.Cloud Eventrouter Event service.
func (c eventClient) Put(ctx context.Context, in *eventrouter.PutEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	connection, err := c.connector.GetConnection(ctx, EventPut, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewEventServiceClient(connection).Put(ctx, in, opts...)
}

// Send is an operation of Yandex.Cloud Eventrouter Event service.
func (c eventClient) Send(ctx context.Context, in *eventrouter.SendEventsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	connection, err := c.connector.GetConnection(ctx, EventSend, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewEventServiceClient(connection).Send(ctx, in, opts...)
}

var (
	EventPut  = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.EventService.Put")
	EventSend = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.EventService.Send")
)
