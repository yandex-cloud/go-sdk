// Code generated by sdkgen-v2. DO NOT EDIT.
package eventroutersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	eventrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BusClient provides methods for managing Bus resources of Yandex.Cloud Eventrouter.
type BusClient interface {
	Get(context.Context, *eventrouter.GetBusRequest, ...grpc.CallOption) (*eventrouter.Bus, error)
	List(context.Context, *eventrouter.ListBusesRequest, ...grpc.CallOption) (*eventrouter.ListBusesResponse, error)
	Create(context.Context, *eventrouter.CreateBusRequest, ...grpc.CallOption) (*BusCreateOperation, error)
	Update(context.Context, *eventrouter.UpdateBusRequest, ...grpc.CallOption) (*BusUpdateOperation, error)
	Delete(context.Context, *eventrouter.DeleteBusRequest, ...grpc.CallOption) (*BusDeleteOperation, error)
	ListOperations(context.Context, *eventrouter.ListBusOperationsRequest, ...grpc.CallOption) (*eventrouter.ListBusOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*BusSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*BusUpdateAccessBindingsOperation, error)
}

var _ BusClient = busClient{}

type busClient struct {
	connector transport.Connector
}

// NewBusClient returns BusClient implementation.
func NewBusClient(connector transport.Connector) BusClient {
	return busClient{connector}
}

// Get is an operation of Yandex.Cloud Eventrouter Bus service.
func (c busClient) Get(ctx context.Context, in *eventrouter.GetBusRequest, opts ...grpc.CallOption) (*eventrouter.Bus, error) {
	connection, err := c.connector.GetConnection(ctx, BusGet, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewBusServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Eventrouter Bus service.
func (c busClient) List(ctx context.Context, in *eventrouter.ListBusesRequest, opts ...grpc.CallOption) (*eventrouter.ListBusesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BusList, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewBusServiceClient(connection).List(ctx, in, opts...)
}

// BusCreateOperation is used to monitor the state of Create operations.
type BusCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BusCreateOperation) Metadata() *eventrouter.CreateBusMetadata {
	return o.Operation.Metadata().(*eventrouter.CreateBusMetadata)
}

// Response retrieves the operation response.
func (o *BusCreateOperation) Response() *eventrouter.Bus {
	return o.Operation.Response().(*eventrouter.Bus)
}

// Wait polls the operation until it's done.
func (o *BusCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Bus, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Bus)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BusCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Bus, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Bus)
	return response, err
}

// Create is an operation of Yandex.Cloud Eventrouter Bus service.
// It returns an object which should be used to monitor the operation state.
func (c busClient) Create(ctx context.Context, in *eventrouter.CreateBusRequest, opts ...grpc.CallOption) (*BusCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewBusServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.CreateBusMetadata).GetBusId()
		},
		MetadataType: (*eventrouter.CreateBusMetadata)(nil),
		ResponseType: (*eventrouter.Bus)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BusCreateOperation{*op}, nil
}

// BusUpdateOperation is used to monitor the state of Update operations.
type BusUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BusUpdateOperation) Metadata() *eventrouter.UpdateBusMetadata {
	return o.Operation.Metadata().(*eventrouter.UpdateBusMetadata)
}

// Response retrieves the operation response.
func (o *BusUpdateOperation) Response() *eventrouter.Bus {
	return o.Operation.Response().(*eventrouter.Bus)
}

// Wait polls the operation until it's done.
func (o *BusUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Bus, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Bus)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BusUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Bus, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Bus)
	return response, err
}

// Update is an operation of Yandex.Cloud Eventrouter Bus service.
// It returns an object which should be used to monitor the operation state.
func (c busClient) Update(ctx context.Context, in *eventrouter.UpdateBusRequest, opts ...grpc.CallOption) (*BusUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewBusServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.UpdateBusMetadata).GetBusId()
		},
		MetadataType: (*eventrouter.UpdateBusMetadata)(nil),
		ResponseType: (*eventrouter.Bus)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BusUpdateOperation{*op}, nil
}

// BusDeleteOperation is used to monitor the state of Delete operations.
type BusDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BusDeleteOperation) Metadata() *eventrouter.DeleteBusMetadata {
	return o.Operation.Metadata().(*eventrouter.DeleteBusMetadata)
}

// Response retrieves the operation response.
func (o *BusDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BusDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BusDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Eventrouter Bus service.
// It returns an object which should be used to monitor the operation state.
func (c busClient) Delete(ctx context.Context, in *eventrouter.DeleteBusRequest, opts ...grpc.CallOption) (*BusDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewBusServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.DeleteBusMetadata).GetBusId()
		},
		MetadataType: (*eventrouter.DeleteBusMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BusDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Eventrouter Bus service.
func (c busClient) ListOperations(ctx context.Context, in *eventrouter.ListBusOperationsRequest, opts ...grpc.CallOption) (*eventrouter.ListBusOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BusListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewBusServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Eventrouter Bus service.
func (c busClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BusListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewBusServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// BusSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type BusSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BusSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BusSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BusSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BusSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Eventrouter Bus service.
// It returns an object which should be used to monitor the operation state.
func (c busClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*BusSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewBusServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BusSetAccessBindingsOperation{*op}, nil
}

// BusUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type BusUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BusUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BusUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BusUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BusUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Eventrouter Bus service.
// It returns an object which should be used to monitor the operation state.
func (c busClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*BusUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewBusServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BusUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c busClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BusOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BusGet                  = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.Get")
	BusList                 = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.List")
	BusCreate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.Create")
	BusUpdate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.Update")
	BusDelete               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.Delete")
	BusListOperations       = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.ListOperations")
	BusListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.ListAccessBindings")
	BusSetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.SetAccessBindings")
	BusUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.BusService.UpdateAccessBindings")
	BusOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
