// Code generated by sdkgen-v2. DO NOT EDIT.
package eventroutersdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	eventrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ConnectorClient provides methods for managing Connector resources of Yandex.Cloud Eventrouter.
type ConnectorClient interface {
	Get(context.Context, *eventrouter.GetConnectorRequest, ...grpc.CallOption) (*eventrouter.Connector, error)
	List(context.Context, *eventrouter.ListConnectorsRequest, ...grpc.CallOption) (*eventrouter.ListConnectorsResponse, error)
	Create(context.Context, *eventrouter.CreateConnectorRequest, ...grpc.CallOption) (*ConnectorCreateOperation, error)
	Update(context.Context, *eventrouter.UpdateConnectorRequest, ...grpc.CallOption) (*ConnectorUpdateOperation, error)
	Delete(context.Context, *eventrouter.DeleteConnectorRequest, ...grpc.CallOption) (*ConnectorDeleteOperation, error)
	Start(context.Context, *eventrouter.StartConnectorRequest, ...grpc.CallOption) (*ConnectorStartOperation, error)
	Stop(context.Context, *eventrouter.StopConnectorRequest, ...grpc.CallOption) (*ConnectorStopOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ConnectorSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ConnectorUpdateAccessBindingsOperation, error)
	ListOperations(context.Context, *eventrouter.ListConnectorOperationsRequest, ...grpc.CallOption) (*eventrouter.ListConnectorOperationsResponse, error)
}

var _ ConnectorClient = connectorClient{}

type connectorClient struct {
	connector transport.Connector
}

// NewConnectorClient returns ConnectorClient implementation.
func NewConnectorClient(connector transport.Connector) ConnectorClient {
	return connectorClient{connector}
}

// Get is an operation of Yandex.Cloud Eventrouter Connector service.
func (c connectorClient) Get(ctx context.Context, in *eventrouter.GetConnectorRequest, opts ...grpc.CallOption) (*eventrouter.Connector, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorGet, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewConnectorServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Eventrouter Connector service.
func (c connectorClient) List(ctx context.Context, in *eventrouter.ListConnectorsRequest, opts ...grpc.CallOption) (*eventrouter.ListConnectorsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorList, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewConnectorServiceClient(connection).List(ctx, in, opts...)
}

// ConnectorCreateOperation is used to monitor the state of Create operations.
type ConnectorCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectorCreateOperation) Metadata() *eventrouter.CreateConnectorMetadata {
	return o.Operation.Metadata().(*eventrouter.CreateConnectorMetadata)
}

// Response retrieves the operation response.
func (o *ConnectorCreateOperation) Response() *eventrouter.Connector {
	return o.Operation.Response().(*eventrouter.Connector)
}

// Wait polls the operation until it's done.
func (o *ConnectorCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Connector, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Connector)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Connector, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Connector)
	return response, err
}

// Create is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) Create(ctx context.Context, in *eventrouter.CreateConnectorRequest, opts ...grpc.CallOption) (*ConnectorCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.CreateConnectorMetadata).GetConnectorId()
		},
		MetadataType: (*eventrouter.CreateConnectorMetadata)(nil),
		ResponseType: (*eventrouter.Connector)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorCreateOperation{*op}, nil
}

// ConnectorUpdateOperation is used to monitor the state of Update operations.
type ConnectorUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectorUpdateOperation) Metadata() *eventrouter.UpdateConnectorMetadata {
	return o.Operation.Metadata().(*eventrouter.UpdateConnectorMetadata)
}

// Response retrieves the operation response.
func (o *ConnectorUpdateOperation) Response() *eventrouter.Connector {
	return o.Operation.Response().(*eventrouter.Connector)
}

// Wait polls the operation until it's done.
func (o *ConnectorUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*eventrouter.Connector, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*eventrouter.Connector)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*eventrouter.Connector, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*eventrouter.Connector)
	return response, err
}

// Update is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) Update(ctx context.Context, in *eventrouter.UpdateConnectorRequest, opts ...grpc.CallOption) (*ConnectorUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.UpdateConnectorMetadata).GetConnectorId()
		},
		MetadataType: (*eventrouter.UpdateConnectorMetadata)(nil),
		ResponseType: (*eventrouter.Connector)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorUpdateOperation{*op}, nil
}

// ConnectorDeleteOperation is used to monitor the state of Delete operations.
type ConnectorDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectorDeleteOperation) Metadata() *eventrouter.DeleteConnectorMetadata {
	return o.Operation.Metadata().(*eventrouter.DeleteConnectorMetadata)
}

// Response retrieves the operation response.
func (o *ConnectorDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectorDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) Delete(ctx context.Context, in *eventrouter.DeleteConnectorRequest, opts ...grpc.CallOption) (*ConnectorDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.DeleteConnectorMetadata).GetConnectorId()
		},
		MetadataType: (*eventrouter.DeleteConnectorMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorDeleteOperation{*op}, nil
}

// ConnectorStartOperation is used to monitor the state of Start operations.
type ConnectorStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectorStartOperation) Metadata() *eventrouter.StartConnectorMetadata {
	return o.Operation.Metadata().(*eventrouter.StartConnectorMetadata)
}

// Response retrieves the operation response.
func (o *ConnectorStartOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectorStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Start is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) Start(ctx context.Context, in *eventrouter.StartConnectorRequest, opts ...grpc.CallOption) (*ConnectorStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.StartConnectorMetadata).GetConnectorId()
		},
		MetadataType: (*eventrouter.StartConnectorMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorStartOperation{*op}, nil
}

// ConnectorStopOperation is used to monitor the state of Stop operations.
type ConnectorStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ConnectorStopOperation) Metadata() *eventrouter.StopConnectorMetadata {
	return o.Operation.Metadata().(*eventrouter.StopConnectorMetadata)
}

// Response retrieves the operation response.
func (o *ConnectorStopOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectorStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Stop is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) Stop(ctx context.Context, in *eventrouter.StopConnectorRequest, opts ...grpc.CallOption) (*ConnectorStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*eventrouter.StopConnectorMetadata).GetConnectorId()
		},
		MetadataType: (*eventrouter.StopConnectorMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorStopOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Eventrouter Connector service.
func (c connectorClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewConnectorServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ConnectorSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ConnectorSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ConnectorSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectorSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ConnectorSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorSetAccessBindingsOperation{*op}, nil
}

// ConnectorUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ConnectorUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ConnectorUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ConnectorUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ConnectorUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Eventrouter Connector service.
// It returns an object which should be used to monitor the operation state.
func (c connectorClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ConnectorUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := eventrouter.NewConnectorServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ConnectorUpdateAccessBindingsOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Eventrouter Connector service.
func (c connectorClient) ListOperations(ctx context.Context, in *eventrouter.ListConnectorOperationsRequest, opts ...grpc.CallOption) (*eventrouter.ListConnectorOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return eventrouter.NewConnectorServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c connectorClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ConnectorOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ConnectorGet                  = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Get")
	ConnectorList                 = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.List")
	ConnectorCreate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Create")
	ConnectorUpdate               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Update")
	ConnectorDelete               = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Delete")
	ConnectorStart                = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Start")
	ConnectorStop                 = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.Stop")
	ConnectorListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.ListAccessBindings")
	ConnectorSetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.SetAccessBindings")
	ConnectorUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.UpdateAccessBindings")
	ConnectorListOperations       = protoreflect.FullName("yandex.cloud.serverless.eventrouter.v1.ConnectorService.ListOperations")
	ConnectorOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
