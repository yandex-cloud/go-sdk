// Code generated by sdkgen-v2. DO NOT EDIT.
package mdbproxysdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	mdbproxy "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/mdbproxy/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ProxyClient provides methods for managing Proxy resources of Yandex.Cloud Mdbproxy.
type ProxyClient interface {
	Get(context.Context, *mdbproxy.GetProxyRequest, ...grpc.CallOption) (*mdbproxy.Proxy, error)
	List(context.Context, *mdbproxy.ListProxyRequest, ...grpc.CallOption) (*mdbproxy.ListProxyResponse, error)
	Create(context.Context, *mdbproxy.CreateProxyRequest, ...grpc.CallOption) (*ProxyCreateOperation, error)
	Update(context.Context, *mdbproxy.UpdateProxyRequest, ...grpc.CallOption) (*ProxyUpdateOperation, error)
	Delete(context.Context, *mdbproxy.DeleteProxyRequest, ...grpc.CallOption) (*ProxyDeleteOperation, error)
	ListOperations(context.Context, *mdbproxy.ListProxyOperationsRequest, ...grpc.CallOption) (*mdbproxy.ListProxyOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ProxySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ProxyUpdateAccessBindingsOperation, error)
}

var _ ProxyClient = proxyClient{}

type proxyClient struct {
	connector transport.Connector
}

// NewProxyClient returns ProxyClient implementation.
func NewProxyClient(connector transport.Connector) ProxyClient {
	return proxyClient{connector}
}

// Get is an operation of Yandex.Cloud Mdbproxy Proxy service.
func (c proxyClient) Get(ctx context.Context, in *mdbproxy.GetProxyRequest, opts ...grpc.CallOption) (*mdbproxy.Proxy, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyGet, opts...)
	if err != nil {
		return nil, err
	}
	return mdbproxy.NewProxyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Mdbproxy Proxy service.
func (c proxyClient) List(ctx context.Context, in *mdbproxy.ListProxyRequest, opts ...grpc.CallOption) (*mdbproxy.ListProxyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyList, opts...)
	if err != nil {
		return nil, err
	}
	return mdbproxy.NewProxyServiceClient(connection).List(ctx, in, opts...)
}

// ProxyCreateOperation is used to monitor the state of Create operations.
type ProxyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProxyCreateOperation) Metadata() *mdbproxy.CreateProxyMetadata {
	return o.Operation.Metadata().(*mdbproxy.CreateProxyMetadata)
}

// Response retrieves the operation response.
func (o *ProxyCreateOperation) Response() *mdbproxy.Proxy {
	return o.Operation.Response().(*mdbproxy.Proxy)
}

// Wait polls the operation until it's done.
func (o *ProxyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mdbproxy.Proxy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mdbproxy.Proxy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProxyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mdbproxy.Proxy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mdbproxy.Proxy)
	return response, err
}

// Create is an operation of Yandex.Cloud Mdbproxy Proxy service.
// It returns an object which should be used to monitor the operation state.
func (c proxyClient) Create(ctx context.Context, in *mdbproxy.CreateProxyRequest, opts ...grpc.CallOption) (*ProxyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mdbproxy.NewProxyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*mdbproxy.CreateProxyMetadata).GetProxyId()
		},
		MetadataType: (*mdbproxy.CreateProxyMetadata)(nil),
		ResponseType: (*mdbproxy.Proxy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProxyCreateOperation{*op}, nil
}

// ProxyUpdateOperation is used to monitor the state of Update operations.
type ProxyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProxyUpdateOperation) Metadata() *mdbproxy.UpdateProxyMetadata {
	return o.Operation.Metadata().(*mdbproxy.UpdateProxyMetadata)
}

// Response retrieves the operation response.
func (o *ProxyUpdateOperation) Response() *mdbproxy.Proxy {
	return o.Operation.Response().(*mdbproxy.Proxy)
}

// Wait polls the operation until it's done.
func (o *ProxyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*mdbproxy.Proxy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*mdbproxy.Proxy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProxyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*mdbproxy.Proxy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*mdbproxy.Proxy)
	return response, err
}

// Update is an operation of Yandex.Cloud Mdbproxy Proxy service.
// It returns an object which should be used to monitor the operation state.
func (c proxyClient) Update(ctx context.Context, in *mdbproxy.UpdateProxyRequest, opts ...grpc.CallOption) (*ProxyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mdbproxy.NewProxyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*mdbproxy.UpdateProxyMetadata).GetProxyId()
		},
		MetadataType: (*mdbproxy.UpdateProxyMetadata)(nil),
		ResponseType: (*mdbproxy.Proxy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProxyUpdateOperation{*op}, nil
}

// ProxyDeleteOperation is used to monitor the state of Delete operations.
type ProxyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProxyDeleteOperation) Metadata() *mdbproxy.DeleteProxyMetadata {
	return o.Operation.Metadata().(*mdbproxy.DeleteProxyMetadata)
}

// Response retrieves the operation response.
func (o *ProxyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProxyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProxyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Mdbproxy Proxy service.
// It returns an object which should be used to monitor the operation state.
func (c proxyClient) Delete(ctx context.Context, in *mdbproxy.DeleteProxyRequest, opts ...grpc.CallOption) (*ProxyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mdbproxy.NewProxyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*mdbproxy.DeleteProxyMetadata).GetProxyId()
		},
		MetadataType: (*mdbproxy.DeleteProxyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProxyDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Mdbproxy Proxy service.
func (c proxyClient) ListOperations(ctx context.Context, in *mdbproxy.ListProxyOperationsRequest, opts ...grpc.CallOption) (*mdbproxy.ListProxyOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return mdbproxy.NewProxyServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Mdbproxy Proxy service.
func (c proxyClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return mdbproxy.NewProxyServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ProxySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ProxySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ProxySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProxySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProxySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Mdbproxy Proxy service.
// It returns an object which should be used to monitor the operation state.
func (c proxyClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ProxySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mdbproxy.NewProxyServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProxySetAccessBindingsOperation{*op}, nil
}

// ProxyUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ProxyUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ProxyUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProxyUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProxyUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Mdbproxy Proxy service.
// It returns an object which should be used to monitor the operation state.
func (c proxyClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ProxyUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := mdbproxy.NewProxyServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProxyUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c proxyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProxyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ProxyGet                  = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.Get")
	ProxyList                 = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.List")
	ProxyCreate               = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.Create")
	ProxyUpdate               = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.Update")
	ProxyDelete               = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.Delete")
	ProxyListOperations       = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.ListOperations")
	ProxyListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.ListAccessBindings")
	ProxySetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.SetAccessBindings")
	ProxyUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.mdbproxy.v1.ProxyService.UpdateAccessBindings")
	ProxyOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
