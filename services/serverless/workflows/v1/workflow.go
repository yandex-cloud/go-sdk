// Code generated by sdkgen-v2. DO NOT EDIT.
package workflowssdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	workflows "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/workflows/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// WorkflowClient provides methods for managing Workflow resources of Yandex.Cloud Workflows.
type WorkflowClient interface {
	Create(context.Context, *workflows.CreateWorkflowRequest, ...grpc.CallOption) (*WorkflowCreateOperation, error)
	Update(context.Context, *workflows.UpdateWorkflowRequest, ...grpc.CallOption) (*WorkflowUpdateOperation, error)
	Get(context.Context, *workflows.GetWorkflowRequest, ...grpc.CallOption) (*workflows.GetWorkflowResponse, error)
	Delete(context.Context, *workflows.DeleteWorkflowRequest, ...grpc.CallOption) (*WorkflowDeleteOperation, error)
	List(context.Context, *workflows.ListWorkflowsRequest, ...grpc.CallOption) (*workflows.ListWorkflowsResponse, error)
	ListOperations(context.Context, *workflows.ListOperationsRequest, ...grpc.CallOption) (*workflows.ListOperationsResponse, error)
}

var _ WorkflowClient = workflowClient{}

type workflowClient struct {
	connector transport.Connector
}

// NewWorkflowClient returns WorkflowClient implementation.
func NewWorkflowClient(connector transport.Connector) WorkflowClient {
	return workflowClient{connector}
}

// WorkflowCreateOperation is used to monitor the state of Create operations.
type WorkflowCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WorkflowCreateOperation) Metadata() *workflows.CreateWorkflowMetadata {
	return o.Operation.Metadata().(*workflows.CreateWorkflowMetadata)
}

// Response retrieves the operation response.
func (o *WorkflowCreateOperation) Response() *workflows.Workflow {
	return o.Operation.Response().(*workflows.Workflow)
}

// Wait polls the operation until it's done.
func (o *WorkflowCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*workflows.Workflow, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*workflows.Workflow)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WorkflowCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*workflows.Workflow, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*workflows.Workflow)
	return response, err
}

// Create is an operation of Yandex.Cloud Workflows Workflow service.
// It returns an object which should be used to monitor the operation state.
func (c workflowClient) Create(ctx context.Context, in *workflows.CreateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := workflows.NewWorkflowServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*workflows.CreateWorkflowMetadata).GetWorkflowId()
		},
		MetadataType: (*workflows.CreateWorkflowMetadata)(nil),
		ResponseType: (*workflows.Workflow)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WorkflowCreateOperation{*op}, nil
}

// WorkflowUpdateOperation is used to monitor the state of Update operations.
type WorkflowUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WorkflowUpdateOperation) Metadata() *workflows.UpdateWorkflowMetadata {
	return o.Operation.Metadata().(*workflows.UpdateWorkflowMetadata)
}

// Response retrieves the operation response.
func (o *WorkflowUpdateOperation) Response() *workflows.Workflow {
	return o.Operation.Response().(*workflows.Workflow)
}

// Wait polls the operation until it's done.
func (o *WorkflowUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*workflows.Workflow, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*workflows.Workflow)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WorkflowUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*workflows.Workflow, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*workflows.Workflow)
	return response, err
}

// Update is an operation of Yandex.Cloud Workflows Workflow service.
// It returns an object which should be used to monitor the operation state.
func (c workflowClient) Update(ctx context.Context, in *workflows.UpdateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := workflows.NewWorkflowServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*workflows.UpdateWorkflowMetadata).GetWorkflowId()
		},
		MetadataType: (*workflows.UpdateWorkflowMetadata)(nil),
		ResponseType: (*workflows.Workflow)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WorkflowUpdateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Workflows Workflow service.
func (c workflowClient) Get(ctx context.Context, in *workflows.GetWorkflowRequest, opts ...grpc.CallOption) (*workflows.GetWorkflowResponse, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowGet, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewWorkflowServiceClient(connection).Get(ctx, in, opts...)
}

// WorkflowDeleteOperation is used to monitor the state of Delete operations.
type WorkflowDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *WorkflowDeleteOperation) Metadata() *workflows.DeleteWorkflowMetadata {
	return o.Operation.Metadata().(*workflows.DeleteWorkflowMetadata)
}

// Response retrieves the operation response.
func (o *WorkflowDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *WorkflowDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *WorkflowDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Workflows Workflow service.
// It returns an object which should be used to monitor the operation state.
func (c workflowClient) Delete(ctx context.Context, in *workflows.DeleteWorkflowRequest, opts ...grpc.CallOption) (*WorkflowDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := workflows.NewWorkflowServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*workflows.DeleteWorkflowMetadata).GetWorkflowId()
		},
		MetadataType: (*workflows.DeleteWorkflowMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &WorkflowDeleteOperation{*op}, nil
}

// List is an operation of Yandex.Cloud Workflows Workflow service.
func (c workflowClient) List(ctx context.Context, in *workflows.ListWorkflowsRequest, opts ...grpc.CallOption) (*workflows.ListWorkflowsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowList, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewWorkflowServiceClient(connection).List(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Workflows Workflow service.
func (c workflowClient) ListOperations(ctx context.Context, in *workflows.ListOperationsRequest, opts ...grpc.CallOption) (*workflows.ListOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewWorkflowServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c workflowClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, WorkflowOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	WorkflowCreate          = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.Create")
	WorkflowUpdate          = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.Update")
	WorkflowGet             = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.Get")
	WorkflowDelete          = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.Delete")
	WorkflowList            = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.List")
	WorkflowListOperations  = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.WorkflowService.ListOperations")
	WorkflowOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
