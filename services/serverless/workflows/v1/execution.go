// Code generated by sdkgen-v2. DO NOT EDIT.
package workflowssdk

import (
	"context"

	workflows "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/workflows/v1"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// ExecutionClient provides methods for managing Execution resources of Yandex.Cloud Workflows.
type ExecutionClient interface {
	Start(context.Context, *workflows.StartExecutionRequest, ...grpc.CallOption) (*workflows.StartExecutionResponse, error)
	Stop(context.Context, *workflows.StopExecutionRequest, ...grpc.CallOption) (*workflows.StopExecutionResponse, error)
	Terminate(context.Context, *workflows.TerminateExecutionRequest, ...grpc.CallOption) (*workflows.TerminateExecutionResponse, error)
	Get(context.Context, *workflows.GetExecutionRequest, ...grpc.CallOption) (*workflows.GetExecutionResponse, error)
	GetHistory(context.Context, *workflows.GetExecutionHistoryRequest, ...grpc.CallOption) (*workflows.GetExecutionHistoryResponse, error)
	List(context.Context, *workflows.ListExecutionsRequest, ...grpc.CallOption) (*workflows.ListExecutionsResponse, error)
}

var _ ExecutionClient = executionClient{}

type executionClient struct {
	connector transport.Connector
}

// NewExecutionClient returns ExecutionClient implementation.
func NewExecutionClient(connector transport.Connector) ExecutionClient {
	return executionClient{connector}
}

// Start is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) Start(ctx context.Context, in *workflows.StartExecutionRequest, opts ...grpc.CallOption) (*workflows.StartExecutionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionStart, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).Start(ctx, in, opts...)
}

// Stop is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) Stop(ctx context.Context, in *workflows.StopExecutionRequest, opts ...grpc.CallOption) (*workflows.StopExecutionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionStop, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).Stop(ctx, in, opts...)
}

// Terminate is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) Terminate(ctx context.Context, in *workflows.TerminateExecutionRequest, opts ...grpc.CallOption) (*workflows.TerminateExecutionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionTerminate, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).Terminate(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) Get(ctx context.Context, in *workflows.GetExecutionRequest, opts ...grpc.CallOption) (*workflows.GetExecutionResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionGet, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).Get(ctx, in, opts...)
}

// GetHistory is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) GetHistory(ctx context.Context, in *workflows.GetExecutionHistoryRequest, opts ...grpc.CallOption) (*workflows.GetExecutionHistoryResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionGetHistory, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).GetHistory(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Workflows Execution service.
func (c executionClient) List(ctx context.Context, in *workflows.ListExecutionsRequest, opts ...grpc.CallOption) (*workflows.ListExecutionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ExecutionList, opts...)
	if err != nil {
		return nil, err
	}
	return workflows.NewExecutionServiceClient(connection).List(ctx, in, opts...)
}

var (
	ExecutionStart      = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.Start")
	ExecutionStop       = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.Stop")
	ExecutionTerminate  = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.Terminate")
	ExecutionGet        = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.Get")
	ExecutionGetHistory = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.GetHistory")
	ExecutionList       = protoreflect.FullName("yandex.cloud.serverless.workflows.v1.ExecutionService.List")
)
