// Code generated by sdkgen-v2. DO NOT EDIT.
package functionssdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	functions "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/functions/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// FunctionClient provides methods for managing Function resources of Yandex.Cloud Functions.
type FunctionClient interface {
	Get(context.Context, *functions.GetFunctionRequest, ...grpc.CallOption) (*functions.Function, error)
	List(context.Context, *functions.ListFunctionsRequest, ...grpc.CallOption) (*functions.ListFunctionsResponse, error)
	Create(context.Context, *functions.CreateFunctionRequest, ...grpc.CallOption) (*FunctionCreateOperation, error)
	Update(context.Context, *functions.UpdateFunctionRequest, ...grpc.CallOption) (*FunctionUpdateOperation, error)
	Delete(context.Context, *functions.DeleteFunctionRequest, ...grpc.CallOption) (*FunctionDeleteOperation, error)
	GetVersion(context.Context, *functions.GetFunctionVersionRequest, ...grpc.CallOption) (*functions.Version, error)
	GetVersionByTag(context.Context, *functions.GetFunctionVersionByTagRequest, ...grpc.CallOption) (*functions.Version, error)
	ListVersions(context.Context, *functions.ListFunctionsVersionsRequest, ...grpc.CallOption) (*functions.ListFunctionsVersionsResponse, error)
	DeleteVersion(context.Context, *functions.DeleteFunctionVersionRequest, ...grpc.CallOption) (*FunctionDeleteVersionOperation, error)
	SetTag(context.Context, *functions.SetFunctionTagRequest, ...grpc.CallOption) (*FunctionSetTagOperation, error)
	RemoveTag(context.Context, *functions.RemoveFunctionTagRequest, ...grpc.CallOption) (*FunctionRemoveTagOperation, error)
	ListTagHistory(context.Context, *functions.ListFunctionTagHistoryRequest, ...grpc.CallOption) (*functions.ListFunctionTagHistoryResponse, error)
	CreateVersion(context.Context, *functions.CreateFunctionVersionRequest, ...grpc.CallOption) (*FunctionCreateVersionOperation, error)
	ListRuntimes(context.Context, *functions.ListRuntimesRequest, ...grpc.CallOption) (*functions.ListRuntimesResponse, error)
	ListOperations(context.Context, *functions.ListFunctionOperationsRequest, ...grpc.CallOption) (*functions.ListFunctionOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*FunctionSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*FunctionUpdateAccessBindingsOperation, error)
	ListScalingPolicies(context.Context, *functions.ListScalingPoliciesRequest, ...grpc.CallOption) (*functions.ListScalingPoliciesResponse, error)
	SetScalingPolicy(context.Context, *functions.SetScalingPolicyRequest, ...grpc.CallOption) (*FunctionSetScalingPolicyOperation, error)
	RemoveScalingPolicy(context.Context, *functions.RemoveScalingPolicyRequest, ...grpc.CallOption) (*FunctionRemoveScalingPolicyOperation, error)
}

var _ FunctionClient = functionClient{}

type functionClient struct {
	connector transport.Connector
}

// NewFunctionClient returns FunctionClient implementation.
func NewFunctionClient(connector transport.Connector) FunctionClient {
	return functionClient{connector}
}

// Get is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) Get(ctx context.Context, in *functions.GetFunctionRequest, opts ...grpc.CallOption) (*functions.Function, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionGet, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) List(ctx context.Context, in *functions.ListFunctionsRequest, opts ...grpc.CallOption) (*functions.ListFunctionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionList, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).List(ctx, in, opts...)
}

// FunctionCreateOperation is used to monitor the state of Create operations.
type FunctionCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionCreateOperation) Metadata() *functions.CreateFunctionMetadata {
	return o.Operation.Metadata().(*functions.CreateFunctionMetadata)
}

// Response retrieves the operation response.
func (o *FunctionCreateOperation) Response() *functions.Function {
	return o.Operation.Response().(*functions.Function)
}

// Wait polls the operation until it's done.
func (o *FunctionCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.Function, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.Function)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.Function, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.Function)
	return response, err
}

// Create is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) Create(ctx context.Context, in *functions.CreateFunctionRequest, opts ...grpc.CallOption) (*FunctionCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*functions.CreateFunctionMetadata).GetFunctionId()
		},
		MetadataType: (*functions.CreateFunctionMetadata)(nil),
		ResponseType: (*functions.Function)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionCreateOperation{*op}, nil
}

// FunctionUpdateOperation is used to monitor the state of Update operations.
type FunctionUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionUpdateOperation) Metadata() *functions.UpdateFunctionMetadata {
	return o.Operation.Metadata().(*functions.UpdateFunctionMetadata)
}

// Response retrieves the operation response.
func (o *FunctionUpdateOperation) Response() *functions.Function {
	return o.Operation.Response().(*functions.Function)
}

// Wait polls the operation until it's done.
func (o *FunctionUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.Function, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.Function)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.Function, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.Function)
	return response, err
}

// Update is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) Update(ctx context.Context, in *functions.UpdateFunctionRequest, opts ...grpc.CallOption) (*FunctionUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*functions.UpdateFunctionMetadata).GetFunctionId()
		},
		MetadataType: (*functions.UpdateFunctionMetadata)(nil),
		ResponseType: (*functions.Function)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionUpdateOperation{*op}, nil
}

// FunctionDeleteOperation is used to monitor the state of Delete operations.
type FunctionDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionDeleteOperation) Metadata() *functions.DeleteFunctionMetadata {
	return o.Operation.Metadata().(*functions.DeleteFunctionMetadata)
}

// Response retrieves the operation response.
func (o *FunctionDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FunctionDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) Delete(ctx context.Context, in *functions.DeleteFunctionRequest, opts ...grpc.CallOption) (*FunctionDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*functions.DeleteFunctionMetadata).GetFunctionId()
		},
		MetadataType: (*functions.DeleteFunctionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionDeleteOperation{*op}, nil
}

// GetVersion is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) GetVersion(ctx context.Context, in *functions.GetFunctionVersionRequest, opts ...grpc.CallOption) (*functions.Version, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionGetVersion, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).GetVersion(ctx, in, opts...)
}

// GetVersionByTag is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) GetVersionByTag(ctx context.Context, in *functions.GetFunctionVersionByTagRequest, opts ...grpc.CallOption) (*functions.Version, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionGetVersionByTag, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).GetVersionByTag(ctx, in, opts...)
}

// ListVersions is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListVersions(ctx context.Context, in *functions.ListFunctionsVersionsRequest, opts ...grpc.CallOption) (*functions.ListFunctionsVersionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListVersions, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListVersions(ctx, in, opts...)
}

// FunctionDeleteVersionOperation is used to monitor the state of DeleteVersion operations.
type FunctionDeleteVersionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionDeleteVersionOperation) Metadata() *functions.DeleteFunctionVersionMetadata {
	return o.Operation.Metadata().(*functions.DeleteFunctionVersionMetadata)
}

// Response retrieves the operation response.
func (o *FunctionDeleteVersionOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FunctionDeleteVersionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionDeleteVersionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// DeleteVersion is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) DeleteVersion(ctx context.Context, in *functions.DeleteFunctionVersionRequest, opts ...grpc.CallOption) (*FunctionDeleteVersionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionDeleteVersion, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).DeleteVersion(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*functions.DeleteFunctionVersionMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionDeleteVersionOperation{*op}, nil
}

// FunctionSetTagOperation is used to monitor the state of SetTag operations.
type FunctionSetTagOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionSetTagOperation) Metadata() *functions.SetFunctionTagMetadata {
	return o.Operation.Metadata().(*functions.SetFunctionTagMetadata)
}

// Response retrieves the operation response.
func (o *FunctionSetTagOperation) Response() *functions.Version {
	return o.Operation.Response().(*functions.Version)
}

// Wait polls the operation until it's done.
func (o *FunctionSetTagOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionSetTagOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// SetTag is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) SetTag(ctx context.Context, in *functions.SetFunctionTagRequest, opts ...grpc.CallOption) (*FunctionSetTagOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionSetTag, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).SetTag(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*functions.SetFunctionTagMetadata)(nil),
		ResponseType: (*functions.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionSetTagOperation{*op}, nil
}

// FunctionRemoveTagOperation is used to monitor the state of RemoveTag operations.
type FunctionRemoveTagOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionRemoveTagOperation) Metadata() *functions.RemoveFunctionTagMetadata {
	return o.Operation.Metadata().(*functions.RemoveFunctionTagMetadata)
}

// Response retrieves the operation response.
func (o *FunctionRemoveTagOperation) Response() *functions.Version {
	return o.Operation.Response().(*functions.Version)
}

// Wait polls the operation until it's done.
func (o *FunctionRemoveTagOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionRemoveTagOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// RemoveTag is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) RemoveTag(ctx context.Context, in *functions.RemoveFunctionTagRequest, opts ...grpc.CallOption) (*FunctionRemoveTagOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionRemoveTag, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).RemoveTag(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*functions.RemoveFunctionTagMetadata)(nil),
		ResponseType: (*functions.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionRemoveTagOperation{*op}, nil
}

// ListTagHistory is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListTagHistory(ctx context.Context, in *functions.ListFunctionTagHistoryRequest, opts ...grpc.CallOption) (*functions.ListFunctionTagHistoryResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListTagHistory, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListTagHistory(ctx, in, opts...)
}

// FunctionCreateVersionOperation is used to monitor the state of CreateVersion operations.
type FunctionCreateVersionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionCreateVersionOperation) Metadata() *functions.CreateFunctionVersionMetadata {
	return o.Operation.Metadata().(*functions.CreateFunctionVersionMetadata)
}

// Response retrieves the operation response.
func (o *FunctionCreateVersionOperation) Response() *functions.Version {
	return o.Operation.Response().(*functions.Version)
}

// Wait polls the operation until it's done.
func (o *FunctionCreateVersionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionCreateVersionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.Version)
	return response, err
}

// CreateVersion is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) CreateVersion(ctx context.Context, in *functions.CreateFunctionVersionRequest, opts ...grpc.CallOption) (*FunctionCreateVersionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionCreateVersion, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).CreateVersion(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*functions.CreateFunctionVersionMetadata)(nil),
		ResponseType: (*functions.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionCreateVersionOperation{*op}, nil
}

// ListRuntimes is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListRuntimes(ctx context.Context, in *functions.ListRuntimesRequest, opts ...grpc.CallOption) (*functions.ListRuntimesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListRuntimes, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListRuntimes(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListOperations(ctx context.Context, in *functions.ListFunctionOperationsRequest, opts ...grpc.CallOption) (*functions.ListFunctionOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// FunctionSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type FunctionSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *FunctionSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FunctionSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*FunctionSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionSetAccessBindingsOperation{*op}, nil
}

// FunctionUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type FunctionUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *FunctionUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FunctionUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*FunctionUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionUpdateAccessBindingsOperation{*op}, nil
}

// ListScalingPolicies is an operation of Yandex.Cloud Functions Function service.
func (c functionClient) ListScalingPolicies(ctx context.Context, in *functions.ListScalingPoliciesRequest, opts ...grpc.CallOption) (*functions.ListScalingPoliciesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionListScalingPolicies, opts...)
	if err != nil {
		return nil, err
	}
	return functions.NewFunctionServiceClient(connection).ListScalingPolicies(ctx, in, opts...)
}

// FunctionSetScalingPolicyOperation is used to monitor the state of SetScalingPolicy operations.
type FunctionSetScalingPolicyOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionSetScalingPolicyOperation) Metadata() *functions.SetScalingPolicyMetadata {
	return o.Operation.Metadata().(*functions.SetScalingPolicyMetadata)
}

// Response retrieves the operation response.
func (o *FunctionSetScalingPolicyOperation) Response() *functions.ScalingPolicy {
	return o.Operation.Response().(*functions.ScalingPolicy)
}

// Wait polls the operation until it's done.
func (o *FunctionSetScalingPolicyOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*functions.ScalingPolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*functions.ScalingPolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionSetScalingPolicyOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*functions.ScalingPolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*functions.ScalingPolicy)
	return response, err
}

// SetScalingPolicy is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) SetScalingPolicy(ctx context.Context, in *functions.SetScalingPolicyRequest, opts ...grpc.CallOption) (*FunctionSetScalingPolicyOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionSetScalingPolicy, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).SetScalingPolicy(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*functions.SetScalingPolicyMetadata).GetFunctionId()
		},
		MetadataType: (*functions.SetScalingPolicyMetadata)(nil),
		ResponseType: (*functions.ScalingPolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionSetScalingPolicyOperation{*op}, nil
}

// FunctionRemoveScalingPolicyOperation is used to monitor the state of RemoveScalingPolicy operations.
type FunctionRemoveScalingPolicyOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *FunctionRemoveScalingPolicyOperation) Metadata() *functions.RemoveScalingPolicyMetadata {
	return o.Operation.Metadata().(*functions.RemoveScalingPolicyMetadata)
}

// Response retrieves the operation response.
func (o *FunctionRemoveScalingPolicyOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *FunctionRemoveScalingPolicyOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *FunctionRemoveScalingPolicyOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveScalingPolicy is an operation of Yandex.Cloud Functions Function service.
// It returns an object which should be used to monitor the operation state.
func (c functionClient) RemoveScalingPolicy(ctx context.Context, in *functions.RemoveScalingPolicyRequest, opts ...grpc.CallOption) (*FunctionRemoveScalingPolicyOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionRemoveScalingPolicy, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := functions.NewFunctionServiceClient(connection).RemoveScalingPolicy(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*functions.RemoveScalingPolicyMetadata).GetFunctionId()
		},
		MetadataType: (*functions.RemoveScalingPolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &FunctionRemoveScalingPolicyOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c functionClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, FunctionOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	FunctionGet                  = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.Get")
	FunctionList                 = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.List")
	FunctionCreate               = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.Create")
	FunctionUpdate               = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.Update")
	FunctionDelete               = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.Delete")
	FunctionGetVersion           = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.GetVersion")
	FunctionGetVersionByTag      = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.GetVersionByTag")
	FunctionListVersions         = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListVersions")
	FunctionDeleteVersion        = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.DeleteVersion")
	FunctionSetTag               = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.SetTag")
	FunctionRemoveTag            = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.RemoveTag")
	FunctionListTagHistory       = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListTagHistory")
	FunctionCreateVersion        = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.CreateVersion")
	FunctionListRuntimes         = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListRuntimes")
	FunctionListOperations       = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListOperations")
	FunctionListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListAccessBindings")
	FunctionSetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.SetAccessBindings")
	FunctionUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.UpdateAccessBindings")
	FunctionListScalingPolicies  = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.ListScalingPolicies")
	FunctionSetScalingPolicy     = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.SetScalingPolicy")
	FunctionRemoveScalingPolicy  = protoreflect.FullName("yandex.cloud.serverless.functions.v1.FunctionService.RemoveScalingPolicy")
	FunctionOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
