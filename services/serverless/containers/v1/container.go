// Code generated by sdkgen-v2. DO NOT EDIT.
package containerssdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	containers "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/containers/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ContainerClient provides methods for managing Container resources of Yandex.Cloud Containers.
type ContainerClient interface {
	Get(context.Context, *containers.GetContainerRequest, ...grpc.CallOption) (*containers.Container, error)
	List(context.Context, *containers.ListContainersRequest, ...grpc.CallOption) (*containers.ListContainersResponse, error)
	Create(context.Context, *containers.CreateContainerRequest, ...grpc.CallOption) (*ContainerCreateOperation, error)
	Update(context.Context, *containers.UpdateContainerRequest, ...grpc.CallOption) (*ContainerUpdateOperation, error)
	Delete(context.Context, *containers.DeleteContainerRequest, ...grpc.CallOption) (*ContainerDeleteOperation, error)
	DeployRevision(context.Context, *containers.DeployContainerRevisionRequest, ...grpc.CallOption) (*ContainerDeployRevisionOperation, error)
	Rollback(context.Context, *containers.RollbackContainerRequest, ...grpc.CallOption) (*ContainerRollbackOperation, error)
	GetRevision(context.Context, *containers.GetContainerRevisionRequest, ...grpc.CallOption) (*containers.Revision, error)
	ListRevisions(context.Context, *containers.ListContainersRevisionsRequest, ...grpc.CallOption) (*containers.ListContainersRevisionsResponse, error)
	ListOperations(context.Context, *containers.ListContainerOperationsRequest, ...grpc.CallOption) (*containers.ListContainerOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ContainerSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ContainerUpdateAccessBindingsOperation, error)
}

var _ ContainerClient = containerClient{}

type containerClient struct {
	connector transport.Connector
}

// NewContainerClient returns ContainerClient implementation.
func NewContainerClient(connector transport.Connector) ContainerClient {
	return containerClient{connector}
}

// Get is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) Get(ctx context.Context, in *containers.GetContainerRequest, opts ...grpc.CallOption) (*containers.Container, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerGet, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) List(ctx context.Context, in *containers.ListContainersRequest, opts ...grpc.CallOption) (*containers.ListContainersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerList, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).List(ctx, in, opts...)
}

// ContainerCreateOperation is used to monitor the state of Create operations.
type ContainerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerCreateOperation) Metadata() *containers.CreateContainerMetadata {
	return o.Operation.Metadata().(*containers.CreateContainerMetadata)
}

// Response retrieves the operation response.
func (o *ContainerCreateOperation) Response() *containers.Container {
	return o.Operation.Response().(*containers.Container)
}

// Wait polls the operation until it's done.
func (o *ContainerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// Create is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) Create(ctx context.Context, in *containers.CreateContainerRequest, opts ...grpc.CallOption) (*ContainerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containers.CreateContainerMetadata).GetContainerId()
		},
		MetadataType: (*containers.CreateContainerMetadata)(nil),
		ResponseType: (*containers.Container)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerCreateOperation{*op}, nil
}

// ContainerUpdateOperation is used to monitor the state of Update operations.
type ContainerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerUpdateOperation) Metadata() *containers.UpdateContainerMetadata {
	return o.Operation.Metadata().(*containers.UpdateContainerMetadata)
}

// Response retrieves the operation response.
func (o *ContainerUpdateOperation) Response() *containers.Container {
	return o.Operation.Response().(*containers.Container)
}

// Wait polls the operation until it's done.
func (o *ContainerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// Update is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) Update(ctx context.Context, in *containers.UpdateContainerRequest, opts ...grpc.CallOption) (*ContainerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containers.UpdateContainerMetadata).GetContainerId()
		},
		MetadataType: (*containers.UpdateContainerMetadata)(nil),
		ResponseType: (*containers.Container)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateOperation{*op}, nil
}

// ContainerDeleteOperation is used to monitor the state of Delete operations.
type ContainerDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerDeleteOperation) Metadata() *containers.DeleteContainerMetadata {
	return o.Operation.Metadata().(*containers.DeleteContainerMetadata)
}

// Response retrieves the operation response.
func (o *ContainerDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ContainerDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) Delete(ctx context.Context, in *containers.DeleteContainerRequest, opts ...grpc.CallOption) (*ContainerDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containers.DeleteContainerMetadata).GetContainerId()
		},
		MetadataType: (*containers.DeleteContainerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerDeleteOperation{*op}, nil
}

// ContainerDeployRevisionOperation is used to monitor the state of DeployRevision operations.
type ContainerDeployRevisionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerDeployRevisionOperation) Metadata() *containers.DeployContainerRevisionMetadata {
	return o.Operation.Metadata().(*containers.DeployContainerRevisionMetadata)
}

// Response retrieves the operation response.
func (o *ContainerDeployRevisionOperation) Response() *containers.Revision {
	return o.Operation.Response().(*containers.Revision)
}

// Wait polls the operation until it's done.
func (o *ContainerDeployRevisionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containers.Revision, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containers.Revision)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerDeployRevisionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containers.Revision, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containers.Revision)
	return response, err
}

// DeployRevision is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) DeployRevision(ctx context.Context, in *containers.DeployContainerRevisionRequest, opts ...grpc.CallOption) (*ContainerDeployRevisionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerDeployRevision, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).DeployRevision(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*containers.DeployContainerRevisionMetadata)(nil),
		ResponseType: (*containers.Revision)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerDeployRevisionOperation{*op}, nil
}

// ContainerRollbackOperation is used to monitor the state of Rollback operations.
type ContainerRollbackOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerRollbackOperation) Metadata() *containers.RollbackContainerMetadata {
	return o.Operation.Metadata().(*containers.RollbackContainerMetadata)
}

// Response retrieves the operation response.
func (o *ContainerRollbackOperation) Response() *containers.Container {
	return o.Operation.Response().(*containers.Container)
}

// Wait polls the operation until it's done.
func (o *ContainerRollbackOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerRollbackOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containers.Container, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containers.Container)
	return response, err
}

// Rollback is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) Rollback(ctx context.Context, in *containers.RollbackContainerRequest, opts ...grpc.CallOption) (*ContainerRollbackOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerRollback, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).Rollback(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containers.RollbackContainerMetadata).GetContainerId()
		},
		MetadataType: (*containers.RollbackContainerMetadata)(nil),
		ResponseType: (*containers.Container)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerRollbackOperation{*op}, nil
}

// GetRevision is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) GetRevision(ctx context.Context, in *containers.GetContainerRevisionRequest, opts ...grpc.CallOption) (*containers.Revision, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerGetRevision, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).GetRevision(ctx, in, opts...)
}

// ListRevisions is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) ListRevisions(ctx context.Context, in *containers.ListContainersRevisionsRequest, opts ...grpc.CallOption) (*containers.ListContainersRevisionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerListRevisions, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).ListRevisions(ctx, in, opts...)
}

// ListOperations is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) ListOperations(ctx context.Context, in *containers.ListContainerOperationsRequest, opts ...grpc.CallOption) (*containers.ListContainerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Containers Container service.
func (c containerClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return containers.NewContainerServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ContainerSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ContainerSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ContainerSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ContainerSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ContainerSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerSetAccessBindingsOperation{*op}, nil
}

// ContainerUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ContainerUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ContainerUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ContainerUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ContainerUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ContainerUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Containers Container service.
// It returns an object which should be used to monitor the operation state.
func (c containerClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ContainerUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containers.NewContainerServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c containerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ContainerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ContainerGet                  = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.Get")
	ContainerList                 = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.List")
	ContainerCreate               = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.Create")
	ContainerUpdate               = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.Update")
	ContainerDelete               = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.Delete")
	ContainerDeployRevision       = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.DeployRevision")
	ContainerRollback             = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.Rollback")
	ContainerGetRevision          = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.GetRevision")
	ContainerListRevisions        = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.ListRevisions")
	ContainerListOperations       = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.ListOperations")
	ContainerListAccessBindings   = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.ListAccessBindings")
	ContainerSetAccessBindings    = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.SetAccessBindings")
	ContainerUpdateAccessBindings = protoreflect.FullName("yandex.cloud.serverless.containers.v1.ContainerService.UpdateAccessBindings")
	ContainerOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
