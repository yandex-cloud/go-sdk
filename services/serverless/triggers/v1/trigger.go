// Code generated by sdkgen-v2. DO NOT EDIT.
package triggerssdk

import (
	"context"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	triggers "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/triggers/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TriggerClient provides methods for managing Trigger resources of Yandex.Cloud Triggers.
type TriggerClient interface {
	Get(context.Context, *triggers.GetTriggerRequest, ...grpc.CallOption) (*triggers.Trigger, error)
	List(context.Context, *triggers.ListTriggersRequest, ...grpc.CallOption) (*triggers.ListTriggersResponse, error)
	Create(context.Context, *triggers.CreateTriggerRequest, ...grpc.CallOption) (*TriggerCreateOperation, error)
	Update(context.Context, *triggers.UpdateTriggerRequest, ...grpc.CallOption) (*TriggerUpdateOperation, error)
	Delete(context.Context, *triggers.DeleteTriggerRequest, ...grpc.CallOption) (*TriggerDeleteOperation, error)
	Pause(context.Context, *triggers.PauseTriggerRequest, ...grpc.CallOption) (*TriggerPauseOperation, error)
	Resume(context.Context, *triggers.ResumeTriggerRequest, ...grpc.CallOption) (*TriggerResumeOperation, error)
	ListOperations(context.Context, *triggers.ListTriggerOperationsRequest, ...grpc.CallOption) (*triggers.ListTriggerOperationsResponse, error)
}

var _ TriggerClient = triggerClient{}

type triggerClient struct {
	connector transport.Connector
}

// NewTriggerClient returns TriggerClient implementation.
func NewTriggerClient(connector transport.Connector) TriggerClient {
	return triggerClient{connector}
}

// Get is an operation of Yandex.Cloud Triggers Trigger service.
func (c triggerClient) Get(ctx context.Context, in *triggers.GetTriggerRequest, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerGet, opts...)
	if err != nil {
		return nil, err
	}
	return triggers.NewTriggerServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Triggers Trigger service.
func (c triggerClient) List(ctx context.Context, in *triggers.ListTriggersRequest, opts ...grpc.CallOption) (*triggers.ListTriggersResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerList, opts...)
	if err != nil {
		return nil, err
	}
	return triggers.NewTriggerServiceClient(connection).List(ctx, in, opts...)
}

// TriggerCreateOperation is used to monitor the state of Create operations.
type TriggerCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TriggerCreateOperation) Metadata() *triggers.CreateTriggerMetadata {
	return o.Operation.Metadata().(*triggers.CreateTriggerMetadata)
}

// Response retrieves the operation response.
func (o *TriggerCreateOperation) Response() *triggers.Trigger {
	return o.Operation.Response().(*triggers.Trigger)
}

// Wait polls the operation until it's done.
func (o *TriggerCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TriggerCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// Create is an operation of Yandex.Cloud Triggers Trigger service.
// It returns an object which should be used to monitor the operation state.
func (c triggerClient) Create(ctx context.Context, in *triggers.CreateTriggerRequest, opts ...grpc.CallOption) (*TriggerCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := triggers.NewTriggerServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*triggers.CreateTriggerMetadata).GetTriggerId()
		},
		MetadataType: (*triggers.CreateTriggerMetadata)(nil),
		ResponseType: (*triggers.Trigger)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TriggerCreateOperation{*op}, nil
}

// TriggerUpdateOperation is used to monitor the state of Update operations.
type TriggerUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TriggerUpdateOperation) Metadata() *triggers.UpdateTriggerMetadata {
	return o.Operation.Metadata().(*triggers.UpdateTriggerMetadata)
}

// Response retrieves the operation response.
func (o *TriggerUpdateOperation) Response() *triggers.Trigger {
	return o.Operation.Response().(*triggers.Trigger)
}

// Wait polls the operation until it's done.
func (o *TriggerUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TriggerUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// Update is an operation of Yandex.Cloud Triggers Trigger service.
// It returns an object which should be used to monitor the operation state.
func (c triggerClient) Update(ctx context.Context, in *triggers.UpdateTriggerRequest, opts ...grpc.CallOption) (*TriggerUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := triggers.NewTriggerServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*triggers.UpdateTriggerMetadata).GetTriggerId()
		},
		MetadataType: (*triggers.UpdateTriggerMetadata)(nil),
		ResponseType: (*triggers.Trigger)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TriggerUpdateOperation{*op}, nil
}

// TriggerDeleteOperation is used to monitor the state of Delete operations.
type TriggerDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TriggerDeleteOperation) Metadata() *triggers.DeleteTriggerMetadata {
	return o.Operation.Metadata().(*triggers.DeleteTriggerMetadata)
}

// Response retrieves the operation response.
func (o *TriggerDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TriggerDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TriggerDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Triggers Trigger service.
// It returns an object which should be used to monitor the operation state.
func (c triggerClient) Delete(ctx context.Context, in *triggers.DeleteTriggerRequest, opts ...grpc.CallOption) (*TriggerDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := triggers.NewTriggerServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*triggers.DeleteTriggerMetadata).GetTriggerId()
		},
		MetadataType: (*triggers.DeleteTriggerMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TriggerDeleteOperation{*op}, nil
}

// TriggerPauseOperation is used to monitor the state of Pause operations.
type TriggerPauseOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TriggerPauseOperation) Metadata() *triggers.PauseTriggerMetadata {
	return o.Operation.Metadata().(*triggers.PauseTriggerMetadata)
}

// Response retrieves the operation response.
func (o *TriggerPauseOperation) Response() *triggers.Trigger {
	return o.Operation.Response().(*triggers.Trigger)
}

// Wait polls the operation until it's done.
func (o *TriggerPauseOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TriggerPauseOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// Pause is an operation of Yandex.Cloud Triggers Trigger service.
// It returns an object which should be used to monitor the operation state.
func (c triggerClient) Pause(ctx context.Context, in *triggers.PauseTriggerRequest, opts ...grpc.CallOption) (*TriggerPauseOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerPause, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := triggers.NewTriggerServiceClient(connection).Pause(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*triggers.PauseTriggerMetadata).GetTriggerId()
		},
		MetadataType: (*triggers.PauseTriggerMetadata)(nil),
		ResponseType: (*triggers.Trigger)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TriggerPauseOperation{*op}, nil
}

// TriggerResumeOperation is used to monitor the state of Resume operations.
type TriggerResumeOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TriggerResumeOperation) Metadata() *triggers.ResumeTriggerMetadata {
	return o.Operation.Metadata().(*triggers.ResumeTriggerMetadata)
}

// Response retrieves the operation response.
func (o *TriggerResumeOperation) Response() *triggers.Trigger {
	return o.Operation.Response().(*triggers.Trigger)
}

// Wait polls the operation until it's done.
func (o *TriggerResumeOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TriggerResumeOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*triggers.Trigger, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*triggers.Trigger)
	return response, err
}

// Resume is an operation of Yandex.Cloud Triggers Trigger service.
// It returns an object which should be used to monitor the operation state.
func (c triggerClient) Resume(ctx context.Context, in *triggers.ResumeTriggerRequest, opts ...grpc.CallOption) (*TriggerResumeOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerResume, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := triggers.NewTriggerServiceClient(connection).Resume(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*triggers.ResumeTriggerMetadata).GetTriggerId()
		},
		MetadataType: (*triggers.ResumeTriggerMetadata)(nil),
		ResponseType: (*triggers.Trigger)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TriggerResumeOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Triggers Trigger service.
func (c triggerClient) ListOperations(ctx context.Context, in *triggers.ListTriggerOperationsRequest, opts ...grpc.CallOption) (*triggers.ListTriggerOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return triggers.NewTriggerServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c triggerClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TriggerOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TriggerGet             = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Get")
	TriggerList            = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.List")
	TriggerCreate          = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Create")
	TriggerUpdate          = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Update")
	TriggerDelete          = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Delete")
	TriggerPause           = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Pause")
	TriggerResume          = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.Resume")
	TriggerListOperations  = protoreflect.FullName("yandex.cloud.serverless.triggers.v1.TriggerService.ListOperations")
	TriggerOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
