// Code generated by sdkgen-v2. DO NOT EDIT.
package containerregistrysdk

import (
	"context"

	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ImageClient provides methods for managing Image resources of Yandex.Cloud ContainerRegistry.
type ImageClient interface {
	List(context.Context, *containerregistry.ListImagesRequest, ...grpc.CallOption) (*containerregistry.ListImagesResponse, error)
	Get(context.Context, *containerregistry.GetImageRequest, ...grpc.CallOption) (*containerregistry.Image, error)
	Delete(context.Context, *containerregistry.DeleteImageRequest, ...grpc.CallOption) (*ImageDeleteOperation, error)
}

var _ ImageClient = imageClient{}

type imageClient struct {
	connector transport.Connector
}

// NewImageClient returns ImageClient implementation.
func NewImageClient(connector transport.Connector) ImageClient {
	return imageClient{connector}
}

// List is an operation of Yandex.Cloud ContainerRegistry Image service.
func (c imageClient) List(ctx context.Context, in *containerregistry.ListImagesRequest, opts ...grpc.CallOption) (*containerregistry.ListImagesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ImageList, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewImageServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud ContainerRegistry Image service.
func (c imageClient) Get(ctx context.Context, in *containerregistry.GetImageRequest, opts ...grpc.CallOption) (*containerregistry.Image, error) {
	connection, err := c.connector.GetConnection(ctx, ImageGet, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewImageServiceClient(connection).Get(ctx, in, opts...)
}

// ImageDeleteOperation is used to monitor the state of Delete operations.
type ImageDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ImageDeleteOperation) Metadata() *containerregistry.DeleteImageMetadata {
	return o.Operation.Metadata().(*containerregistry.DeleteImageMetadata)
}

// Response retrieves the operation response.
func (o *ImageDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ImageDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ImageDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ContainerRegistry Image service.
// It returns an object which should be used to monitor the operation state.
func (c imageClient) Delete(ctx context.Context, in *containerregistry.DeleteImageRequest, opts ...grpc.CallOption) (*ImageDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewImageServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.DeleteImageMetadata).GetImageId()
		},
		MetadataType: (*containerregistry.DeleteImageMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ImageDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c imageClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ImageOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ImageList            = protoreflect.FullName("yandex.cloud.containerregistry.v1.ImageService.List")
	ImageGet             = protoreflect.FullName("yandex.cloud.containerregistry.v1.ImageService.Get")
	ImageDelete          = protoreflect.FullName("yandex.cloud.containerregistry.v1.ImageService.Delete")
	ImageOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
