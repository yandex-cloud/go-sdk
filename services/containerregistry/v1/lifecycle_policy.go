// Code generated by sdkgen-v2. DO NOT EDIT.
package containerregistrysdk

import (
	"context"

	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// LifecyclePolicyClient provides methods for managing LifecyclePolicy resources of Yandex.Cloud ContainerRegistry.
type LifecyclePolicyClient interface {
	Get(context.Context, *containerregistry.GetLifecyclePolicyRequest, ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error)
	List(context.Context, *containerregistry.ListLifecyclePoliciesRequest, ...grpc.CallOption) (*containerregistry.ListLifecyclePoliciesResponse, error)
	Create(context.Context, *containerregistry.CreateLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyCreateOperation, error)
	Update(context.Context, *containerregistry.UpdateLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyUpdateOperation, error)
	Delete(context.Context, *containerregistry.DeleteLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyDeleteOperation, error)
	DryRun(context.Context, *containerregistry.DryRunLifecyclePolicyRequest, ...grpc.CallOption) (*LifecyclePolicyDryRunOperation, error)
	GetDryRunResult(context.Context, *containerregistry.GetDryRunLifecyclePolicyResultRequest, ...grpc.CallOption) (*containerregistry.DryRunLifecyclePolicyResult, error)
	ListDryRunResults(context.Context, *containerregistry.ListDryRunLifecyclePolicyResultsRequest, ...grpc.CallOption) (*containerregistry.ListDryRunLifecyclePolicyResultsResponse, error)
	ListDryRunResultAffectedImages(context.Context, *containerregistry.ListDryRunLifecyclePolicyResultAffectedImagesRequest, ...grpc.CallOption) (*containerregistry.ListDryRunLifecyclePolicyResultAffectedImagesResponse, error)
}

var _ LifecyclePolicyClient = lifecyclePolicyClient{}

type lifecyclePolicyClient struct {
	connector transport.Connector
}

// NewLifecyclePolicyClient returns LifecyclePolicyClient implementation.
func NewLifecyclePolicyClient(connector transport.Connector) LifecyclePolicyClient {
	return lifecyclePolicyClient{connector}
}

// Get is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
func (c lifecyclePolicyClient) Get(ctx context.Context, in *containerregistry.GetLifecyclePolicyRequest, opts ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyGet, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewLifecyclePolicyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
func (c lifecyclePolicyClient) List(ctx context.Context, in *containerregistry.ListLifecyclePoliciesRequest, opts ...grpc.CallOption) (*containerregistry.ListLifecyclePoliciesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyList, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewLifecyclePolicyServiceClient(connection).List(ctx, in, opts...)
}

// LifecyclePolicyCreateOperation is used to monitor the state of Create operations.
type LifecyclePolicyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyCreateOperation) Metadata() *containerregistry.CreateLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.CreateLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyCreateOperation) Response() *containerregistry.LifecyclePolicy {
	return o.Operation.Response().(*containerregistry.LifecyclePolicy)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.LifecyclePolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.LifecyclePolicy)
	return response, err
}

// Create is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Create(ctx context.Context, in *containerregistry.CreateLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewLifecyclePolicyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.CreateLifecyclePolicyMetadata).GetLifecyclePolicyId()
		},
		MetadataType: (*containerregistry.CreateLifecyclePolicyMetadata)(nil),
		ResponseType: (*containerregistry.LifecyclePolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyCreateOperation{*op}, nil
}

// LifecyclePolicyUpdateOperation is used to monitor the state of Update operations.
type LifecyclePolicyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyUpdateOperation) Metadata() *containerregistry.UpdateLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.UpdateLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyUpdateOperation) Response() *containerregistry.LifecyclePolicy {
	return o.Operation.Response().(*containerregistry.LifecyclePolicy)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.LifecyclePolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.LifecyclePolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.LifecyclePolicy)
	return response, err
}

// Update is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Update(ctx context.Context, in *containerregistry.UpdateLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewLifecyclePolicyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.UpdateLifecyclePolicyMetadata).GetLifecyclePolicyId()
		},
		MetadataType: (*containerregistry.UpdateLifecyclePolicyMetadata)(nil),
		ResponseType: (*containerregistry.LifecyclePolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyUpdateOperation{*op}, nil
}

// LifecyclePolicyDeleteOperation is used to monitor the state of Delete operations.
type LifecyclePolicyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyDeleteOperation) Metadata() *containerregistry.DeleteLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.DeleteLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) Delete(ctx context.Context, in *containerregistry.DeleteLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewLifecyclePolicyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.DeleteLifecyclePolicyMetadata).GetLifecyclePolicyId()
		},
		MetadataType: (*containerregistry.DeleteLifecyclePolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyDeleteOperation{*op}, nil
}

// LifecyclePolicyDryRunOperation is used to monitor the state of DryRun operations.
type LifecyclePolicyDryRunOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *LifecyclePolicyDryRunOperation) Metadata() *containerregistry.DryRunLifecyclePolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.DryRunLifecyclePolicyMetadata)
}

// Response retrieves the operation response.
func (o *LifecyclePolicyDryRunOperation) Response() *containerregistry.DryRunLifecyclePolicyResult {
	return o.Operation.Response().(*containerregistry.DryRunLifecyclePolicyResult)
}

// Wait polls the operation until it's done.
func (o *LifecyclePolicyDryRunOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.DryRunLifecyclePolicyResult, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.DryRunLifecyclePolicyResult)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *LifecyclePolicyDryRunOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.DryRunLifecyclePolicyResult, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.DryRunLifecyclePolicyResult)
	return response, err
}

// DryRun is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
// It returns an object which should be used to monitor the operation state.
func (c lifecyclePolicyClient) DryRun(ctx context.Context, in *containerregistry.DryRunLifecyclePolicyRequest, opts ...grpc.CallOption) (*LifecyclePolicyDryRunOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyDryRun, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewLifecyclePolicyServiceClient(connection).DryRun(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.DryRunLifecyclePolicyMetadata).GetLifecyclePolicyId()
		},
		MetadataType: (*containerregistry.DryRunLifecyclePolicyMetadata)(nil),
		ResponseType: (*containerregistry.DryRunLifecyclePolicyResult)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &LifecyclePolicyDryRunOperation{*op}, nil
}

// GetDryRunResult is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
func (c lifecyclePolicyClient) GetDryRunResult(ctx context.Context, in *containerregistry.GetDryRunLifecyclePolicyResultRequest, opts ...grpc.CallOption) (*containerregistry.DryRunLifecyclePolicyResult, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyGetDryRunResult, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewLifecyclePolicyServiceClient(connection).GetDryRunResult(ctx, in, opts...)
}

// ListDryRunResults is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
func (c lifecyclePolicyClient) ListDryRunResults(ctx context.Context, in *containerregistry.ListDryRunLifecyclePolicyResultsRequest, opts ...grpc.CallOption) (*containerregistry.ListDryRunLifecyclePolicyResultsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyListDryRunResults, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewLifecyclePolicyServiceClient(connection).ListDryRunResults(ctx, in, opts...)
}

// ListDryRunResultAffectedImages is an operation of Yandex.Cloud ContainerRegistry LifecyclePolicy service.
func (c lifecyclePolicyClient) ListDryRunResultAffectedImages(ctx context.Context, in *containerregistry.ListDryRunLifecyclePolicyResultAffectedImagesRequest, opts ...grpc.CallOption) (*containerregistry.ListDryRunLifecyclePolicyResultAffectedImagesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyListDryRunResultAffectedImages, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewLifecyclePolicyServiceClient(connection).ListDryRunResultAffectedImages(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c lifecyclePolicyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, LifecyclePolicyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	LifecyclePolicyGet                            = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.Get")
	LifecyclePolicyList                           = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.List")
	LifecyclePolicyCreate                         = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.Create")
	LifecyclePolicyUpdate                         = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.Update")
	LifecyclePolicyDelete                         = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.Delete")
	LifecyclePolicyDryRun                         = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.DryRun")
	LifecyclePolicyGetDryRunResult                = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.GetDryRunResult")
	LifecyclePolicyListDryRunResults              = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResults")
	LifecyclePolicyListDryRunResultAffectedImages = protoreflect.FullName("yandex.cloud.containerregistry.v1.LifecyclePolicyService.ListDryRunResultAffectedImages")
	LifecyclePolicyOperationPoller                = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
