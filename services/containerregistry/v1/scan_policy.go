// Code generated by sdkgen-v2. DO NOT EDIT.
package containerregistrysdk

import (
	"context"

	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ScanPolicyClient provides methods for managing ScanPolicy resources of Yandex.Cloud ContainerRegistry.
type ScanPolicyClient interface {
	Get(context.Context, *containerregistry.GetScanPolicyRequest, ...grpc.CallOption) (*containerregistry.ScanPolicy, error)
	GetByRegistry(context.Context, *containerregistry.GetScanPolicyByRegistryRequest, ...grpc.CallOption) (*containerregistry.ScanPolicy, error)
	Create(context.Context, *containerregistry.CreateScanPolicyRequest, ...grpc.CallOption) (*ScanPolicyCreateOperation, error)
	Update(context.Context, *containerregistry.UpdateScanPolicyRequest, ...grpc.CallOption) (*ScanPolicyUpdateOperation, error)
	Delete(context.Context, *containerregistry.DeleteScanPolicyRequest, ...grpc.CallOption) (*ScanPolicyDeleteOperation, error)
}

var _ ScanPolicyClient = scanPolicyClient{}

type scanPolicyClient struct {
	connector transport.Connector
}

// NewScanPolicyClient returns ScanPolicyClient implementation.
func NewScanPolicyClient(connector transport.Connector) ScanPolicyClient {
	return scanPolicyClient{connector}
}

// Get is an operation of Yandex.Cloud ContainerRegistry ScanPolicy service.
func (c scanPolicyClient) Get(ctx context.Context, in *containerregistry.GetScanPolicyRequest, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyGet, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewScanPolicyServiceClient(connection).Get(ctx, in, opts...)
}

// GetByRegistry is an operation of Yandex.Cloud ContainerRegistry ScanPolicy service.
func (c scanPolicyClient) GetByRegistry(ctx context.Context, in *containerregistry.GetScanPolicyByRegistryRequest, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyGetByRegistry, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewScanPolicyServiceClient(connection).GetByRegistry(ctx, in, opts...)
}

// ScanPolicyCreateOperation is used to monitor the state of Create operations.
type ScanPolicyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ScanPolicyCreateOperation) Metadata() *containerregistry.CreateScanPolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.CreateScanPolicyMetadata)
}

// Response retrieves the operation response.
func (o *ScanPolicyCreateOperation) Response() *containerregistry.ScanPolicy {
	return o.Operation.Response().(*containerregistry.ScanPolicy)
}

// Wait polls the operation until it's done.
func (o *ScanPolicyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.ScanPolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ScanPolicyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.ScanPolicy)
	return response, err
}

// Create is an operation of Yandex.Cloud ContainerRegistry ScanPolicy service.
// It returns an object which should be used to monitor the operation state.
func (c scanPolicyClient) Create(ctx context.Context, in *containerregistry.CreateScanPolicyRequest, opts ...grpc.CallOption) (*ScanPolicyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewScanPolicyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.CreateScanPolicyMetadata).GetScanPolicyId()
		},
		MetadataType: (*containerregistry.CreateScanPolicyMetadata)(nil),
		ResponseType: (*containerregistry.ScanPolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ScanPolicyCreateOperation{*op}, nil
}

// ScanPolicyUpdateOperation is used to monitor the state of Update operations.
type ScanPolicyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ScanPolicyUpdateOperation) Metadata() *containerregistry.UpdateScanPolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.UpdateScanPolicyMetadata)
}

// Response retrieves the operation response.
func (o *ScanPolicyUpdateOperation) Response() *containerregistry.ScanPolicy {
	return o.Operation.Response().(*containerregistry.ScanPolicy)
}

// Wait polls the operation until it's done.
func (o *ScanPolicyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.ScanPolicy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ScanPolicyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.ScanPolicy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.ScanPolicy)
	return response, err
}

// Update is an operation of Yandex.Cloud ContainerRegistry ScanPolicy service.
// It returns an object which should be used to monitor the operation state.
func (c scanPolicyClient) Update(ctx context.Context, in *containerregistry.UpdateScanPolicyRequest, opts ...grpc.CallOption) (*ScanPolicyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewScanPolicyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.UpdateScanPolicyMetadata).GetScanPolicyId()
		},
		MetadataType: (*containerregistry.UpdateScanPolicyMetadata)(nil),
		ResponseType: (*containerregistry.ScanPolicy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ScanPolicyUpdateOperation{*op}, nil
}

// ScanPolicyDeleteOperation is used to monitor the state of Delete operations.
type ScanPolicyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ScanPolicyDeleteOperation) Metadata() *containerregistry.DeleteScanPolicyMetadata {
	return o.Operation.Metadata().(*containerregistry.DeleteScanPolicyMetadata)
}

// Response retrieves the operation response.
func (o *ScanPolicyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ScanPolicyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ScanPolicyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ContainerRegistry ScanPolicy service.
// It returns an object which should be used to monitor the operation state.
func (c scanPolicyClient) Delete(ctx context.Context, in *containerregistry.DeleteScanPolicyRequest, opts ...grpc.CallOption) (*ScanPolicyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewScanPolicyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.DeleteScanPolicyMetadata).GetScanPolicyId()
		},
		MetadataType: (*containerregistry.DeleteScanPolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ScanPolicyDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c scanPolicyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ScanPolicyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ScanPolicyGet             = protoreflect.FullName("yandex.cloud.containerregistry.v1.ScanPolicyService.Get")
	ScanPolicyGetByRegistry   = protoreflect.FullName("yandex.cloud.containerregistry.v1.ScanPolicyService.GetByRegistry")
	ScanPolicyCreate          = protoreflect.FullName("yandex.cloud.containerregistry.v1.ScanPolicyService.Create")
	ScanPolicyUpdate          = protoreflect.FullName("yandex.cloud.containerregistry.v1.ScanPolicyService.Update")
	ScanPolicyDelete          = protoreflect.FullName("yandex.cloud.containerregistry.v1.ScanPolicyService.Delete")
	ScanPolicyOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
