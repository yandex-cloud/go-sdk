// Code generated by sdkgen-v2. DO NOT EDIT.
package containerregistrysdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RepositoryClient provides methods for managing Repository resources of Yandex.Cloud ContainerRegistry.
type RepositoryClient interface {
	Get(context.Context, *containerregistry.GetRepositoryRequest, ...grpc.CallOption) (*containerregistry.Repository, error)
	GetByName(context.Context, *containerregistry.GetRepositoryByNameRequest, ...grpc.CallOption) (*containerregistry.Repository, error)
	List(context.Context, *containerregistry.ListRepositoriesRequest, ...grpc.CallOption) (*containerregistry.ListRepositoriesResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	Upsert(context.Context, *containerregistry.UpsertRepositoryRequest, ...grpc.CallOption) (*RepositoryUpsertOperation, error)
	Delete(context.Context, *containerregistry.DeleteRepositoryRequest, ...grpc.CallOption) (*RepositoryDeleteOperation, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*RepositorySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*RepositoryUpdateAccessBindingsOperation, error)
}

var _ RepositoryClient = repositoryClient{}

type repositoryClient struct {
	connector transport.Connector
}

// NewRepositoryClient returns RepositoryClient implementation.
func NewRepositoryClient(connector transport.Connector) RepositoryClient {
	return repositoryClient{connector}
}

// Get is an operation of Yandex.Cloud ContainerRegistry Repository service.
func (c repositoryClient) Get(ctx context.Context, in *containerregistry.GetRepositoryRequest, opts ...grpc.CallOption) (*containerregistry.Repository, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryGet, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewRepositoryServiceClient(connection).Get(ctx, in, opts...)
}

// GetByName is an operation of Yandex.Cloud ContainerRegistry Repository service.
func (c repositoryClient) GetByName(ctx context.Context, in *containerregistry.GetRepositoryByNameRequest, opts ...grpc.CallOption) (*containerregistry.Repository, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryGetByName, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewRepositoryServiceClient(connection).GetByName(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud ContainerRegistry Repository service.
func (c repositoryClient) List(ctx context.Context, in *containerregistry.ListRepositoriesRequest, opts ...grpc.CallOption) (*containerregistry.ListRepositoriesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryList, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewRepositoryServiceClient(connection).List(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud ContainerRegistry Repository service.
func (c repositoryClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return containerregistry.NewRepositoryServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// RepositoryUpsertOperation is used to monitor the state of Upsert operations.
type RepositoryUpsertOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RepositoryUpsertOperation) Metadata() *containerregistry.UpsertRepositoryMetadata {
	return o.Operation.Metadata().(*containerregistry.UpsertRepositoryMetadata)
}

// Response retrieves the operation response.
func (o *RepositoryUpsertOperation) Response() *containerregistry.Repository {
	return o.Operation.Response().(*containerregistry.Repository)
}

// Wait polls the operation until it's done.
func (o *RepositoryUpsertOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*containerregistry.Repository, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*containerregistry.Repository)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RepositoryUpsertOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*containerregistry.Repository, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*containerregistry.Repository)
	return response, err
}

// Upsert is an operation of Yandex.Cloud ContainerRegistry Repository service.
// It returns an object which should be used to monitor the operation state.
func (c repositoryClient) Upsert(ctx context.Context, in *containerregistry.UpsertRepositoryRequest, opts ...grpc.CallOption) (*RepositoryUpsertOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryUpsert, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewRepositoryServiceClient(connection).Upsert(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.UpsertRepositoryMetadata).GetRepositoryId()
		},
		MetadataType: (*containerregistry.UpsertRepositoryMetadata)(nil),
		ResponseType: (*containerregistry.Repository)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RepositoryUpsertOperation{*op}, nil
}

// RepositoryDeleteOperation is used to monitor the state of Delete operations.
type RepositoryDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *RepositoryDeleteOperation) Metadata() *containerregistry.DeleteRepositoryMetadata {
	return o.Operation.Metadata().(*containerregistry.DeleteRepositoryMetadata)
}

// Response retrieves the operation response.
func (o *RepositoryDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RepositoryDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RepositoryDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud ContainerRegistry Repository service.
// It returns an object which should be used to monitor the operation state.
func (c repositoryClient) Delete(ctx context.Context, in *containerregistry.DeleteRepositoryRequest, opts ...grpc.CallOption) (*RepositoryDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewRepositoryServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*containerregistry.DeleteRepositoryMetadata).GetRepositoryId()
		},
		MetadataType: (*containerregistry.DeleteRepositoryMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RepositoryDeleteOperation{*op}, nil
}

// RepositorySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type RepositorySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RepositorySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RepositorySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RepositorySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud ContainerRegistry Repository service.
// It returns an object which should be used to monitor the operation state.
func (c repositoryClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*RepositorySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RepositorySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewRepositoryServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RepositorySetAccessBindingsOperation{*op}, nil
}

// RepositoryUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type RepositoryUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *RepositoryUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *RepositoryUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *RepositoryUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud ContainerRegistry Repository service.
// It returns an object which should be used to monitor the operation state.
func (c repositoryClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*RepositoryUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := containerregistry.NewRepositoryServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &RepositoryUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c repositoryClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, RepositoryOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	RepositoryGet                  = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.Get")
	RepositoryGetByName            = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.GetByName")
	RepositoryList                 = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.List")
	RepositoryListAccessBindings   = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.ListAccessBindings")
	RepositoryUpsert               = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.Upsert")
	RepositoryDelete               = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.Delete")
	RepositorySetAccessBindings    = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.SetAccessBindings")
	RepositoryUpdateAccessBindings = protoreflect.FullName("yandex.cloud.containerregistry.v1.RepositoryService.UpdateAccessBindings")
	RepositoryOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
