// Code generated by sdkgen-v2. DO NOT EDIT.
package gitlabsdk

import (
	"context"

	gitlab "github.com/yandex-cloud/go-genproto/yandex/cloud/gitlab/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// InstanceClient provides methods for managing Instance resources of Yandex.Cloud Gitlab.
type InstanceClient interface {
	Get(context.Context, *gitlab.GetInstanceRequest, ...grpc.CallOption) (*gitlab.Instance, error)
	List(context.Context, *gitlab.ListInstancesRequest, ...grpc.CallOption) (*gitlab.ListInstancesResponse, error)
	Create(context.Context, *gitlab.CreateInstanceRequest, ...grpc.CallOption) (*InstanceCreateOperation, error)
	Update(context.Context, *gitlab.UpdateInstanceRequest, ...grpc.CallOption) (*InstanceUpdateOperation, error)
	Delete(context.Context, *gitlab.DeleteInstanceRequest, ...grpc.CallOption) (*InstanceDeleteOperation, error)
	Start(context.Context, *gitlab.StartInstanceRequest, ...grpc.CallOption) (*InstanceStartOperation, error)
	Stop(context.Context, *gitlab.StopInstanceRequest, ...grpc.CallOption) (*InstanceStopOperation, error)
}

var _ InstanceClient = instanceClient{}

type instanceClient struct {
	connector transport.Connector
}

// NewInstanceClient returns InstanceClient implementation.
func NewInstanceClient(connector transport.Connector) InstanceClient {
	return instanceClient{connector}
}

// Get is an operation of Yandex.Cloud Gitlab Instance service.
func (c instanceClient) Get(ctx context.Context, in *gitlab.GetInstanceRequest, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceGet, opts...)
	if err != nil {
		return nil, err
	}
	return gitlab.NewInstanceServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Gitlab Instance service.
func (c instanceClient) List(ctx context.Context, in *gitlab.ListInstancesRequest, opts ...grpc.CallOption) (*gitlab.ListInstancesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceList, opts...)
	if err != nil {
		return nil, err
	}
	return gitlab.NewInstanceServiceClient(connection).List(ctx, in, opts...)
}

// InstanceCreateOperation is used to monitor the state of Create operations.
type InstanceCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceCreateOperation) Metadata() *gitlab.CreateInstanceMetadata {
	return o.Operation.Metadata().(*gitlab.CreateInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceCreateOperation) Response() *gitlab.Instance {
	return o.Operation.Response().(*gitlab.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// Create is an operation of Yandex.Cloud Gitlab Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Create(ctx context.Context, in *gitlab.CreateInstanceRequest, opts ...grpc.CallOption) (*InstanceCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := gitlab.NewInstanceServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*gitlab.CreateInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*gitlab.CreateInstanceMetadata)(nil),
		ResponseType: (*gitlab.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceCreateOperation{*op}, nil
}

// InstanceUpdateOperation is used to monitor the state of Update operations.
type InstanceUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceUpdateOperation) Metadata() *gitlab.UpdateInstanceMetadata {
	return o.Operation.Metadata().(*gitlab.UpdateInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceUpdateOperation) Response() *gitlab.Instance {
	return o.Operation.Response().(*gitlab.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// Update is an operation of Yandex.Cloud Gitlab Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Update(ctx context.Context, in *gitlab.UpdateInstanceRequest, opts ...grpc.CallOption) (*InstanceUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := gitlab.NewInstanceServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*gitlab.UpdateInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*gitlab.UpdateInstanceMetadata)(nil),
		ResponseType: (*gitlab.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceUpdateOperation{*op}, nil
}

// InstanceDeleteOperation is used to monitor the state of Delete operations.
type InstanceDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceDeleteOperation) Metadata() *gitlab.DeleteInstanceMetadata {
	return o.Operation.Metadata().(*gitlab.DeleteInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *InstanceDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Gitlab Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Delete(ctx context.Context, in *gitlab.DeleteInstanceRequest, opts ...grpc.CallOption) (*InstanceDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := gitlab.NewInstanceServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*gitlab.DeleteInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*gitlab.DeleteInstanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceDeleteOperation{*op}, nil
}

// InstanceStartOperation is used to monitor the state of Start operations.
type InstanceStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceStartOperation) Metadata() *gitlab.StartInstanceMetadata {
	return o.Operation.Metadata().(*gitlab.StartInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceStartOperation) Response() *gitlab.Instance {
	return o.Operation.Response().(*gitlab.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// Start is an operation of Yandex.Cloud Gitlab Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Start(ctx context.Context, in *gitlab.StartInstanceRequest, opts ...grpc.CallOption) (*InstanceStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := gitlab.NewInstanceServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*gitlab.StartInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*gitlab.StartInstanceMetadata)(nil),
		ResponseType: (*gitlab.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceStartOperation{*op}, nil
}

// InstanceStopOperation is used to monitor the state of Stop operations.
type InstanceStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *InstanceStopOperation) Metadata() *gitlab.StopInstanceMetadata {
	return o.Operation.Metadata().(*gitlab.StopInstanceMetadata)
}

// Response retrieves the operation response.
func (o *InstanceStopOperation) Response() *gitlab.Instance {
	return o.Operation.Response().(*gitlab.Instance)
}

// Wait polls the operation until it's done.
func (o *InstanceStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *InstanceStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*gitlab.Instance, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*gitlab.Instance)
	return response, err
}

// Stop is an operation of Yandex.Cloud Gitlab Instance service.
// It returns an object which should be used to monitor the operation state.
func (c instanceClient) Stop(ctx context.Context, in *gitlab.StopInstanceRequest, opts ...grpc.CallOption) (*InstanceStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := gitlab.NewInstanceServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*gitlab.StopInstanceMetadata).GetInstanceId()
		},
		MetadataType: (*gitlab.StopInstanceMetadata)(nil),
		ResponseType: (*gitlab.Instance)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &InstanceStopOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c instanceClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, InstanceOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	InstanceGet             = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Get")
	InstanceList            = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.List")
	InstanceCreate          = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Create")
	InstanceUpdate          = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Update")
	InstanceDelete          = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Delete")
	InstanceStart           = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Start")
	InstanceStop            = protoreflect.FullName("yandex.cloud.gitlab.v1.InstanceService.Stop")
	InstanceOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
