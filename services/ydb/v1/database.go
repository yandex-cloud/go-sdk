// Code generated by sdkgen-v2. DO NOT EDIT.
package ydbsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	ydb "github.com/yandex-cloud/go-genproto/yandex/cloud/ydb/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DatabaseClient provides methods for managing Database resources of Yandex.Cloud YDB.
type DatabaseClient interface {
	Get(context.Context, *ydb.GetDatabaseRequest, ...grpc.CallOption) (*ydb.Database, error)
	List(context.Context, *ydb.ListDatabasesRequest, ...grpc.CallOption) (*ydb.ListDatabasesResponse, error)
	Create(context.Context, *ydb.CreateDatabaseRequest, ...grpc.CallOption) (*DatabaseCreateOperation, error)
	Update(context.Context, *ydb.UpdateDatabaseRequest, ...grpc.CallOption) (*DatabaseUpdateOperation, error)
	Start(context.Context, *ydb.StartDatabaseRequest, ...grpc.CallOption) (*DatabaseStartOperation, error)
	Stop(context.Context, *ydb.StopDatabaseRequest, ...grpc.CallOption) (*DatabaseStopOperation, error)
	Move(context.Context, *ydb.MoveDatabaseRequest, ...grpc.CallOption) (*DatabaseMoveOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*DatabaseSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*DatabaseUpdateAccessBindingsOperation, error)
	Delete(context.Context, *ydb.DeleteDatabaseRequest, ...grpc.CallOption) (*DatabaseDeleteOperation, error)
	Restore(context.Context, *ydb.RestoreBackupRequest, ...grpc.CallOption) (*DatabaseRestoreOperation, error)
	Backup(context.Context, *ydb.BackupDatabaseRequest, ...grpc.CallOption) (*DatabaseBackupOperation, error)
}

var _ DatabaseClient = databaseClient{}

type databaseClient struct {
	connector transport.Connector
}

// NewDatabaseClient returns DatabaseClient implementation.
func NewDatabaseClient(connector transport.Connector) DatabaseClient {
	return databaseClient{connector}
}

// Get is an operation of Yandex.Cloud YDB Database service.
func (c databaseClient) Get(ctx context.Context, in *ydb.GetDatabaseRequest, opts ...grpc.CallOption) (*ydb.Database, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseGet, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewDatabaseServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud YDB Database service.
func (c databaseClient) List(ctx context.Context, in *ydb.ListDatabasesRequest, opts ...grpc.CallOption) (*ydb.ListDatabasesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseList, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewDatabaseServiceClient(connection).List(ctx, in, opts...)
}

// DatabaseCreateOperation is used to monitor the state of Create operations.
type DatabaseCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseCreateOperation) Metadata() *ydb.CreateDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.CreateDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseCreateOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Create is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Create(ctx context.Context, in *ydb.CreateDatabaseRequest, opts ...grpc.CallOption) (*DatabaseCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.CreateDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.CreateDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseCreateOperation{*op}, nil
}

// DatabaseUpdateOperation is used to monitor the state of Update operations.
type DatabaseUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseUpdateOperation) Metadata() *ydb.UpdateDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.UpdateDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseUpdateOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Update is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Update(ctx context.Context, in *ydb.UpdateDatabaseRequest, opts ...grpc.CallOption) (*DatabaseUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.UpdateDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.UpdateDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseUpdateOperation{*op}, nil
}

// DatabaseStartOperation is used to monitor the state of Start operations.
type DatabaseStartOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseStartOperation) Metadata() *ydb.StartDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.StartDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseStartOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseStartOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseStartOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Start is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Start(ctx context.Context, in *ydb.StartDatabaseRequest, opts ...grpc.CallOption) (*DatabaseStartOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseStart, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Start(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.StartDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.StartDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseStartOperation{*op}, nil
}

// DatabaseStopOperation is used to monitor the state of Stop operations.
type DatabaseStopOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseStopOperation) Metadata() *ydb.StopDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.StopDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseStopOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseStopOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseStopOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Stop is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Stop(ctx context.Context, in *ydb.StopDatabaseRequest, opts ...grpc.CallOption) (*DatabaseStopOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseStop, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Stop(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.StopDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.StopDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseStopOperation{*op}, nil
}

// DatabaseMoveOperation is used to monitor the state of Move operations.
type DatabaseMoveOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseMoveOperation) Metadata() *ydb.MoveDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.MoveDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseMoveOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseMoveOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseMoveOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Move is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Move(ctx context.Context, in *ydb.MoveDatabaseRequest, opts ...grpc.CallOption) (*DatabaseMoveOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseMove, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Move(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.MoveDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.MoveDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseMoveOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud YDB Database service.
func (c databaseClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewDatabaseServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// DatabaseSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type DatabaseSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *DatabaseSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DatabaseSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*DatabaseSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseSetAccessBindingsOperation{*op}, nil
}

// DatabaseUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type DatabaseUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *DatabaseUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DatabaseUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*DatabaseUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseUpdateAccessBindingsOperation{*op}, nil
}

// DatabaseDeleteOperation is used to monitor the state of Delete operations.
type DatabaseDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseDeleteOperation) Metadata() *ydb.DeleteDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.DeleteDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DatabaseDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Delete(ctx context.Context, in *ydb.DeleteDatabaseRequest, opts ...grpc.CallOption) (*DatabaseDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.DeleteDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.DeleteDatabaseMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseDeleteOperation{*op}, nil
}

// DatabaseRestoreOperation is used to monitor the state of Restore operations.
type DatabaseRestoreOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseRestoreOperation) Metadata() *ydb.RestoreBackupMetadata {
	return o.Operation.Metadata().(*ydb.RestoreBackupMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseRestoreOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseRestoreOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseRestoreOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Restore is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Restore(ctx context.Context, in *ydb.RestoreBackupRequest, opts ...grpc.CallOption) (*DatabaseRestoreOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseRestore, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Restore(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.RestoreBackupMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.RestoreBackupMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseRestoreOperation{*op}, nil
}

// DatabaseBackupOperation is used to monitor the state of Backup operations.
type DatabaseBackupOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DatabaseBackupOperation) Metadata() *ydb.BackupDatabaseMetadata {
	return o.Operation.Metadata().(*ydb.BackupDatabaseMetadata)
}

// Response retrieves the operation response.
func (o *DatabaseBackupOperation) Response() *ydb.Database {
	return o.Operation.Response().(*ydb.Database)
}

// Wait polls the operation until it's done.
func (o *DatabaseBackupOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DatabaseBackupOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*ydb.Database, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*ydb.Database)
	return response, err
}

// Backup is an operation of Yandex.Cloud YDB Database service.
// It returns an object which should be used to monitor the operation state.
func (c databaseClient) Backup(ctx context.Context, in *ydb.BackupDatabaseRequest, opts ...grpc.CallOption) (*DatabaseBackupOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseBackup, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewDatabaseServiceClient(connection).Backup(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.BackupDatabaseMetadata).GetDatabaseId()
		},
		MetadataType: (*ydb.BackupDatabaseMetadata)(nil),
		ResponseType: (*ydb.Database)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DatabaseBackupOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c databaseClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DatabaseOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DatabaseGet                  = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Get")
	DatabaseList                 = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.List")
	DatabaseCreate               = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Create")
	DatabaseUpdate               = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Update")
	DatabaseStart                = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Start")
	DatabaseStop                 = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Stop")
	DatabaseMove                 = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Move")
	DatabaseListAccessBindings   = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.ListAccessBindings")
	DatabaseSetAccessBindings    = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.SetAccessBindings")
	DatabaseUpdateAccessBindings = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.UpdateAccessBindings")
	DatabaseDelete               = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Delete")
	DatabaseRestore              = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Restore")
	DatabaseBackup               = protoreflect.FullName("yandex.cloud.ydb.v1.DatabaseService.Backup")
	DatabaseOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
