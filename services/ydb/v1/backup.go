// Code generated by sdkgen-v2. DO NOT EDIT.
package ydbsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	ydb "github.com/yandex-cloud/go-genproto/yandex/cloud/ydb/v1"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// BackupClient provides methods for managing Backup resources of Yandex.Cloud YDB.
type BackupClient interface {
	Get(context.Context, *ydb.GetBackupRequest, ...grpc.CallOption) (*ydb.Backup, error)
	ListPaths(context.Context, *ydb.ListPathsRequest, ...grpc.CallOption) (*ydb.ListPathsResponse, error)
	List(context.Context, *ydb.ListBackupsRequest, ...grpc.CallOption) (*ydb.ListBackupsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*BackupSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*BackupUpdateAccessBindingsOperation, error)
	Delete(context.Context, *ydb.DeleteBackupRequest, ...grpc.CallOption) (*BackupDeleteOperation, error)
}

var _ BackupClient = backupClient{}

type backupClient struct {
	connector transport.Connector
}

// NewBackupClient returns BackupClient implementation.
func NewBackupClient(connector transport.Connector) BackupClient {
	return backupClient{connector}
}

// Get is an operation of Yandex.Cloud YDB Backup service.
func (c backupClient) Get(ctx context.Context, in *ydb.GetBackupRequest, opts ...grpc.CallOption) (*ydb.Backup, error) {
	connection, err := c.connector.GetConnection(ctx, BackupGet, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewBackupServiceClient(connection).Get(ctx, in, opts...)
}

// ListPaths is an operation of Yandex.Cloud YDB Backup service.
func (c backupClient) ListPaths(ctx context.Context, in *ydb.ListPathsRequest, opts ...grpc.CallOption) (*ydb.ListPathsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupListPaths, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewBackupServiceClient(connection).ListPaths(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud YDB Backup service.
func (c backupClient) List(ctx context.Context, in *ydb.ListBackupsRequest, opts ...grpc.CallOption) (*ydb.ListBackupsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupList, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewBackupServiceClient(connection).List(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud YDB Backup service.
func (c backupClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, BackupListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return ydb.NewBackupServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// BackupSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type BackupSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupSetAccessBindingsOperation) Metadata() *access.SetAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.SetAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BackupSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud YDB Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*BackupSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewBackupServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.SetAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupSetAccessBindingsOperation{*op}, nil
}

// BackupUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type BackupUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupUpdateAccessBindingsOperation) Metadata() *access.UpdateAccessBindingsMetadata {
	return o.Operation.Metadata().(*access.UpdateAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *BackupUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud YDB Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*BackupUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewBackupServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*access.UpdateAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupUpdateAccessBindingsOperation{*op}, nil
}

// BackupDeleteOperation is used to monitor the state of Delete operations.
type BackupDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *BackupDeleteOperation) Metadata() *ydb.DeleteBackupMetadata {
	return o.Operation.Metadata().(*ydb.DeleteBackupMetadata)
}

// Response retrieves the operation response.
func (o *BackupDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *BackupDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *BackupDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud YDB Backup service.
// It returns an object which should be used to monitor the operation state.
func (c backupClient) Delete(ctx context.Context, in *ydb.DeleteBackupRequest, opts ...grpc.CallOption) (*BackupDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := ydb.NewBackupServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*ydb.DeleteBackupMetadata).GetBackupId()
		},
		MetadataType: (*ydb.DeleteBackupMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &BackupDeleteOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c backupClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, BackupOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	BackupGet                  = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.Get")
	BackupListPaths            = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.ListPaths")
	BackupList                 = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.List")
	BackupListAccessBindings   = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.ListAccessBindings")
	BackupSetAccessBindings    = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.SetAccessBindings")
	BackupUpdateAccessBindings = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.UpdateAccessBindings")
	BackupDelete               = protoreflect.FullName("yandex.cloud.ydb.v1.BackupService.Delete")
	BackupOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
