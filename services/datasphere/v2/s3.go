// Code generated by sdkgen-v2. DO NOT EDIT.
package dataspheresdk

import (
	"context"

	datasphere "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// S3Client provides methods for managing S3 resources of Yandex.Cloud Datasphere.
type S3Client interface {
	Activate(context.Context, *datasphere.ActivateS3Request, ...grpc.CallOption) (*S3ActivateOperation, error)
	Deactivate(context.Context, *datasphere.DeactivateS3Request, ...grpc.CallOption) (*S3DeactivateOperation, error)
}

var _ S3Client = s3Client{}

type s3Client struct {
	connector transport.Connector
}

// NewS3Client returns S3Client implementation.
func NewS3Client(connector transport.Connector) S3Client {
	return s3Client{connector}
}

// S3ActivateOperation is used to monitor the state of Activate operations.
type S3ActivateOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *S3ActivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *S3ActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *S3ActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Activate is an operation of Yandex.Cloud Datasphere S3 service.
// It returns an object which should be used to monitor the operation state.
func (c s3Client) Activate(ctx context.Context, in *datasphere.ActivateS3Request, opts ...grpc.CallOption) (*S3ActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, S3Activate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewS3ServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &S3ActivateOperation{*op}, nil
}

// S3DeactivateOperation is used to monitor the state of Deactivate operations.
type S3DeactivateOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *S3DeactivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *S3DeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *S3DeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud Datasphere S3 service.
// It returns an object which should be used to monitor the operation state.
func (c s3Client) Deactivate(ctx context.Context, in *datasphere.DeactivateS3Request, opts ...grpc.CallOption) (*S3DeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, S3Deactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewS3ServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &S3DeactivateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c s3Client) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, S3OperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	S3Activate        = protoreflect.FullName("yandex.cloud.datasphere.v2.S3Service.Activate")
	S3Deactivate      = protoreflect.FullName("yandex.cloud.datasphere.v2.S3Service.Deactivate")
	S3OperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
