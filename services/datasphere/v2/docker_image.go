// Code generated by sdkgen-v2. DO NOT EDIT.
package dataspheresdk

import (
	"context"

	datasphere "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DockerImageClient provides methods for managing DockerImage resources of Yandex.Cloud Datasphere.
type DockerImageClient interface {
	Activate(context.Context, *datasphere.ActivateDockerImageRequest, ...grpc.CallOption) (*DockerImageActivateOperation, error)
}

var _ DockerImageClient = dockerImageClient{}

type dockerImageClient struct {
	connector transport.Connector
}

// NewDockerImageClient returns DockerImageClient implementation.
func NewDockerImageClient(connector transport.Connector) DockerImageClient {
	return dockerImageClient{connector}
}

// DockerImageActivateOperation is used to monitor the state of Activate operations.
type DockerImageActivateOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *DockerImageActivateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DockerImageActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DockerImageActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Activate is an operation of Yandex.Cloud Datasphere DockerImage service.
// It returns an object which should be used to monitor the operation state.
func (c dockerImageClient) Activate(ctx context.Context, in *datasphere.ActivateDockerImageRequest, opts ...grpc.CallOption) (*DockerImageActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DockerImageActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewDockerImageServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DockerImageActivateOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c dockerImageClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DockerImageOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DockerImageActivate        = protoreflect.FullName("yandex.cloud.datasphere.v2.DockerImageService.Activate")
	DockerImageOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
