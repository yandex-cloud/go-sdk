// Code generated by sdkgen-v2. DO NOT EDIT.
package dataspheresdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	datasphere "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CommunityClient provides methods for managing Community resources of Yandex.Cloud Datasphere.
type CommunityClient interface {
	Create(context.Context, *datasphere.CreateCommunityRequest, ...grpc.CallOption) (*CommunityCreateOperation, error)
	Get(context.Context, *datasphere.GetCommunityRequest, ...grpc.CallOption) (*datasphere.Community, error)
	Update(context.Context, *datasphere.UpdateCommunityRequest, ...grpc.CallOption) (*CommunityUpdateOperation, error)
	Delete(context.Context, *datasphere.DeleteCommunityRequest, ...grpc.CallOption) (*CommunityDeleteOperation, error)
	List(context.Context, *datasphere.ListCommunitiesRequest, ...grpc.CallOption) (*datasphere.ListCommunitiesResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*CommunitySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*CommunityUpdateAccessBindingsOperation, error)
	AddResource(context.Context, *datasphere.AddCommunityResourceRequest, ...grpc.CallOption) (*CommunityAddResourceOperation, error)
	RemoveResource(context.Context, *datasphere.RemoveCommunityResourceRequest, ...grpc.CallOption) (*CommunityRemoveResourceOperation, error)
	GetRestrictionsMeta(context.Context, *emptypb.Empty, ...grpc.CallOption) (*datasphere.GetRestrictionsMetaResponse, error)
	GetRestrictions(context.Context, *datasphere.GetCommunityRestrictionsRequest, ...grpc.CallOption) (*datasphere.RestrictionsResponse, error)
	SetRestrictions(context.Context, *datasphere.SetCommunityRestrictionsRequest, ...grpc.CallOption) (*CommunitySetRestrictionsOperation, error)
}

var _ CommunityClient = communityClient{}

type communityClient struct {
	connector transport.Connector
}

// NewCommunityClient returns CommunityClient implementation.
func NewCommunityClient(connector transport.Connector) CommunityClient {
	return communityClient{connector}
}

// CommunityCreateOperation is used to monitor the state of Create operations.
type CommunityCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CommunityCreateOperation) Metadata() *datasphere.CreateCommunityMetadata {
	return o.Operation.Metadata().(*datasphere.CreateCommunityMetadata)
}

// Response retrieves the operation response.
func (o *CommunityCreateOperation) Response() *datasphere.Community {
	return o.Operation.Response().(*datasphere.Community)
}

// Wait polls the operation until it's done.
func (o *CommunityCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.Community, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.Community)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.Community, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.Community)
	return response, err
}

// Create is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) Create(ctx context.Context, in *datasphere.CreateCommunityRequest, opts ...grpc.CallOption) (*CommunityCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.CreateCommunityMetadata).GetCommunityId()
		},
		MetadataType: (*datasphere.CreateCommunityMetadata)(nil),
		ResponseType: (*datasphere.Community)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityCreateOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Datasphere Community service.
func (c communityClient) Get(ctx context.Context, in *datasphere.GetCommunityRequest, opts ...grpc.CallOption) (*datasphere.Community, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityGet, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewCommunityServiceClient(connection).Get(ctx, in, opts...)
}

// CommunityUpdateOperation is used to monitor the state of Update operations.
type CommunityUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CommunityUpdateOperation) Metadata() *datasphere.UpdateCommunityMetadata {
	return o.Operation.Metadata().(*datasphere.UpdateCommunityMetadata)
}

// Response retrieves the operation response.
func (o *CommunityUpdateOperation) Response() *datasphere.Community {
	return o.Operation.Response().(*datasphere.Community)
}

// Wait polls the operation until it's done.
func (o *CommunityUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.Community, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.Community)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.Community, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.Community)
	return response, err
}

// Update is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) Update(ctx context.Context, in *datasphere.UpdateCommunityRequest, opts ...grpc.CallOption) (*CommunityUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.UpdateCommunityMetadata).GetCommunityId()
		},
		MetadataType: (*datasphere.UpdateCommunityMetadata)(nil),
		ResponseType: (*datasphere.Community)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityUpdateOperation{*op}, nil
}

// CommunityDeleteOperation is used to monitor the state of Delete operations.
type CommunityDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CommunityDeleteOperation) Metadata() *datasphere.DeleteCommunityMetadata {
	return o.Operation.Metadata().(*datasphere.DeleteCommunityMetadata)
}

// Response retrieves the operation response.
func (o *CommunityDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CommunityDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) Delete(ctx context.Context, in *datasphere.DeleteCommunityRequest, opts ...grpc.CallOption) (*CommunityDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.DeleteCommunityMetadata).GetCommunityId()
		},
		MetadataType: (*datasphere.DeleteCommunityMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityDeleteOperation{*op}, nil
}

// List is an operation of Yandex.Cloud Datasphere Community service.
func (c communityClient) List(ctx context.Context, in *datasphere.ListCommunitiesRequest, opts ...grpc.CallOption) (*datasphere.ListCommunitiesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityList, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewCommunityServiceClient(connection).List(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Datasphere Community service.
func (c communityClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewCommunityServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// CommunitySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type CommunitySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CommunitySetAccessBindingsOperation) Metadata() *datasphere.SetCommunityAccessBindingsMetadata {
	return o.Operation.Metadata().(*datasphere.SetCommunityAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *CommunitySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CommunitySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunitySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*CommunitySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunitySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.SetCommunityAccessBindingsMetadata).GetCommunityId()
		},
		MetadataType: (*datasphere.SetCommunityAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunitySetAccessBindingsOperation{*op}, nil
}

// CommunityUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type CommunityUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *CommunityUpdateAccessBindingsOperation) Metadata() *datasphere.UpdateCommunityAccessBindingsMetadata {
	return o.Operation.Metadata().(*datasphere.UpdateCommunityAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *CommunityUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CommunityUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*CommunityUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.UpdateCommunityAccessBindingsMetadata).GetCommunityId()
		},
		MetadataType: (*datasphere.UpdateCommunityAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityUpdateAccessBindingsOperation{*op}, nil
}

// CommunityAddResourceOperation is used to monitor the state of AddResource operations.
type CommunityAddResourceOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *CommunityAddResourceOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CommunityAddResourceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityAddResourceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddResource is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) AddResource(ctx context.Context, in *datasphere.AddCommunityResourceRequest, opts ...grpc.CallOption) (*CommunityAddResourceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityAddResource, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).AddResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityAddResourceOperation{*op}, nil
}

// CommunityRemoveResourceOperation is used to monitor the state of RemoveResource operations.
type CommunityRemoveResourceOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *CommunityRemoveResourceOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *CommunityRemoveResourceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunityRemoveResourceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveResource is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) RemoveResource(ctx context.Context, in *datasphere.RemoveCommunityResourceRequest, opts ...grpc.CallOption) (*CommunityRemoveResourceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityRemoveResource, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).RemoveResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunityRemoveResourceOperation{*op}, nil
}

// GetRestrictionsMeta is an operation of Yandex.Cloud Datasphere Community service.
func (c communityClient) GetRestrictionsMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*datasphere.GetRestrictionsMetaResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityGetRestrictionsMeta, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewCommunityServiceClient(connection).GetRestrictionsMeta(ctx, in, opts...)
}

// GetRestrictions is an operation of Yandex.Cloud Datasphere Community service.
func (c communityClient) GetRestrictions(ctx context.Context, in *datasphere.GetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityGetRestrictions, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewCommunityServiceClient(connection).GetRestrictions(ctx, in, opts...)
}

// CommunitySetRestrictionsOperation is used to monitor the state of SetRestrictions operations.
type CommunitySetRestrictionsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *CommunitySetRestrictionsOperation) Response() *datasphere.RestrictionsResponse {
	return o.Operation.Response().(*datasphere.RestrictionsResponse)
}

// Wait polls the operation until it's done.
func (o *CommunitySetRestrictionsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.RestrictionsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *CommunitySetRestrictionsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.RestrictionsResponse)
	return response, err
}

// SetRestrictions is an operation of Yandex.Cloud Datasphere Community service.
// It returns an object which should be used to monitor the operation state.
func (c communityClient) SetRestrictions(ctx context.Context, in *datasphere.SetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*CommunitySetRestrictionsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunitySetRestrictions, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewCommunityServiceClient(connection).SetRestrictions(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*datasphere.RestrictionsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &CommunitySetRestrictionsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c communityClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, CommunityOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	CommunityCreate               = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.Create")
	CommunityGet                  = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.Get")
	CommunityUpdate               = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.Update")
	CommunityDelete               = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.Delete")
	CommunityList                 = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.List")
	CommunityListAccessBindings   = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.ListAccessBindings")
	CommunitySetAccessBindings    = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.SetAccessBindings")
	CommunityUpdateAccessBindings = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.UpdateAccessBindings")
	CommunityAddResource          = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.AddResource")
	CommunityRemoveResource       = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.RemoveResource")
	CommunityGetRestrictionsMeta  = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.GetRestrictionsMeta")
	CommunityGetRestrictions      = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.GetRestrictions")
	CommunitySetRestrictions      = protoreflect.FullName("yandex.cloud.datasphere.v2.CommunityService.SetRestrictions")
	CommunityOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
