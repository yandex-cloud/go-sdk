// Code generated by sdkgen-v2. DO NOT EDIT.
package jobssdk

import (
	"context"

	jobs "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2/jobs"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ProjectJobClient provides methods for managing ProjectJob resources of Yandex.Cloud Jobs.
type ProjectJobClient interface {
	Create(context.Context, *jobs.CreateProjectJobRequest, ...grpc.CallOption) (*ProjectJobCreateOperation, error)
	Clone(context.Context, *jobs.CloneProjectJobRequest, ...grpc.CallOption) (*ProjectJobCloneOperation, error)
	Execute(context.Context, *jobs.ExecuteProjectJobRequest, ...grpc.CallOption) (*ProjectJobExecuteOperation, error)
	Cancel(context.Context, *jobs.CancelProjectJobRequest, ...grpc.CallOption) (*emptypb.Empty, error)
	ReadStdLogs(context.Context, *jobs.ReadProjectJobStdLogsRequest, ...grpc.CallOption) (jobs.ProjectJobService_ReadStdLogsClient, error)
	ReadLogs(context.Context, *jobs.ReadProjectJobLogsRequest, ...grpc.CallOption) (jobs.ProjectJobService_ReadLogsClient, error)
	DownloadJobFiles(context.Context, *jobs.DownloadProjectJobFilesRequest, ...grpc.CallOption) (*jobs.DownloadProjectJobFilesResponse, error)
	List(context.Context, *jobs.ListProjectJobRequest, ...grpc.CallOption) (*jobs.ListProjectJobResponse, error)
	Get(context.Context, *jobs.GetProjectJobRequest, ...grpc.CallOption) (*jobs.Job, error)
	Delete(context.Context, *jobs.DeleteProjectJobRequest, ...grpc.CallOption) (*ProjectJobDeleteOperation, error)
	DeleteData(context.Context, *jobs.DeleteProjectJobDataRequest, ...grpc.CallOption) (*ProjectJobDeleteDataOperation, error)
	DeleteAllData(context.Context, *jobs.DeleteAllProjectJobDataRequest, ...grpc.CallOption) (*ProjectJobDeleteAllDataOperation, error)
	SetDataTtl(context.Context, *jobs.SetProjectJobDataTtlRequest, ...grpc.CallOption) (*jobs.SetProjectJobDataTtlResponse, error)
}

var _ ProjectJobClient = projectJobClient{}

type projectJobClient struct {
	connector transport.Connector
}

// NewProjectJobClient returns ProjectJobClient implementation.
func NewProjectJobClient(connector transport.Connector) ProjectJobClient {
	return projectJobClient{connector}
}

// ProjectJobCreateOperation is used to monitor the state of Create operations.
type ProjectJobCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobCreateOperation) Metadata() *jobs.CreateProjectJobMetadata {
	return o.Operation.Metadata().(*jobs.CreateProjectJobMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobCreateOperation) Response() *jobs.CreateProjectJobResponse {
	return o.Operation.Response().(*jobs.CreateProjectJobResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectJobCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*jobs.CreateProjectJobResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*jobs.CreateProjectJobResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*jobs.CreateProjectJobResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*jobs.CreateProjectJobResponse)
	return response, err
}

// Create is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) Create(ctx context.Context, in *jobs.CreateProjectJobRequest, opts ...grpc.CallOption) (*ProjectJobCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.CreateProjectJobMetadata)(nil),
		ResponseType: (*jobs.CreateProjectJobResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobCreateOperation{*op}, nil
}

// ProjectJobCloneOperation is used to monitor the state of Clone operations.
type ProjectJobCloneOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobCloneOperation) Metadata() *jobs.CloneProjectJobMetadata {
	return o.Operation.Metadata().(*jobs.CloneProjectJobMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobCloneOperation) Response() *jobs.CloneProjectJobResponse {
	return o.Operation.Response().(*jobs.CloneProjectJobResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectJobCloneOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*jobs.CloneProjectJobResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*jobs.CloneProjectJobResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobCloneOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*jobs.CloneProjectJobResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*jobs.CloneProjectJobResponse)
	return response, err
}

// Clone is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) Clone(ctx context.Context, in *jobs.CloneProjectJobRequest, opts ...grpc.CallOption) (*ProjectJobCloneOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobClone, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).Clone(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.CloneProjectJobMetadata)(nil),
		ResponseType: (*jobs.CloneProjectJobResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobCloneOperation{*op}, nil
}

// ProjectJobExecuteOperation is used to monitor the state of Execute operations.
type ProjectJobExecuteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobExecuteOperation) Metadata() *jobs.ExecuteProjectJobMetadata {
	return o.Operation.Metadata().(*jobs.ExecuteProjectJobMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobExecuteOperation) Response() *jobs.ExecuteProjectJobResponse {
	return o.Operation.Response().(*jobs.ExecuteProjectJobResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectJobExecuteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*jobs.ExecuteProjectJobResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*jobs.ExecuteProjectJobResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobExecuteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*jobs.ExecuteProjectJobResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*jobs.ExecuteProjectJobResponse)
	return response, err
}

// Execute is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) Execute(ctx context.Context, in *jobs.ExecuteProjectJobRequest, opts ...grpc.CallOption) (*ProjectJobExecuteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobExecute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).Execute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.ExecuteProjectJobMetadata)(nil),
		ResponseType: (*jobs.ExecuteProjectJobResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobExecuteOperation{*op}, nil
}

// Cancel is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) Cancel(ctx context.Context, in *jobs.CancelProjectJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobCancel, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).Cancel(ctx, in, opts...)
}

// ReadStdLogs is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) ReadStdLogs(ctx context.Context, in *jobs.ReadProjectJobStdLogsRequest, opts ...grpc.CallOption) (jobs.ProjectJobService_ReadStdLogsClient, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobReadStdLogs, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).ReadStdLogs(ctx, in, opts...)
}

// ReadLogs is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) ReadLogs(ctx context.Context, in *jobs.ReadProjectJobLogsRequest, opts ...grpc.CallOption) (jobs.ProjectJobService_ReadLogsClient, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobReadLogs, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).ReadLogs(ctx, in, opts...)
}

// DownloadJobFiles is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) DownloadJobFiles(ctx context.Context, in *jobs.DownloadProjectJobFilesRequest, opts ...grpc.CallOption) (*jobs.DownloadProjectJobFilesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobDownloadJobFiles, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).DownloadJobFiles(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) List(ctx context.Context, in *jobs.ListProjectJobRequest, opts ...grpc.CallOption) (*jobs.ListProjectJobResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobList, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).List(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) Get(ctx context.Context, in *jobs.GetProjectJobRequest, opts ...grpc.CallOption) (*jobs.Job, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobGet, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).Get(ctx, in, opts...)
}

// ProjectJobDeleteOperation is used to monitor the state of Delete operations.
type ProjectJobDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobDeleteOperation) Metadata() *jobs.DeleteProjectJobMetadata {
	return o.Operation.Metadata().(*jobs.DeleteProjectJobMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectJobDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) Delete(ctx context.Context, in *jobs.DeleteProjectJobRequest, opts ...grpc.CallOption) (*ProjectJobDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.DeleteProjectJobMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobDeleteOperation{*op}, nil
}

// ProjectJobDeleteDataOperation is used to monitor the state of DeleteData operations.
type ProjectJobDeleteDataOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobDeleteDataOperation) Metadata() *jobs.DeleteProjectJobDataMetadata {
	return o.Operation.Metadata().(*jobs.DeleteProjectJobDataMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobDeleteDataOperation) Response() *jobs.DeleteProjectJobDataResponse {
	return o.Operation.Response().(*jobs.DeleteProjectJobDataResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectJobDeleteDataOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*jobs.DeleteProjectJobDataResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*jobs.DeleteProjectJobDataResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobDeleteDataOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*jobs.DeleteProjectJobDataResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*jobs.DeleteProjectJobDataResponse)
	return response, err
}

// DeleteData is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) DeleteData(ctx context.Context, in *jobs.DeleteProjectJobDataRequest, opts ...grpc.CallOption) (*ProjectJobDeleteDataOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobDeleteData, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).DeleteData(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.DeleteProjectJobDataMetadata)(nil),
		ResponseType: (*jobs.DeleteProjectJobDataResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobDeleteDataOperation{*op}, nil
}

// ProjectJobDeleteAllDataOperation is used to monitor the state of DeleteAllData operations.
type ProjectJobDeleteAllDataOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectJobDeleteAllDataOperation) Metadata() *jobs.DeleteAllProjectJobDataMetadata {
	return o.Operation.Metadata().(*jobs.DeleteAllProjectJobDataMetadata)
}

// Response retrieves the operation response.
func (o *ProjectJobDeleteAllDataOperation) Response() *jobs.DeleteAllProjectJobDataResponse {
	return o.Operation.Response().(*jobs.DeleteAllProjectJobDataResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectJobDeleteAllDataOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*jobs.DeleteAllProjectJobDataResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*jobs.DeleteAllProjectJobDataResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectJobDeleteAllDataOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*jobs.DeleteAllProjectJobDataResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*jobs.DeleteAllProjectJobDataResponse)
	return response, err
}

// DeleteAllData is an operation of Yandex.Cloud Jobs ProjectJob service.
// It returns an object which should be used to monitor the operation state.
func (c projectJobClient) DeleteAllData(ctx context.Context, in *jobs.DeleteAllProjectJobDataRequest, opts ...grpc.CallOption) (*ProjectJobDeleteAllDataOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobDeleteAllData, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := jobs.NewProjectJobServiceClient(connection).DeleteAllData(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*jobs.DeleteAllProjectJobDataMetadata)(nil),
		ResponseType: (*jobs.DeleteAllProjectJobDataResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectJobDeleteAllDataOperation{*op}, nil
}

// SetDataTtl is an operation of Yandex.Cloud Jobs ProjectJob service.
func (c projectJobClient) SetDataTtl(ctx context.Context, in *jobs.SetProjectJobDataTtlRequest, opts ...grpc.CallOption) (*jobs.SetProjectJobDataTtlResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobSetDataTtl, opts...)
	if err != nil {
		return nil, err
	}
	return jobs.NewProjectJobServiceClient(connection).SetDataTtl(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c projectJobClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectJobOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ProjectJobCreate           = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Create")
	ProjectJobClone            = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Clone")
	ProjectJobExecute          = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Execute")
	ProjectJobCancel           = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Cancel")
	ProjectJobReadStdLogs      = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.ReadStdLogs")
	ProjectJobReadLogs         = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.ReadLogs")
	ProjectJobDownloadJobFiles = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.DownloadJobFiles")
	ProjectJobList             = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.List")
	ProjectJobGet              = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Get")
	ProjectJobDelete           = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.Delete")
	ProjectJobDeleteData       = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.DeleteData")
	ProjectJobDeleteAllData    = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.DeleteAllData")
	ProjectJobSetDataTtl       = protoreflect.FullName("yandex.cloud.datasphere.v2.jobs.ProjectJobService.SetDataTtl")
	ProjectJobOperationPoller  = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
