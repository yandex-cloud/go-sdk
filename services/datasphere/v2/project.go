// Code generated by sdkgen-v2. DO NOT EDIT.
package dataspheresdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	datasphere "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// ProjectClient provides methods for managing Project resources of Yandex.Cloud Datasphere.
type ProjectClient interface {
	Create(context.Context, *datasphere.CreateProjectRequest, ...grpc.CallOption) (*ProjectCreateOperation, error)
	Update(context.Context, *datasphere.UpdateProjectRequest, ...grpc.CallOption) (*ProjectUpdateOperation, error)
	Delete(context.Context, *datasphere.DeleteProjectRequest, ...grpc.CallOption) (*ProjectDeleteOperation, error)
	Open(context.Context, *datasphere.OpenProjectRequest, ...grpc.CallOption) (*ProjectOpenOperation, error)
	Get(context.Context, *datasphere.GetProjectRequest, ...grpc.CallOption) (*datasphere.Project, error)
	List(context.Context, *datasphere.ListProjectsRequest, ...grpc.CallOption) (*datasphere.ListProjectsResponse, error)
	GetUnitBalance(context.Context, *datasphere.GetUnitBalanceRequest, ...grpc.CallOption) (*datasphere.GetUnitBalanceResponse, error)
	SetUnitBalance(context.Context, *datasphere.SetUnitBalanceRequest, ...grpc.CallOption) (*ProjectSetUnitBalanceOperation, error)
	Execute(context.Context, *datasphere.ProjectExecutionRequest, ...grpc.CallOption) (*ProjectExecuteOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*ProjectSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*ProjectUpdateAccessBindingsOperation, error)
	AddResource(context.Context, *datasphere.AddResourceToProjectRequest, ...grpc.CallOption) (*ProjectAddResourceOperation, error)
	RemoveResource(context.Context, *datasphere.RemoveResourceFromProjectRequest, ...grpc.CallOption) (*ProjectRemoveResourceOperation, error)
	ResizeDisk(context.Context, *datasphere.ResizeProjectDiskRequest, ...grpc.CallOption) (*ProjectResizeDiskOperation, error)
	GetRestrictionsMeta(context.Context, *emptypb.Empty, ...grpc.CallOption) (*datasphere.GetRestrictionsMetaResponse, error)
	GetRestrictions(context.Context, *datasphere.GetProjectRestrictionsRequest, ...grpc.CallOption) (*datasphere.RestrictionsResponse, error)
	SetRestrictions(context.Context, *datasphere.SetProjectRestrictionsRequest, ...grpc.CallOption) (*ProjectSetRestrictionsOperation, error)
}

var _ ProjectClient = projectClient{}

type projectClient struct {
	connector transport.Connector
}

// NewProjectClient returns ProjectClient implementation.
func NewProjectClient(connector transport.Connector) ProjectClient {
	return projectClient{connector}
}

// ProjectCreateOperation is used to monitor the state of Create operations.
type ProjectCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectCreateOperation) Metadata() *datasphere.CreateProjectMetadata {
	return o.Operation.Metadata().(*datasphere.CreateProjectMetadata)
}

// Response retrieves the operation response.
func (o *ProjectCreateOperation) Response() *datasphere.Project {
	return o.Operation.Response().(*datasphere.Project)
}

// Wait polls the operation until it's done.
func (o *ProjectCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.Project, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.Project)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.Project, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.Project)
	return response, err
}

// Create is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) Create(ctx context.Context, in *datasphere.CreateProjectRequest, opts ...grpc.CallOption) (*ProjectCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.CreateProjectMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.CreateProjectMetadata)(nil),
		ResponseType: (*datasphere.Project)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectCreateOperation{*op}, nil
}

// ProjectUpdateOperation is used to monitor the state of Update operations.
type ProjectUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectUpdateOperation) Metadata() *datasphere.UpdateProjectMetadata {
	return o.Operation.Metadata().(*datasphere.UpdateProjectMetadata)
}

// Response retrieves the operation response.
func (o *ProjectUpdateOperation) Response() *datasphere.Project {
	return o.Operation.Response().(*datasphere.Project)
}

// Wait polls the operation until it's done.
func (o *ProjectUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.Project, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.Project)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.Project, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.Project)
	return response, err
}

// Update is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) Update(ctx context.Context, in *datasphere.UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.UpdateProjectMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.UpdateProjectMetadata)(nil),
		ResponseType: (*datasphere.Project)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectUpdateOperation{*op}, nil
}

// ProjectDeleteOperation is used to monitor the state of Delete operations.
type ProjectDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectDeleteOperation) Metadata() *datasphere.DeleteProjectMetadata {
	return o.Operation.Metadata().(*datasphere.DeleteProjectMetadata)
}

// Response retrieves the operation response.
func (o *ProjectDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) Delete(ctx context.Context, in *datasphere.DeleteProjectRequest, opts ...grpc.CallOption) (*ProjectDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.DeleteProjectMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.DeleteProjectMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectDeleteOperation{*op}, nil
}

// ProjectOpenOperation is used to monitor the state of Open operations.
type ProjectOpenOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectOpenOperation) Metadata() *datasphere.OpenProjectMetadata {
	return o.Operation.Metadata().(*datasphere.OpenProjectMetadata)
}

// Response retrieves the operation response.
func (o *ProjectOpenOperation) Response() *datasphere.OpenProjectResponse {
	return o.Operation.Response().(*datasphere.OpenProjectResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectOpenOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.OpenProjectResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.OpenProjectResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectOpenOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.OpenProjectResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.OpenProjectResponse)
	return response, err
}

// Open is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) Open(ctx context.Context, in *datasphere.OpenProjectRequest, opts ...grpc.CallOption) (*ProjectOpenOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectOpen, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).Open(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.OpenProjectMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.OpenProjectMetadata)(nil),
		ResponseType: (*datasphere.OpenProjectResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectOpenOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) Get(ctx context.Context, in *datasphere.GetProjectRequest, opts ...grpc.CallOption) (*datasphere.Project, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectGet, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) List(ctx context.Context, in *datasphere.ListProjectsRequest, opts ...grpc.CallOption) (*datasphere.ListProjectsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectList, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).List(ctx, in, opts...)
}

// GetUnitBalance is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) GetUnitBalance(ctx context.Context, in *datasphere.GetUnitBalanceRequest, opts ...grpc.CallOption) (*datasphere.GetUnitBalanceResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectGetUnitBalance, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).GetUnitBalance(ctx, in, opts...)
}

// ProjectSetUnitBalanceOperation is used to monitor the state of SetUnitBalance operations.
type ProjectSetUnitBalanceOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectSetUnitBalanceOperation) Metadata() *datasphere.SetUnitBalanceMetadata {
	return o.Operation.Metadata().(*datasphere.SetUnitBalanceMetadata)
}

// Response retrieves the operation response.
func (o *ProjectSetUnitBalanceOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectSetUnitBalanceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectSetUnitBalanceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetUnitBalance is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) SetUnitBalance(ctx context.Context, in *datasphere.SetUnitBalanceRequest, opts ...grpc.CallOption) (*ProjectSetUnitBalanceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectSetUnitBalance, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).SetUnitBalance(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.SetUnitBalanceMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.SetUnitBalanceMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectSetUnitBalanceOperation{*op}, nil
}

// ProjectExecuteOperation is used to monitor the state of Execute operations.
type ProjectExecuteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectExecuteOperation) Metadata() *datasphere.ProjectExecutionMetadata {
	return o.Operation.Metadata().(*datasphere.ProjectExecutionMetadata)
}

// Response retrieves the operation response.
func (o *ProjectExecuteOperation) Response() *datasphere.ProjectExecutionResponse {
	return o.Operation.Response().(*datasphere.ProjectExecutionResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectExecuteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.ProjectExecutionResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.ProjectExecutionResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectExecuteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.ProjectExecutionResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.ProjectExecutionResponse)
	return response, err
}

// Execute is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) Execute(ctx context.Context, in *datasphere.ProjectExecutionRequest, opts ...grpc.CallOption) (*ProjectExecuteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectExecute, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).Execute(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.ProjectExecutionMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.ProjectExecutionMetadata)(nil),
		ResponseType: (*datasphere.ProjectExecutionResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectExecuteOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// ProjectSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type ProjectSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectSetAccessBindingsOperation) Metadata() *datasphere.SetProjectAccessBindingsMetadata {
	return o.Operation.Metadata().(*datasphere.SetProjectAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ProjectSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*ProjectSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.SetProjectAccessBindingsMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.SetProjectAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectSetAccessBindingsOperation{*op}, nil
}

// ProjectUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type ProjectUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectUpdateAccessBindingsOperation) Metadata() *datasphere.UpdateProjectAccessBindingsMetadata {
	return o.Operation.Metadata().(*datasphere.UpdateProjectAccessBindingsMetadata)
}

// Response retrieves the operation response.
func (o *ProjectUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*ProjectUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.UpdateProjectAccessBindingsMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.UpdateProjectAccessBindingsMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectUpdateAccessBindingsOperation{*op}, nil
}

// ProjectAddResourceOperation is used to monitor the state of AddResource operations.
type ProjectAddResourceOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ProjectAddResourceOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectAddResourceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectAddResourceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// AddResource is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) AddResource(ctx context.Context, in *datasphere.AddResourceToProjectRequest, opts ...grpc.CallOption) (*ProjectAddResourceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectAddResource, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).AddResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectAddResourceOperation{*op}, nil
}

// ProjectRemoveResourceOperation is used to monitor the state of RemoveResource operations.
type ProjectRemoveResourceOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ProjectRemoveResourceOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *ProjectRemoveResourceOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectRemoveResourceOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RemoveResource is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) RemoveResource(ctx context.Context, in *datasphere.RemoveResourceFromProjectRequest, opts ...grpc.CallOption) (*ProjectRemoveResourceOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectRemoveResource, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).RemoveResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectRemoveResourceOperation{*op}, nil
}

// ProjectResizeDiskOperation is used to monitor the state of ResizeDisk operations.
type ProjectResizeDiskOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *ProjectResizeDiskOperation) Metadata() *datasphere.ResizeProjectDiskMetadata {
	return o.Operation.Metadata().(*datasphere.ResizeProjectDiskMetadata)
}

// Response retrieves the operation response.
func (o *ProjectResizeDiskOperation) Response() *datasphere.DiskInfo {
	return o.Operation.Response().(*datasphere.DiskInfo)
}

// Wait polls the operation until it's done.
func (o *ProjectResizeDiskOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.DiskInfo, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.DiskInfo)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectResizeDiskOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.DiskInfo, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.DiskInfo)
	return response, err
}

// ResizeDisk is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) ResizeDisk(ctx context.Context, in *datasphere.ResizeProjectDiskRequest, opts ...grpc.CallOption) (*ProjectResizeDiskOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectResizeDisk, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).ResizeDisk(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*datasphere.ResizeProjectDiskMetadata).GetProjectId()
		},
		MetadataType: (*datasphere.ResizeProjectDiskMetadata)(nil),
		ResponseType: (*datasphere.DiskInfo)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectResizeDiskOperation{*op}, nil
}

// GetRestrictionsMeta is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) GetRestrictionsMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*datasphere.GetRestrictionsMetaResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectGetRestrictionsMeta, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).GetRestrictionsMeta(ctx, in, opts...)
}

// GetRestrictions is an operation of Yandex.Cloud Datasphere Project service.
func (c projectClient) GetRestrictions(ctx context.Context, in *datasphere.GetProjectRestrictionsRequest, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectGetRestrictions, opts...)
	if err != nil {
		return nil, err
	}
	return datasphere.NewProjectServiceClient(connection).GetRestrictions(ctx, in, opts...)
}

// ProjectSetRestrictionsOperation is used to monitor the state of SetRestrictions operations.
type ProjectSetRestrictionsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *ProjectSetRestrictionsOperation) Response() *datasphere.RestrictionsResponse {
	return o.Operation.Response().(*datasphere.RestrictionsResponse)
}

// Wait polls the operation until it's done.
func (o *ProjectSetRestrictionsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*datasphere.RestrictionsResponse)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *ProjectSetRestrictionsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*datasphere.RestrictionsResponse, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*datasphere.RestrictionsResponse)
	return response, err
}

// SetRestrictions is an operation of Yandex.Cloud Datasphere Project service.
// It returns an object which should be used to monitor the operation state.
func (c projectClient) SetRestrictions(ctx context.Context, in *datasphere.SetProjectRestrictionsRequest, opts ...grpc.CallOption) (*ProjectSetRestrictionsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectSetRestrictions, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := datasphere.NewProjectServiceClient(connection).SetRestrictions(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*datasphere.RestrictionsResponse)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &ProjectSetRestrictionsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c projectClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, ProjectOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	ProjectCreate               = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Create")
	ProjectUpdate               = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Update")
	ProjectDelete               = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Delete")
	ProjectOpen                 = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Open")
	ProjectGet                  = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Get")
	ProjectList                 = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.List")
	ProjectGetUnitBalance       = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.GetUnitBalance")
	ProjectSetUnitBalance       = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.SetUnitBalance")
	ProjectExecute              = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.Execute")
	ProjectListAccessBindings   = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.ListAccessBindings")
	ProjectSetAccessBindings    = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.SetAccessBindings")
	ProjectUpdateAccessBindings = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.UpdateAccessBindings")
	ProjectAddResource          = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.AddResource")
	ProjectRemoveResource       = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.RemoveResource")
	ProjectResizeDisk           = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.ResizeDisk")
	ProjectGetRestrictionsMeta  = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.GetRestrictionsMeta")
	ProjectGetRestrictions      = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.GetRestrictions")
	ProjectSetRestrictions      = protoreflect.FullName("yandex.cloud.datasphere.v2.ProjectService.SetRestrictions")
	ProjectOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
