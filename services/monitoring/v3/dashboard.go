// Code generated by sdkgen-v2. DO NOT EDIT.
package monitoringsdk

import (
	"context"

	monitoring "github.com/yandex-cloud/go-genproto/yandex/cloud/monitoring/v3"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DashboardClient provides methods for managing Dashboard resources of Yandex.Cloud Monitoring.
type DashboardClient interface {
	Get(context.Context, *monitoring.GetDashboardRequest, ...grpc.CallOption) (*monitoring.Dashboard, error)
	List(context.Context, *monitoring.ListDashboardsRequest, ...grpc.CallOption) (*monitoring.ListDashboardsResponse, error)
	Create(context.Context, *monitoring.CreateDashboardRequest, ...grpc.CallOption) (*DashboardCreateOperation, error)
	Update(context.Context, *monitoring.UpdateDashboardRequest, ...grpc.CallOption) (*DashboardUpdateOperation, error)
	Delete(context.Context, *monitoring.DeleteDashboardRequest, ...grpc.CallOption) (*DashboardDeleteOperation, error)
	ListOperations(context.Context, *monitoring.ListDashboardOperationsRequest, ...grpc.CallOption) (*monitoring.ListDashboardOperationsResponse, error)
}

var _ DashboardClient = dashboardClient{}

type dashboardClient struct {
	connector transport.Connector
}

// NewDashboardClient returns DashboardClient implementation.
func NewDashboardClient(connector transport.Connector) DashboardClient {
	return dashboardClient{connector}
}

// Get is an operation of Yandex.Cloud Monitoring Dashboard service.
func (c dashboardClient) Get(ctx context.Context, in *monitoring.GetDashboardRequest, opts ...grpc.CallOption) (*monitoring.Dashboard, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardGet, opts...)
	if err != nil {
		return nil, err
	}
	return monitoring.NewDashboardServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Monitoring Dashboard service.
func (c dashboardClient) List(ctx context.Context, in *monitoring.ListDashboardsRequest, opts ...grpc.CallOption) (*monitoring.ListDashboardsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardList, opts...)
	if err != nil {
		return nil, err
	}
	return monitoring.NewDashboardServiceClient(connection).List(ctx, in, opts...)
}

// DashboardCreateOperation is used to monitor the state of Create operations.
type DashboardCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DashboardCreateOperation) Metadata() *monitoring.CreateDashboardMetadata {
	return o.Operation.Metadata().(*monitoring.CreateDashboardMetadata)
}

// Response retrieves the operation response.
func (o *DashboardCreateOperation) Response() *monitoring.Dashboard {
	return o.Operation.Response().(*monitoring.Dashboard)
}

// Wait polls the operation until it's done.
func (o *DashboardCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*monitoring.Dashboard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*monitoring.Dashboard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DashboardCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*monitoring.Dashboard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*monitoring.Dashboard)
	return response, err
}

// Create is an operation of Yandex.Cloud Monitoring Dashboard service.
// It returns an object which should be used to monitor the operation state.
func (c dashboardClient) Create(ctx context.Context, in *monitoring.CreateDashboardRequest, opts ...grpc.CallOption) (*DashboardCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := monitoring.NewDashboardServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*monitoring.CreateDashboardMetadata).GetDashboardId()
		},
		MetadataType: (*monitoring.CreateDashboardMetadata)(nil),
		ResponseType: (*monitoring.Dashboard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DashboardCreateOperation{*op}, nil
}

// DashboardUpdateOperation is used to monitor the state of Update operations.
type DashboardUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DashboardUpdateOperation) Metadata() *monitoring.UpdateDashboardMetadata {
	return o.Operation.Metadata().(*monitoring.UpdateDashboardMetadata)
}

// Response retrieves the operation response.
func (o *DashboardUpdateOperation) Response() *monitoring.Dashboard {
	return o.Operation.Response().(*monitoring.Dashboard)
}

// Wait polls the operation until it's done.
func (o *DashboardUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*monitoring.Dashboard, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*monitoring.Dashboard)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DashboardUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*monitoring.Dashboard, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*monitoring.Dashboard)
	return response, err
}

// Update is an operation of Yandex.Cloud Monitoring Dashboard service.
// It returns an object which should be used to monitor the operation state.
func (c dashboardClient) Update(ctx context.Context, in *monitoring.UpdateDashboardRequest, opts ...grpc.CallOption) (*DashboardUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := monitoring.NewDashboardServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*monitoring.UpdateDashboardMetadata).GetDashboardId()
		},
		MetadataType: (*monitoring.UpdateDashboardMetadata)(nil),
		ResponseType: (*monitoring.Dashboard)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DashboardUpdateOperation{*op}, nil
}

// DashboardDeleteOperation is used to monitor the state of Delete operations.
type DashboardDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *DashboardDeleteOperation) Metadata() *monitoring.DeleteDashboardMetadata {
	return o.Operation.Metadata().(*monitoring.DeleteDashboardMetadata)
}

// Response retrieves the operation response.
func (o *DashboardDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *DashboardDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *DashboardDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Monitoring Dashboard service.
// It returns an object which should be used to monitor the operation state.
func (c dashboardClient) Delete(ctx context.Context, in *monitoring.DeleteDashboardRequest, opts ...grpc.CallOption) (*DashboardDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := monitoring.NewDashboardServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*monitoring.DeleteDashboardMetadata).GetDashboardId()
		},
		MetadataType: (*monitoring.DeleteDashboardMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &DashboardDeleteOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Monitoring Dashboard service.
func (c dashboardClient) ListOperations(ctx context.Context, in *monitoring.ListDashboardOperationsRequest, opts ...grpc.CallOption) (*monitoring.ListDashboardOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return monitoring.NewDashboardServiceClient(connection).ListOperations(ctx, in, opts...)
}

// pollOperation returns the current state of the polled operation.
func (c dashboardClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, DashboardOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	DashboardGet             = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.Get")
	DashboardList            = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.List")
	DashboardCreate          = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.Create")
	DashboardUpdate          = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.Update")
	DashboardDelete          = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.Delete")
	DashboardListOperations  = protoreflect.FullName("yandex.cloud.monitoring.v3.DashboardService.ListOperations")
	DashboardOperationPoller = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
