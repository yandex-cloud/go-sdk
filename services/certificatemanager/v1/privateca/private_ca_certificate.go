// Code generated by sdkgen-v2. DO NOT EDIT.
package privatecasdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	privateca "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1/privateca"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateCaCertificateClient provides methods for managing PrivateCaCertificate resources of Yandex.Cloud Privateca.
type PrivateCaCertificateClient interface {
	IssueCertificate(context.Context, *privateca.IssueCertificateRequest, ...grpc.CallOption) (*PrivateCaCertificateIssueCertificateOperation, error)
	IssueCertificateByCsr(context.Context, *privateca.IssueCertificateByCsrRequest, ...grpc.CallOption) (*PrivateCaCertificateIssueCertificateByCsrOperation, error)
	Update(context.Context, *privateca.UpdateCertificateRequest, ...grpc.CallOption) (*PrivateCaCertificateUpdateOperation, error)
	Delete(context.Context, *privateca.DeleteCertificateRequest, ...grpc.CallOption) (*PrivateCaCertificateDeleteOperation, error)
	Get(context.Context, *privateca.GetCertificateRequest, ...grpc.CallOption) (*privateca.PrivateCertificate, error)
	List(context.Context, *privateca.ListCertificatesRequest, ...grpc.CallOption) (*privateca.ListCertificatesResponse, error)
	RevokeCertificate(context.Context, *privateca.RevokeCertificateRequest, ...grpc.CallOption) (*PrivateCaCertificateRevokeCertificateOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*PrivateCaCertificateSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*PrivateCaCertificateUpdateAccessBindingsOperation, error)
}

var _ PrivateCaCertificateClient = privateCaCertificateClient{}

type privateCaCertificateClient struct {
	connector transport.Connector
}

// NewPrivateCaCertificateClient returns PrivateCaCertificateClient implementation.
func NewPrivateCaCertificateClient(connector transport.Connector) PrivateCaCertificateClient {
	return privateCaCertificateClient{connector}
}

// PrivateCaCertificateIssueCertificateOperation is used to monitor the state of IssueCertificate operations.
type PrivateCaCertificateIssueCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaCertificateIssueCertificateOperation) Metadata() *privateca.IssueCertificateMetadata {
	return o.Operation.Metadata().(*privateca.IssueCertificateMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateIssueCertificateOperation) Response() *privateca.PrivateCertificate {
	return o.Operation.Response().(*privateca.PrivateCertificate)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateIssueCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateIssueCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// IssueCertificate is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) IssueCertificate(ctx context.Context, in *privateca.IssueCertificateRequest, opts ...grpc.CallOption) (*PrivateCaCertificateIssueCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateIssueCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).IssueCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.IssueCertificateMetadata)(nil),
		ResponseType: (*privateca.PrivateCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateIssueCertificateOperation{*op}, nil
}

// PrivateCaCertificateIssueCertificateByCsrOperation is used to monitor the state of IssueCertificateByCsr operations.
type PrivateCaCertificateIssueCertificateByCsrOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaCertificateIssueCertificateByCsrOperation) Metadata() *privateca.IssueCertificateByCsrMetadata {
	return o.Operation.Metadata().(*privateca.IssueCertificateByCsrMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateIssueCertificateByCsrOperation) Response() *privateca.PrivateCertificate {
	return o.Operation.Response().(*privateca.PrivateCertificate)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateIssueCertificateByCsrOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateIssueCertificateByCsrOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// IssueCertificateByCsr is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) IssueCertificateByCsr(ctx context.Context, in *privateca.IssueCertificateByCsrRequest, opts ...grpc.CallOption) (*PrivateCaCertificateIssueCertificateByCsrOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateIssueCertificateByCsr, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).IssueCertificateByCsr(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.IssueCertificateByCsrMetadata)(nil),
		ResponseType: (*privateca.PrivateCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateIssueCertificateByCsrOperation{*op}, nil
}

// PrivateCaCertificateUpdateOperation is used to monitor the state of Update operations.
type PrivateCaCertificateUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaCertificateUpdateOperation) Metadata() *privateca.UpdateCertificateMetadata {
	return o.Operation.Metadata().(*privateca.UpdateCertificateMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateUpdateOperation) Response() *privateca.PrivateCertificate {
	return o.Operation.Response().(*privateca.PrivateCertificate)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.PrivateCertificate)
	return response, err
}

// Update is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) Update(ctx context.Context, in *privateca.UpdateCertificateRequest, opts ...grpc.CallOption) (*PrivateCaCertificateUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.UpdateCertificateMetadata)(nil),
		ResponseType: (*privateca.PrivateCertificate)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateUpdateOperation{*op}, nil
}

// PrivateCaCertificateDeleteOperation is used to monitor the state of Delete operations.
type PrivateCaCertificateDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaCertificateDeleteOperation) Metadata() *privateca.DeleteCertificateMetadata {
	return o.Operation.Metadata().(*privateca.DeleteCertificateMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) Delete(ctx context.Context, in *privateca.DeleteCertificateRequest, opts ...grpc.CallOption) (*PrivateCaCertificateDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.DeleteCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
func (c privateCaCertificateClient) Get(ctx context.Context, in *privateca.GetCertificateRequest, opts ...grpc.CallOption) (*privateca.PrivateCertificate, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateGet, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaCertificateServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
func (c privateCaCertificateClient) List(ctx context.Context, in *privateca.ListCertificatesRequest, opts ...grpc.CallOption) (*privateca.ListCertificatesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateList, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaCertificateServiceClient(connection).List(ctx, in, opts...)
}

// PrivateCaCertificateRevokeCertificateOperation is used to monitor the state of RevokeCertificate operations.
type PrivateCaCertificateRevokeCertificateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaCertificateRevokeCertificateOperation) Metadata() *privateca.RevokeCertificateMetadata {
	return o.Operation.Metadata().(*privateca.RevokeCertificateMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateRevokeCertificateOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateRevokeCertificateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateRevokeCertificateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// RevokeCertificate is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) RevokeCertificate(ctx context.Context, in *privateca.RevokeCertificateRequest, opts ...grpc.CallOption) (*PrivateCaCertificateRevokeCertificateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateRevokeCertificate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).RevokeCertificate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.RevokeCertificateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateRevokeCertificateOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
func (c privateCaCertificateClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaCertificateServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// PrivateCaCertificateSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type PrivateCaCertificateSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*PrivateCaCertificateSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateSetAccessBindingsOperation{*op}, nil
}

// PrivateCaCertificateUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type PrivateCaCertificateUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PrivateCaCertificateUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaCertificateUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaCertificateUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Privateca PrivateCaCertificate service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaCertificateClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*PrivateCaCertificateUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaCertificateServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaCertificateUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c privateCaCertificateClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateCaCertificateIssueCertificate      = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.IssueCertificate")
	PrivateCaCertificateIssueCertificateByCsr = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.IssueCertificateByCsr")
	PrivateCaCertificateUpdate                = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.Update")
	PrivateCaCertificateDelete                = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.Delete")
	PrivateCaCertificateGet                   = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.Get")
	PrivateCaCertificateList                  = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.List")
	PrivateCaCertificateRevokeCertificate     = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.RevokeCertificate")
	PrivateCaCertificateListAccessBindings    = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.ListAccessBindings")
	PrivateCaCertificateSetAccessBindings     = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.SetAccessBindings")
	PrivateCaCertificateUpdateAccessBindings  = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateService.UpdateAccessBindings")
	PrivateCaCertificateOperationPoller       = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
