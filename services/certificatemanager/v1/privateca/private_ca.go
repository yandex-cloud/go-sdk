// Code generated by sdkgen-v2. DO NOT EDIT.
package privatecasdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	privateca "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1/privateca"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PrivateCaClient provides methods for managing PrivateCa resources of Yandex.Cloud Privateca.
type PrivateCaClient interface {
	GenerateCertificateAuthority(context.Context, *privateca.GenerateCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaGenerateCertificateAuthorityOperation, error)
	GenerateCertificateAuthorityByCsr(context.Context, *privateca.GenerateCertificateAuthorityByCsrRequest, ...grpc.CallOption) (*PrivateCaGenerateCertificateAuthorityByCsrOperation, error)
	ImportCertificateAuthority(context.Context, *privateca.ImportCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaImportCertificateAuthorityOperation, error)
	GenerateCsrForCertificateAuthority(context.Context, *privateca.GenerateCsrForCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaGenerateCsrForCertificateAuthorityOperation, error)
	SendSignedCertificateOfCertificateAuthority(context.Context, *privateca.SendSignedCertificateOfCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaSendSignedCertificateOfCertificateAuthorityOperation, error)
	Delete(context.Context, *privateca.DeleteCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaDeleteOperation, error)
	GetCsrForCertificateAuthority(context.Context, *privateca.GetCsrForCertificateAuthorityRequest, ...grpc.CallOption) (*privateca.CsrForSignCertificateAuthority, error)
	Get(context.Context, *privateca.GetCertificateAuthorityRequest, ...grpc.CallOption) (*privateca.CertificateAuthority, error)
	List(context.Context, *privateca.ListCertificateAuthoritiesRequest, ...grpc.CallOption) (*privateca.ListCertificateAuthoritiesResponse, error)
	Update(context.Context, *privateca.UpdateCertificateAuthorityRequest, ...grpc.CallOption) (*PrivateCaUpdateOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*PrivateCaSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*PrivateCaUpdateAccessBindingsOperation, error)
}

var _ PrivateCaClient = privateCaClient{}

type privateCaClient struct {
	connector transport.Connector
}

// NewPrivateCaClient returns PrivateCaClient implementation.
func NewPrivateCaClient(connector transport.Connector) PrivateCaClient {
	return privateCaClient{connector}
}

// PrivateCaGenerateCertificateAuthorityOperation is used to monitor the state of GenerateCertificateAuthority operations.
type PrivateCaGenerateCertificateAuthorityOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaGenerateCertificateAuthorityOperation) Metadata() *privateca.GenerateCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.GenerateCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaGenerateCertificateAuthorityOperation) Response() *privateca.CertificateAuthority {
	return o.Operation.Response().(*privateca.CertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaGenerateCertificateAuthorityOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaGenerateCertificateAuthorityOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// GenerateCertificateAuthority is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) GenerateCertificateAuthority(ctx context.Context, in *privateca.GenerateCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaGenerateCertificateAuthorityOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaGenerateCertificateAuthority, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).GenerateCertificateAuthority(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.GenerateCertificateAuthorityMetadata)(nil),
		ResponseType: (*privateca.CertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaGenerateCertificateAuthorityOperation{*op}, nil
}

// PrivateCaGenerateCertificateAuthorityByCsrOperation is used to monitor the state of GenerateCertificateAuthorityByCsr operations.
type PrivateCaGenerateCertificateAuthorityByCsrOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaGenerateCertificateAuthorityByCsrOperation) Metadata() *privateca.GenerateCertificateAuthorityByCsrMetadata {
	return o.Operation.Metadata().(*privateca.GenerateCertificateAuthorityByCsrMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaGenerateCertificateAuthorityByCsrOperation) Response() *privateca.CertificateAuthority {
	return o.Operation.Response().(*privateca.CertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaGenerateCertificateAuthorityByCsrOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaGenerateCertificateAuthorityByCsrOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// GenerateCertificateAuthorityByCsr is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) GenerateCertificateAuthorityByCsr(ctx context.Context, in *privateca.GenerateCertificateAuthorityByCsrRequest, opts ...grpc.CallOption) (*PrivateCaGenerateCertificateAuthorityByCsrOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaGenerateCertificateAuthorityByCsr, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).GenerateCertificateAuthorityByCsr(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.GenerateCertificateAuthorityByCsrMetadata)(nil),
		ResponseType: (*privateca.CertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaGenerateCertificateAuthorityByCsrOperation{*op}, nil
}

// PrivateCaImportCertificateAuthorityOperation is used to monitor the state of ImportCertificateAuthority operations.
type PrivateCaImportCertificateAuthorityOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaImportCertificateAuthorityOperation) Metadata() *privateca.ImportCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.ImportCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaImportCertificateAuthorityOperation) Response() *privateca.CertificateAuthority {
	return o.Operation.Response().(*privateca.CertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaImportCertificateAuthorityOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaImportCertificateAuthorityOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// ImportCertificateAuthority is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) ImportCertificateAuthority(ctx context.Context, in *privateca.ImportCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaImportCertificateAuthorityOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaImportCertificateAuthority, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).ImportCertificateAuthority(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.ImportCertificateAuthorityMetadata)(nil),
		ResponseType: (*privateca.CertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaImportCertificateAuthorityOperation{*op}, nil
}

// PrivateCaGenerateCsrForCertificateAuthorityOperation is used to monitor the state of GenerateCsrForCertificateAuthority operations.
type PrivateCaGenerateCsrForCertificateAuthorityOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaGenerateCsrForCertificateAuthorityOperation) Metadata() *privateca.GenerateCsrForCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.GenerateCsrForCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaGenerateCsrForCertificateAuthorityOperation) Response() *privateca.CsrForSignCertificateAuthority {
	return o.Operation.Response().(*privateca.CsrForSignCertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaGenerateCsrForCertificateAuthorityOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CsrForSignCertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CsrForSignCertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaGenerateCsrForCertificateAuthorityOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CsrForSignCertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CsrForSignCertificateAuthority)
	return response, err
}

// GenerateCsrForCertificateAuthority is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) GenerateCsrForCertificateAuthority(ctx context.Context, in *privateca.GenerateCsrForCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaGenerateCsrForCertificateAuthorityOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaGenerateCsrForCertificateAuthority, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).GenerateCsrForCertificateAuthority(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.GenerateCsrForCertificateAuthorityMetadata)(nil),
		ResponseType: (*privateca.CsrForSignCertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaGenerateCsrForCertificateAuthorityOperation{*op}, nil
}

// PrivateCaSendSignedCertificateOfCertificateAuthorityOperation is used to monitor the state of SendSignedCertificateOfCertificateAuthority operations.
type PrivateCaSendSignedCertificateOfCertificateAuthorityOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaSendSignedCertificateOfCertificateAuthorityOperation) Metadata() *privateca.SendSignedCertificateOfCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.SendSignedCertificateOfCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaSendSignedCertificateOfCertificateAuthorityOperation) Response() *privateca.CertificateAuthority {
	return o.Operation.Response().(*privateca.CertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaSendSignedCertificateOfCertificateAuthorityOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaSendSignedCertificateOfCertificateAuthorityOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// SendSignedCertificateOfCertificateAuthority is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) SendSignedCertificateOfCertificateAuthority(ctx context.Context, in *privateca.SendSignedCertificateOfCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaSendSignedCertificateOfCertificateAuthorityOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaSendSignedCertificateOfCertificateAuthority, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).SendSignedCertificateOfCertificateAuthority(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.SendSignedCertificateOfCertificateAuthorityMetadata)(nil),
		ResponseType: (*privateca.CertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaSendSignedCertificateOfCertificateAuthorityOperation{*op}, nil
}

// PrivateCaDeleteOperation is used to monitor the state of Delete operations.
type PrivateCaDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaDeleteOperation) Metadata() *privateca.DeleteCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.DeleteCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) Delete(ctx context.Context, in *privateca.DeleteCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.DeleteCertificateAuthorityMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaDeleteOperation{*op}, nil
}

// GetCsrForCertificateAuthority is an operation of Yandex.Cloud Privateca PrivateCa service.
func (c privateCaClient) GetCsrForCertificateAuthority(ctx context.Context, in *privateca.GetCsrForCertificateAuthorityRequest, opts ...grpc.CallOption) (*privateca.CsrForSignCertificateAuthority, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaGetCsrForCertificateAuthority, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaServiceClient(connection).GetCsrForCertificateAuthority(ctx, in, opts...)
}

// Get is an operation of Yandex.Cloud Privateca PrivateCa service.
func (c privateCaClient) Get(ctx context.Context, in *privateca.GetCertificateAuthorityRequest, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaGet, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Privateca PrivateCa service.
func (c privateCaClient) List(ctx context.Context, in *privateca.ListCertificateAuthoritiesRequest, opts ...grpc.CallOption) (*privateca.ListCertificateAuthoritiesResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaList, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaServiceClient(connection).List(ctx, in, opts...)
}

// PrivateCaUpdateOperation is used to monitor the state of Update operations.
type PrivateCaUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PrivateCaUpdateOperation) Metadata() *privateca.UpdateCertificateAuthorityMetadata {
	return o.Operation.Metadata().(*privateca.UpdateCertificateAuthorityMetadata)
}

// Response retrieves the operation response.
func (o *PrivateCaUpdateOperation) Response() *privateca.CertificateAuthority {
	return o.Operation.Response().(*privateca.CertificateAuthority)
}

// Wait polls the operation until it's done.
func (o *PrivateCaUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.CertificateAuthority, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.CertificateAuthority)
	return response, err
}

// Update is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) Update(ctx context.Context, in *privateca.UpdateCertificateAuthorityRequest, opts ...grpc.CallOption) (*PrivateCaUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: (*privateca.UpdateCertificateAuthorityMetadata)(nil),
		ResponseType: (*privateca.CertificateAuthority)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaUpdateOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Privateca PrivateCa service.
func (c privateCaClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// PrivateCaSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type PrivateCaSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PrivateCaSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*PrivateCaSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaSetAccessBindingsOperation{*op}, nil
}

// PrivateCaUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type PrivateCaUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PrivateCaUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PrivateCaUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PrivateCaUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Privateca PrivateCa service.
// It returns an object which should be used to monitor the operation state.
func (c privateCaClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*PrivateCaUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPrivateCaServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PrivateCaUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c privateCaClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PrivateCaGenerateCertificateAuthority                = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.GenerateCertificateAuthority")
	PrivateCaGenerateCertificateAuthorityByCsr           = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.GenerateCertificateAuthorityByCsr")
	PrivateCaImportCertificateAuthority                  = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.ImportCertificateAuthority")
	PrivateCaGenerateCsrForCertificateAuthority          = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.GenerateCsrForCertificateAuthority")
	PrivateCaSendSignedCertificateOfCertificateAuthority = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.SendSignedCertificateOfCertificateAuthority")
	PrivateCaDelete                                      = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.Delete")
	PrivateCaGetCsrForCertificateAuthority               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.GetCsrForCertificateAuthority")
	PrivateCaGet                                         = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.Get")
	PrivateCaList                                        = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.List")
	PrivateCaUpdate                                      = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.Update")
	PrivateCaListAccessBindings                          = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.ListAccessBindings")
	PrivateCaSetAccessBindings                           = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.SetAccessBindings")
	PrivateCaUpdateAccessBindings                        = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaService.UpdateAccessBindings")
	PrivateCaOperationPoller                             = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
