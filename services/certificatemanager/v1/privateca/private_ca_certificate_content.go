// Code generated by sdkgen-v2. DO NOT EDIT.
package privatecasdk

import (
	"context"

	privateca "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1/privateca"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// PrivateCaCertificateContentClient provides methods for managing PrivateCaCertificateContent resources of Yandex.Cloud Privateca.
type PrivateCaCertificateContentClient interface {
	GetChain(context.Context, *privateca.GetCertificateChainRequest, ...grpc.CallOption) (*privateca.GetCertificateChainResponse, error)
	GetPrivateKey(context.Context, *privateca.GetCertificatePrivateKeyRequest, ...grpc.CallOption) (*privateca.GetCertificatePrivateKeyResponse, error)
}

var _ PrivateCaCertificateContentClient = privateCaCertificateContentClient{}

type privateCaCertificateContentClient struct {
	connector transport.Connector
}

// NewPrivateCaCertificateContentClient returns PrivateCaCertificateContentClient implementation.
func NewPrivateCaCertificateContentClient(connector transport.Connector) PrivateCaCertificateContentClient {
	return privateCaCertificateContentClient{connector}
}

// GetChain is an operation of Yandex.Cloud Privateca PrivateCaCertificateContent service.
func (c privateCaCertificateContentClient) GetChain(ctx context.Context, in *privateca.GetCertificateChainRequest, opts ...grpc.CallOption) (*privateca.GetCertificateChainResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateContentGetChain, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaCertificateContentServiceClient(connection).GetChain(ctx, in, opts...)
}

// GetPrivateKey is an operation of Yandex.Cloud Privateca PrivateCaCertificateContent service.
func (c privateCaCertificateContentClient) GetPrivateKey(ctx context.Context, in *privateca.GetCertificatePrivateKeyRequest, opts ...grpc.CallOption) (*privateca.GetCertificatePrivateKeyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PrivateCaCertificateContentGetPrivateKey, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPrivateCaCertificateContentServiceClient(connection).GetPrivateKey(ctx, in, opts...)
}

var (
	PrivateCaCertificateContentGetChain      = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateContentService.GetChain")
	PrivateCaCertificateContentGetPrivateKey = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PrivateCaCertificateContentService.GetPrivateKey")
)
