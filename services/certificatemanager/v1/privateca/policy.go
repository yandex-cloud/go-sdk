// Code generated by sdkgen-v2. DO NOT EDIT.
package privatecasdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	privateca "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1/privateca"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// PolicyClient provides methods for managing Policy resources of Yandex.Cloud Privateca.
type PolicyClient interface {
	Create(context.Context, *privateca.CreatePolicyRequest, ...grpc.CallOption) (*PolicyCreateOperation, error)
	Update(context.Context, *privateca.UpdatePolicyRequest, ...grpc.CallOption) (*PolicyUpdateOperation, error)
	Delete(context.Context, *privateca.DeletePolicyRequest, ...grpc.CallOption) (*PolicyDeleteOperation, error)
	Get(context.Context, *privateca.GetPolicyRequest, ...grpc.CallOption) (*privateca.Policy, error)
	List(context.Context, *privateca.ListPolicyRequest, ...grpc.CallOption) (*privateca.ListPolicyResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*PolicySetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*PolicyUpdateAccessBindingsOperation, error)
}

var _ PolicyClient = policyClient{}

type policyClient struct {
	connector transport.Connector
}

// NewPolicyClient returns PolicyClient implementation.
func NewPolicyClient(connector transport.Connector) PolicyClient {
	return policyClient{connector}
}

// PolicyCreateOperation is used to monitor the state of Create operations.
type PolicyCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyCreateOperation) Metadata() *privateca.CreatePolicyMetadata {
	return o.Operation.Metadata().(*privateca.CreatePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyCreateOperation) Response() *privateca.Policy {
	return o.Operation.Response().(*privateca.Policy)
}

// Wait polls the operation until it's done.
func (o *PolicyCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.Policy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.Policy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.Policy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.Policy)
	return response, err
}

// Create is an operation of Yandex.Cloud Privateca Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Create(ctx context.Context, in *privateca.CreatePolicyRequest, opts ...grpc.CallOption) (*PolicyCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPolicyServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.CreatePolicyMetadata).GetId()
		},
		MetadataType: (*privateca.CreatePolicyMetadata)(nil),
		ResponseType: (*privateca.Policy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyCreateOperation{*op}, nil
}

// PolicyUpdateOperation is used to monitor the state of Update operations.
type PolicyUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyUpdateOperation) Metadata() *privateca.UpdatePolicyMetadata {
	return o.Operation.Metadata().(*privateca.UpdatePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyUpdateOperation) Response() *privateca.Policy {
	return o.Operation.Response().(*privateca.Policy)
}

// Wait polls the operation until it's done.
func (o *PolicyUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.Policy, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.Policy)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.Policy, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.Policy)
	return response, err
}

// Update is an operation of Yandex.Cloud Privateca Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Update(ctx context.Context, in *privateca.UpdatePolicyRequest, opts ...grpc.CallOption) (*PolicyUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPolicyServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.UpdatePolicyMetadata).GetId()
		},
		MetadataType: (*privateca.UpdatePolicyMetadata)(nil),
		ResponseType: (*privateca.Policy)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyUpdateOperation{*op}, nil
}

// PolicyDeleteOperation is used to monitor the state of Delete operations.
type PolicyDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *PolicyDeleteOperation) Metadata() *privateca.DeletePolicyMetadata {
	return o.Operation.Metadata().(*privateca.DeletePolicyMetadata)
}

// Response retrieves the operation response.
func (o *PolicyDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Privateca Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) Delete(ctx context.Context, in *privateca.DeletePolicyRequest, opts ...grpc.CallOption) (*PolicyDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPolicyServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.DeletePolicyMetadata).GetId()
		},
		MetadataType: (*privateca.DeletePolicyMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Privateca Policy service.
func (c policyClient) Get(ctx context.Context, in *privateca.GetPolicyRequest, opts ...grpc.CallOption) (*privateca.Policy, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyGet, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPolicyServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Privateca Policy service.
func (c policyClient) List(ctx context.Context, in *privateca.ListPolicyRequest, opts ...grpc.CallOption) (*privateca.ListPolicyResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyList, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPolicyServiceClient(connection).List(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Privateca Policy service.
func (c policyClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewPolicyServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// PolicySetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type PolicySetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PolicySetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicySetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicySetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Privateca Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*PolicySetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicySetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPolicyServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicySetAccessBindingsOperation{*op}, nil
}

// PolicyUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type PolicyUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *PolicyUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *PolicyUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *PolicyUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Privateca Policy service.
// It returns an object which should be used to monitor the operation state.
func (c policyClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*PolicyUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewPolicyServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &PolicyUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c policyClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, PolicyOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	PolicyCreate               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.Create")
	PolicyUpdate               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.Update")
	PolicyDelete               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.Delete")
	PolicyGet                  = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.Get")
	PolicyList                 = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.List")
	PolicyListAccessBindings   = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.ListAccessBindings")
	PolicySetAccessBindings    = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.SetAccessBindings")
	PolicyUpdateAccessBindings = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.PolicyService.UpdateAccessBindings")
	PolicyOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
