// Code generated by sdkgen-v2. DO NOT EDIT.
package privatecasdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	privateca "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1/privateca"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TemplateClient provides methods for managing Template resources of Yandex.Cloud Privateca.
type TemplateClient interface {
	Create(context.Context, *privateca.CreateTemplateRequest, ...grpc.CallOption) (*TemplateCreateOperation, error)
	Delete(context.Context, *privateca.DeleteTemplateRequest, ...grpc.CallOption) (*TemplateDeleteOperation, error)
	Get(context.Context, *privateca.GetTemplateRequest, ...grpc.CallOption) (*privateca.Template, error)
	List(context.Context, *privateca.ListTemplateRequest, ...grpc.CallOption) (*privateca.ListTemplateResponse, error)
	Update(context.Context, *privateca.UpdateTemplateRequest, ...grpc.CallOption) (*TemplateUpdateOperation, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*TemplateSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*TemplateUpdateAccessBindingsOperation, error)
}

var _ TemplateClient = templateClient{}

type templateClient struct {
	connector transport.Connector
}

// NewTemplateClient returns TemplateClient implementation.
func NewTemplateClient(connector transport.Connector) TemplateClient {
	return templateClient{connector}
}

// TemplateCreateOperation is used to monitor the state of Create operations.
type TemplateCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TemplateCreateOperation) Metadata() *privateca.CreateTemplateMetadata {
	return o.Operation.Metadata().(*privateca.CreateTemplateMetadata)
}

// Response retrieves the operation response.
func (o *TemplateCreateOperation) Response() *privateca.Template {
	return o.Operation.Response().(*privateca.Template)
}

// Wait polls the operation until it's done.
func (o *TemplateCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.Template, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.Template)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TemplateCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.Template, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.Template)
	return response, err
}

// Create is an operation of Yandex.Cloud Privateca Template service.
// It returns an object which should be used to monitor the operation state.
func (c templateClient) Create(ctx context.Context, in *privateca.CreateTemplateRequest, opts ...grpc.CallOption) (*TemplateCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewTemplateServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.CreateTemplateMetadata).GetId()
		},
		MetadataType: (*privateca.CreateTemplateMetadata)(nil),
		ResponseType: (*privateca.Template)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TemplateCreateOperation{*op}, nil
}

// TemplateDeleteOperation is used to monitor the state of Delete operations.
type TemplateDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TemplateDeleteOperation) Metadata() *privateca.DeleteTemplateMetadata {
	return o.Operation.Metadata().(*privateca.DeleteTemplateMetadata)
}

// Response retrieves the operation response.
func (o *TemplateDeleteOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TemplateDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TemplateDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// Delete is an operation of Yandex.Cloud Privateca Template service.
// It returns an object which should be used to monitor the operation state.
func (c templateClient) Delete(ctx context.Context, in *privateca.DeleteTemplateRequest, opts ...grpc.CallOption) (*TemplateDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewTemplateServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.DeleteTemplateMetadata).GetId()
		},
		MetadataType: (*privateca.DeleteTemplateMetadata)(nil),
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TemplateDeleteOperation{*op}, nil
}

// Get is an operation of Yandex.Cloud Privateca Template service.
func (c templateClient) Get(ctx context.Context, in *privateca.GetTemplateRequest, opts ...grpc.CallOption) (*privateca.Template, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateGet, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewTemplateServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Privateca Template service.
func (c templateClient) List(ctx context.Context, in *privateca.ListTemplateRequest, opts ...grpc.CallOption) (*privateca.ListTemplateResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateList, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewTemplateServiceClient(connection).List(ctx, in, opts...)
}

// TemplateUpdateOperation is used to monitor the state of Update operations.
type TemplateUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *TemplateUpdateOperation) Metadata() *privateca.UpdateTemplateMetadata {
	return o.Operation.Metadata().(*privateca.UpdateTemplateMetadata)
}

// Response retrieves the operation response.
func (o *TemplateUpdateOperation) Response() *privateca.Template {
	return o.Operation.Response().(*privateca.Template)
}

// Wait polls the operation until it's done.
func (o *TemplateUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*privateca.Template, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*privateca.Template)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TemplateUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*privateca.Template, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*privateca.Template)
	return response, err
}

// Update is an operation of Yandex.Cloud Privateca Template service.
// It returns an object which should be used to monitor the operation state.
func (c templateClient) Update(ctx context.Context, in *privateca.UpdateTemplateRequest, opts ...grpc.CallOption) (*TemplateUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewTemplateServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*privateca.UpdateTemplateMetadata).GetId()
		},
		MetadataType: (*privateca.UpdateTemplateMetadata)(nil),
		ResponseType: (*privateca.Template)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TemplateUpdateOperation{*op}, nil
}

// ListAccessBindings is an operation of Yandex.Cloud Privateca Template service.
func (c templateClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return privateca.NewTemplateServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// TemplateSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type TemplateSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *TemplateSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TemplateSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TemplateSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Privateca Template service.
// It returns an object which should be used to monitor the operation state.
func (c templateClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*TemplateSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewTemplateServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TemplateSetAccessBindingsOperation{*op}, nil
}

// TemplateUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type TemplateUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *TemplateUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *TemplateUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *TemplateUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Privateca Template service.
// It returns an object which should be used to monitor the operation state.
func (c templateClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*TemplateUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := privateca.NewTemplateServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &TemplateUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c templateClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, TemplateOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	TemplateCreate               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.Create")
	TemplateDelete               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.Delete")
	TemplateGet                  = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.Get")
	TemplateList                 = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.List")
	TemplateUpdate               = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.Update")
	TemplateListAccessBindings   = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.ListAccessBindings")
	TemplateSetAccessBindings    = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.SetAccessBindings")
	TemplateUpdateAccessBindings = protoreflect.FullName("yandex.cloud.certificatemanager.v1.privateca.TemplateService.UpdateAccessBindings")
	TemplateOperationPoller      = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
