// Code generated by sdkgen-v2. DO NOT EDIT.
package lockboxsdk

import (
	"context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	lockbox "github.com/yandex-cloud/go-genproto/yandex/cloud/lockbox/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	sdkop "github.com/yandex-cloud/go-sdk/v2/pkg/operation"
	"github.com/yandex-cloud/go-sdk/v2/pkg/transport"
	"google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// SecretClient provides methods for managing Secret resources of Yandex.Cloud Lockbox.
type SecretClient interface {
	Get(context.Context, *lockbox.GetSecretRequest, ...grpc.CallOption) (*lockbox.Secret, error)
	List(context.Context, *lockbox.ListSecretsRequest, ...grpc.CallOption) (*lockbox.ListSecretsResponse, error)
	Create(context.Context, *lockbox.CreateSecretRequest, ...grpc.CallOption) (*SecretCreateOperation, error)
	Update(context.Context, *lockbox.UpdateSecretRequest, ...grpc.CallOption) (*SecretUpdateOperation, error)
	Delete(context.Context, *lockbox.DeleteSecretRequest, ...grpc.CallOption) (*SecretDeleteOperation, error)
	Activate(context.Context, *lockbox.ActivateSecretRequest, ...grpc.CallOption) (*SecretActivateOperation, error)
	Deactivate(context.Context, *lockbox.DeactivateSecretRequest, ...grpc.CallOption) (*SecretDeactivateOperation, error)
	ListVersions(context.Context, *lockbox.ListVersionsRequest, ...grpc.CallOption) (*lockbox.ListVersionsResponse, error)
	AddVersion(context.Context, *lockbox.AddVersionRequest, ...grpc.CallOption) (*SecretAddVersionOperation, error)
	ScheduleVersionDestruction(context.Context, *lockbox.ScheduleVersionDestructionRequest, ...grpc.CallOption) (*SecretScheduleVersionDestructionOperation, error)
	CancelVersionDestruction(context.Context, *lockbox.CancelVersionDestructionRequest, ...grpc.CallOption) (*SecretCancelVersionDestructionOperation, error)
	ListOperations(context.Context, *lockbox.ListSecretOperationsRequest, ...grpc.CallOption) (*lockbox.ListSecretOperationsResponse, error)
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest, ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest, ...grpc.CallOption) (*SecretSetAccessBindingsOperation, error)
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest, ...grpc.CallOption) (*SecretUpdateAccessBindingsOperation, error)
}

var _ SecretClient = secretClient{}

type secretClient struct {
	connector transport.Connector
}

// NewSecretClient returns SecretClient implementation.
func NewSecretClient(connector transport.Connector) SecretClient {
	return secretClient{connector}
}

// Get is an operation of Yandex.Cloud Lockbox Secret service.
func (c secretClient) Get(ctx context.Context, in *lockbox.GetSecretRequest, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	connection, err := c.connector.GetConnection(ctx, SecretGet, opts...)
	if err != nil {
		return nil, err
	}
	return lockbox.NewSecretServiceClient(connection).Get(ctx, in, opts...)
}

// List is an operation of Yandex.Cloud Lockbox Secret service.
func (c secretClient) List(ctx context.Context, in *lockbox.ListSecretsRequest, opts ...grpc.CallOption) (*lockbox.ListSecretsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecretList, opts...)
	if err != nil {
		return nil, err
	}
	return lockbox.NewSecretServiceClient(connection).List(ctx, in, opts...)
}

// SecretCreateOperation is used to monitor the state of Create operations.
type SecretCreateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretCreateOperation) Metadata() *lockbox.CreateSecretMetadata {
	return o.Operation.Metadata().(*lockbox.CreateSecretMetadata)
}

// Response retrieves the operation response.
func (o *SecretCreateOperation) Response() *lockbox.Secret {
	return o.Operation.Response().(*lockbox.Secret)
}

// Wait polls the operation until it's done.
func (o *SecretCreateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretCreateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// Create is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) Create(ctx context.Context, in *lockbox.CreateSecretRequest, opts ...grpc.CallOption) (*SecretCreateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretCreate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).Create(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.CreateSecretMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.CreateSecretMetadata)(nil),
		ResponseType: (*lockbox.Secret)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretCreateOperation{*op}, nil
}

// SecretUpdateOperation is used to monitor the state of Update operations.
type SecretUpdateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretUpdateOperation) Metadata() *lockbox.UpdateSecretMetadata {
	return o.Operation.Metadata().(*lockbox.UpdateSecretMetadata)
}

// Response retrieves the operation response.
func (o *SecretUpdateOperation) Response() *lockbox.Secret {
	return o.Operation.Response().(*lockbox.Secret)
}

// Wait polls the operation until it's done.
func (o *SecretUpdateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretUpdateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// Update is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) Update(ctx context.Context, in *lockbox.UpdateSecretRequest, opts ...grpc.CallOption) (*SecretUpdateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretUpdate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).Update(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.UpdateSecretMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.UpdateSecretMetadata)(nil),
		ResponseType: (*lockbox.Secret)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretUpdateOperation{*op}, nil
}

// SecretDeleteOperation is used to monitor the state of Delete operations.
type SecretDeleteOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretDeleteOperation) Metadata() *lockbox.DeleteSecretMetadata {
	return o.Operation.Metadata().(*lockbox.DeleteSecretMetadata)
}

// Response retrieves the operation response.
func (o *SecretDeleteOperation) Response() *lockbox.Secret {
	return o.Operation.Response().(*lockbox.Secret)
}

// Wait polls the operation until it's done.
func (o *SecretDeleteOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretDeleteOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// Delete is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) Delete(ctx context.Context, in *lockbox.DeleteSecretRequest, opts ...grpc.CallOption) (*SecretDeleteOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretDelete, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).Delete(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.DeleteSecretMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.DeleteSecretMetadata)(nil),
		ResponseType: (*lockbox.Secret)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretDeleteOperation{*op}, nil
}

// SecretActivateOperation is used to monitor the state of Activate operations.
type SecretActivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretActivateOperation) Metadata() *lockbox.ActivateSecretMetadata {
	return o.Operation.Metadata().(*lockbox.ActivateSecretMetadata)
}

// Response retrieves the operation response.
func (o *SecretActivateOperation) Response() *lockbox.Secret {
	return o.Operation.Response().(*lockbox.Secret)
}

// Wait polls the operation until it's done.
func (o *SecretActivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretActivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// Activate is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) Activate(ctx context.Context, in *lockbox.ActivateSecretRequest, opts ...grpc.CallOption) (*SecretActivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretActivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).Activate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.ActivateSecretMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.ActivateSecretMetadata)(nil),
		ResponseType: (*lockbox.Secret)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretActivateOperation{*op}, nil
}

// SecretDeactivateOperation is used to monitor the state of Deactivate operations.
type SecretDeactivateOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretDeactivateOperation) Metadata() *lockbox.DeactivateSecretMetadata {
	return o.Operation.Metadata().(*lockbox.DeactivateSecretMetadata)
}

// Response retrieves the operation response.
func (o *SecretDeactivateOperation) Response() *lockbox.Secret {
	return o.Operation.Response().(*lockbox.Secret)
}

// Wait polls the operation until it's done.
func (o *SecretDeactivateOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretDeactivateOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Secret, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Secret)
	return response, err
}

// Deactivate is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) Deactivate(ctx context.Context, in *lockbox.DeactivateSecretRequest, opts ...grpc.CallOption) (*SecretDeactivateOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretDeactivate, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).Deactivate(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.DeactivateSecretMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.DeactivateSecretMetadata)(nil),
		ResponseType: (*lockbox.Secret)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretDeactivateOperation{*op}, nil
}

// ListVersions is an operation of Yandex.Cloud Lockbox Secret service.
func (c secretClient) ListVersions(ctx context.Context, in *lockbox.ListVersionsRequest, opts ...grpc.CallOption) (*lockbox.ListVersionsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecretListVersions, opts...)
	if err != nil {
		return nil, err
	}
	return lockbox.NewSecretServiceClient(connection).ListVersions(ctx, in, opts...)
}

// SecretAddVersionOperation is used to monitor the state of AddVersion operations.
type SecretAddVersionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretAddVersionOperation) Metadata() *lockbox.AddVersionMetadata {
	return o.Operation.Metadata().(*lockbox.AddVersionMetadata)
}

// Response retrieves the operation response.
func (o *SecretAddVersionOperation) Response() *lockbox.Version {
	return o.Operation.Response().(*lockbox.Version)
}

// Wait polls the operation until it's done.
func (o *SecretAddVersionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretAddVersionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// AddVersion is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) AddVersion(ctx context.Context, in *lockbox.AddVersionRequest, opts ...grpc.CallOption) (*SecretAddVersionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretAddVersion, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).AddVersion(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.AddVersionMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.AddVersionMetadata)(nil),
		ResponseType: (*lockbox.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretAddVersionOperation{*op}, nil
}

// SecretScheduleVersionDestructionOperation is used to monitor the state of ScheduleVersionDestruction operations.
type SecretScheduleVersionDestructionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretScheduleVersionDestructionOperation) Metadata() *lockbox.ScheduleVersionDestructionMetadata {
	return o.Operation.Metadata().(*lockbox.ScheduleVersionDestructionMetadata)
}

// Response retrieves the operation response.
func (o *SecretScheduleVersionDestructionOperation) Response() *lockbox.Version {
	return o.Operation.Response().(*lockbox.Version)
}

// Wait polls the operation until it's done.
func (o *SecretScheduleVersionDestructionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretScheduleVersionDestructionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// ScheduleVersionDestruction is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) ScheduleVersionDestruction(ctx context.Context, in *lockbox.ScheduleVersionDestructionRequest, opts ...grpc.CallOption) (*SecretScheduleVersionDestructionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretScheduleVersionDestruction, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).ScheduleVersionDestruction(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.ScheduleVersionDestructionMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.ScheduleVersionDestructionMetadata)(nil),
		ResponseType: (*lockbox.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretScheduleVersionDestructionOperation{*op}, nil
}

// SecretCancelVersionDestructionOperation is used to monitor the state of CancelVersionDestruction operations.
type SecretCancelVersionDestructionOperation struct {
	sdkop.Operation
}

// Metadata retrieves the operation metadata.
func (o *SecretCancelVersionDestructionOperation) Metadata() *lockbox.CancelVersionDestructionMetadata {
	return o.Operation.Metadata().(*lockbox.CancelVersionDestructionMetadata)
}

// Response retrieves the operation response.
func (o *SecretCancelVersionDestructionOperation) Response() *lockbox.Version {
	return o.Operation.Response().(*lockbox.Version)
}

// Wait polls the operation until it's done.
func (o *SecretCancelVersionDestructionOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretCancelVersionDestructionOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*lockbox.Version, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*lockbox.Version)
	return response, err
}

// CancelVersionDestruction is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) CancelVersionDestruction(ctx context.Context, in *lockbox.CancelVersionDestructionRequest, opts ...grpc.CallOption) (*SecretCancelVersionDestructionOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretCancelVersionDestruction, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).CancelVersionDestruction(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll: c.pollOperation,
		GetResourceID: func(metadata proto.Message) string {
			return metadata.(*lockbox.CancelVersionDestructionMetadata).GetSecretId()
		},
		MetadataType: (*lockbox.CancelVersionDestructionMetadata)(nil),
		ResponseType: (*lockbox.Version)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretCancelVersionDestructionOperation{*op}, nil
}

// ListOperations is an operation of Yandex.Cloud Lockbox Secret service.
func (c secretClient) ListOperations(ctx context.Context, in *lockbox.ListSecretOperationsRequest, opts ...grpc.CallOption) (*lockbox.ListSecretOperationsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecretListOperations, opts...)
	if err != nil {
		return nil, err
	}
	return lockbox.NewSecretServiceClient(connection).ListOperations(ctx, in, opts...)
}

// ListAccessBindings is an operation of Yandex.Cloud Lockbox Secret service.
func (c secretClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	connection, err := c.connector.GetConnection(ctx, SecretListAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	return lockbox.NewSecretServiceClient(connection).ListAccessBindings(ctx, in, opts...)
}

// SecretSetAccessBindingsOperation is used to monitor the state of SetAccessBindings operations.
type SecretSetAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *SecretSetAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SecretSetAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretSetAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// SetAccessBindings is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*SecretSetAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretSetAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).SetAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretSetAccessBindingsOperation{*op}, nil
}

// SecretUpdateAccessBindingsOperation is used to monitor the state of UpdateAccessBindings operations.
type SecretUpdateAccessBindingsOperation struct {
	sdkop.Operation
}

// Response retrieves the operation response.
func (o *SecretUpdateAccessBindingsOperation) Response() *emptypb.Empty {
	return o.Operation.Response().(*emptypb.Empty)
}

// Wait polls the operation until it's done.
func (o *SecretUpdateAccessBindingsOperation) Wait(ctx context.Context, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.Wait(ctx, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// WaitInterval polls the operation until it's done with custom interval.
func (o *SecretUpdateAccessBindingsOperation) WaitInterval(ctx context.Context, pollInterval sdkop.PollIntervalFunc, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	abstract, err := o.Operation.WaitInterval(ctx, pollInterval, opts...)
	response, _ := abstract.(*emptypb.Empty)
	return response, err
}

// UpdateAccessBindings is an operation of Yandex.Cloud Lockbox Secret service.
// It returns an object which should be used to monitor the operation state.
func (c secretClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*SecretUpdateAccessBindingsOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretUpdateAccessBindings, opts...)
	if err != nil {
		return nil, err
	}
	pb, err := lockbox.NewSecretServiceClient(connection).UpdateAccessBindings(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	op, err := sdkop.NewOperation(pb, &sdkop.Concretization{
		Poll:         c.pollOperation,
		MetadataType: nil,
		ResponseType: (*emptypb.Empty)(nil),
	})
	if err != nil {
		return nil, err
	}
	return &SecretUpdateAccessBindingsOperation{*op}, nil
}

// pollOperation returns the current state of the polled operation.
func (c secretClient) pollOperation(ctx context.Context, operationId string, opts ...grpc.CallOption) (sdkop.YCOperation, error) {
	connection, err := c.connector.GetConnection(ctx, SecretOperationPoller, opts...)
	if err != nil {
		return nil, err
	}
	return operation.NewOperationServiceClient(connection).Get(ctx, &operation.GetOperationRequest{OperationId: operationId}, opts...)
}

var (
	SecretGet                        = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Get")
	SecretList                       = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.List")
	SecretCreate                     = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Create")
	SecretUpdate                     = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Update")
	SecretDelete                     = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Delete")
	SecretActivate                   = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Activate")
	SecretDeactivate                 = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.Deactivate")
	SecretListVersions               = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.ListVersions")
	SecretAddVersion                 = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.AddVersion")
	SecretScheduleVersionDestruction = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.ScheduleVersionDestruction")
	SecretCancelVersionDestruction   = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.CancelVersionDestruction")
	SecretListOperations             = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.ListOperations")
	SecretListAccessBindings         = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.ListAccessBindings")
	SecretSetAccessBindings          = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.SetAccessBindings")
	SecretUpdateAccessBindings       = protoreflect.FullName("yandex.cloud.lockbox.v1.SecretService.UpdateAccessBindings")
	SecretOperationPoller            = protoreflect.FullName("yandex.cloud.operation.OperationService.Get")
)
